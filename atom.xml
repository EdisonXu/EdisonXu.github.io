<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Edison Xu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://edisonxu.org/"/>
  <updated>2018-10-30T01:57:48.747Z</updated>
  <id>http://edisonxu.org/</id>
  
  <author>
    <name>Edison Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Akka入门系列(三)：远程Actor</title>
    <link href="http://edisonxu.org/2018/10/30/akka-remote-actor.html"/>
    <id>http://edisonxu.org/2018/10/30/akka-remote-actor.html</id>
    <published>2018-10-30T01:04:22.000Z</published>
    <updated>2018-10-30T01:57:48.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然<code>Akka</code>在单机上可以运行上百万的<code>Actor</code>，但出于容错、负载均衡、灰度发布、提高并行度等等原因，我们仍然需要能在多个不同的服务器上运行<code>Actor</code>。所以Akka提供了<code>akka-remoting</code>的扩展包，屏蔽底层网络传输的细节，让上层以及其简单的方式使用远程的<code>Actor</code>调度。 </p></blockquote><blockquote><p>官方文档：<a href="https://doc.akka.io/docs/akka/current/remoting.html" target="_blank" rel="noopener">https://doc.akka.io/docs/akka/current/remoting.html</a></p></blockquote><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p><code>remoting</code>的存在其实是为<code>akka cluster</code>做底层支持的，通常并不会直接去使用remoting的包。但为了了解<code>cluster</code>的底层原理，还是有必要看下<code>remoting</code>。<br>同时，<code>remoting</code>被设计为<code>Peer-to-Peer</code>而非<code>Client-Server</code>，所以不适用于基于后者的系统开发，比如我们无法在一个provider为local的Actor里去查找一个<code>remote actor</code>发送消息，必须两者均为<code>remote actor</code>，才满足对等。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p><code>Akka</code>的所有设计，都是考虑了分布式的：所有<code>Actor</code>的交互都是基于事件，所有的操作都是异步的。<br>更多设计信息，请参考<a href="https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency" target="_blank" rel="noopener">Remote设计</a>，还是会获益良多。<br>原文中有一句话</p><blockquote><p>This effort has been undertaken to ensure that all functions are available equally when running within a single JVM or on a cluster of hundreds of machines. <strong><em>The key for enabling this is to go from remote to local by way of optimization instead of trying to go from local to remote by way of generalization</em>.</strong> </p></blockquote><p>后面这半句看的不是很懂，希望有理解的朋友回复交流。</p><h2 id="基本例子"><a href="#基本例子" class="headerlink" title="基本例子"></a>基本例子</h2><p><code>Akka</code>将<code>remoting</code>完全配置化了，使用时几乎只需要修改配置文件，除非自定义，否则不需要动一行代码。<br><code>remoting</code>包提供了两个功能：</p><ul><li>查找一个已存在的远程Actor</li><li>在指定的远程路径上创建一个远程Actor</li></ul><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在引入akka actor的基本依赖(请看前文)后，再加上remoting的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-remote_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在一个<code>Akka</code>项目中启用<code>remote</code>功能的话，最基本需要在<code>application.conf</code>（Akka默认的配置文件名）中启用如下配置:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">akka</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">actor</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">provider</span> <span class="string">=</span> <span class="string">remote</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">remote</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">enabled-transports</span> <span class="string">=</span> <span class="string">["akka.remote.netty.tcp"]</span></span><br><span class="line">    <span class="string">netty.tcp</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">hostname</span> <span class="string">=</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">      <span class="string">port</span> <span class="string">=</span> <span class="number">2552</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"> <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>基本配置包含如下四点：</p><ul><li><code>provider</code>从<code>local</code>变成<code>remote</code></li><li><code>enabled-transports</code>指定传输的实现</li><li><code>hostname</code> 指定当前<code>Actor</code>底层网络监听组件所需监听的主机名，如果不指定，默认会调用InetAddress.getLocalHost().getHostAddress()来获取当前主机的IP</li><li><code>port</code> 指定当前<code>Actor</code>底层网络监听组件所需监听的端口，<strong>如果设置为0，则会生成一个随机的端口</strong></li></ul><p><strong>由于要测试下本地去寻找远程actor，所以本文的代码例子中，用<code>remote.conf</code>作为配置文件名</strong></p><blockquote><p>注意<br>如果在同一个主机上启动多个远程Actor，那么<code>port</code>一定要不同。因为远程Actor的底层会启动一个网络监控组件，该组件会去监听指定IP或域名的指定端口。如果都相同，肯定会有一个绑定失败。</p></blockquote><h3 id="查找一个远程Actor"><a href="#查找一个远程Actor" class="headerlink" title="查找一个远程Actor"></a>查找一个远程Actor</h3><p>我们创建一个远程Actor，一会儿去查找它。注意，这里加载了remote.conf，但覆盖了端口为2551，目的是在本地模拟一个远端的Actor。如果觉得在本地起不好理解，就可以找一台服务器，把<code>akka.remote.netty.tcp.hostname</code>也覆盖掉换成服务器的IP，或者干脆另起一个配置文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToFindRemoteActor</span> <span class="keyword">extends</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LoggingAdapter log = Logging.getLogger(getContext().system(), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"ToFindRemoteActor is starting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Receive <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> receiveBuilder()</span><br><span class="line">                .match(String.class, msg-&gt;&#123;</span><br><span class="line">                    log.info(<span class="string">"Msg received: &#123;&#125;"</span>, msg);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config = ConfigFactory.parseString(</span><br><span class="line">                <span class="string">"akka.remote.netty.tcp.port="</span> + <span class="number">2551</span>)</span><br><span class="line">                .withFallback(ConfigFactory.load(<span class="string">"remote.conf"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create an Akka system</span></span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"sys"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create an actor</span></span><br><span class="line">        system.actorOf(Props.create(ToFindRemoteActor.class), <span class="string">"toFind"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动后，可以看到控制台有日志打印出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 11:54:33.684] [main] [akka.remote.Remoting] Starting remoting</span><br><span class="line">[INFO] [10/26/2018 11:54:34.198] [main] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://sys@127.0.0.1:2551]</span><br><span class="line">[INFO] [10/26/2018 11:54:34.200] [main] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://sys@127.0.0.1:2551]</span><br><span class="line">[INFO] [10/26/2018 11:54:34.363] [sys-akka.actor.default-dispatcher-7] [akka://sys/user/toFind] ToFindRemoteActor is starting</span><br></pre></td></tr></table></figure></p><p>这时，我们先尝试在一个本地进程里去查找这个Actor：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"main1"</span>);</span><br><span class="line">        LoggingAdapter log = Logging.getLogger(system, Main2.class);</span><br><span class="line">        ActorSelection toFind = system.actorSelection(<span class="string">"akka.tcp://sys@127.0.0.1:2551/user/toFind"</span>);</span><br><span class="line">        toFind.tell(<span class="string">"hello"</span>, ActorRef.noSender());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，这里我没有提供application.conf，而且也没有指定其他的配置文件！所以这里的ActorSystem起的完全是本地模式。我们运行一下，看看是远端的Actor是否会打印hello呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 14:02:27.661] [local-akka.actor.default-dispatcher-2] [akka://local/deadLetters] Message [java.lang.String] without sender to Actor[akka://local/deadLetters] was not delivered. [1] dead letters encountered. If this is not an expected behavior, then [Actor[akka://local/deadLetters]] may have terminated unexpectedly, This logging can be turned off or adjusted with configuration settings &apos;akka.log-dead-letters&apos; and &apos;akka.log-dead-letters-during-shutdown&apos;.</span><br></pre></td></tr></table></figure></p><p>结果给出了这样的日志，说明并没有发送成功。再次验证了上面提到的Akka Remote的<code>Peer-to-Peer</code>设计，必须要求对等，两边都是<code>remote</code>！</p><p>好了，回到正轨上，我们来看看如何正确的去寻找一个远端actor并发送消息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config = ConfigFactory.load(<span class="string">"remote.conf"</span>);</span><br><span class="line">        <span class="comment">// Create an Akka system</span></span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"main2"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find remote actor</span></span><br><span class="line">        ActorSelection toFind = system.actorSelection(<span class="string">"akka.tcp://sys@127.0.0.1:2551/user/toFind"</span>);</span><br><span class="line">        toFind.tell(<span class="string">"hello"</span>, ActorRef.noSender());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里加载了remote.conf，启用remote provider。可以在ToFindRemoteActor的控制台有如下日志:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 14:12:11.376] [sys-akka.actor.default-dispatcher-4] [akka://sys/user/toFind] Msg received: hello</span><br></pre></td></tr></table></figure></p><p>说明找到且正常收到了消息。</p><h3 id="创建一个远程的Actor"><a href="#创建一个远程的Actor" class="headerlink" title="创建一个远程的Actor"></a>创建一个远程的Actor</h3><p>在Main2里，我们相当于起了一个监听着<code>127.0.0.1：2552</code>的<code>ActorSystem</code>，那我们把Main2当作远程系统(如果觉得127.0.0.1不太好理解，可以把它打包放到其他服务器，并指定hostname为这个服务器的IP)，在当前机器去尝试在Main2这个远端起一个Actor。<br>远程Actor代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToCreateRemoteActor</span> <span class="keyword">extends</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    LoggingAdapter log = Logging.getLogger(getContext().system(), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preStart</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"ToCreateRemoteActor is starting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Receive <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> receiveBuilder()</span><br><span class="line">                .match(String.class, msg-&gt;&#123;</span><br><span class="line">                    log.info(<span class="string">"Msg received: &#123;&#125;"</span>, msg);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建配置文件如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">akka</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">actor</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">provider</span> <span class="string">=</span> <span class="string">"remote"</span></span><br><span class="line">    <span class="string">deployment</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">/toCreateActor</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">remote</span> <span class="string">=</span> <span class="string">"akka.tcp://main2@127.0.0.1:2552"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">  <span class="string">remote</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">netty.tcp</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">hostname</span> <span class="string">=</span> <span class="string">"127.0.0.1"</span></span><br><span class="line">      <span class="string">port</span> <span class="string">=</span> <span class="number">2553</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>其中<code>toCreateActor</code>就是指定远端要启动的Actor的别名，在本地的ActorSystem靠这个别名去启动。注意指定provider为remote！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config = ConfigFactory.load(<span class="string">"create_remote.conf"</span>);</span><br><span class="line">        <span class="comment">// Create an Akka system</span></span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"main3"</span>, config);</span><br><span class="line">        ActorRef actor = system.actorOf(Props.create(ToCreateRemoteActor.class), <span class="string">"toCreateActor"</span>);</span><br><span class="line">        actor.tell(<span class="string">"I'm created!"</span>, ActorRef.noSender());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里就尝试去创建一个名字叫<code>toCreateActor</code>的Actor，而这个名字在配置文件中定义了是远端的，Akka会自动尝试去远端创建。<br>启动一下，看到Main3的日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 15:25:42.794] [main] [akka.remote.Remoting] Starting remoting</span><br><span class="line">[INFO] [10/26/2018 15:25:43.364] [main] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://main3@127.0.0.1:2553]</span><br><span class="line">[INFO] [10/26/2018 15:25:43.365] [main] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://main3@127.0.0.1:2553]</span><br></pre></td></tr></table></figure></p><p>检查Main2的日志，会发现远程Actor创建的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 15:25:43.774] [main2-akka.actor.default-dispatcher-17] [akka://main2/remote/akka.tcp/main3@127.0.0.1:2553/user/toCreateActor] ToCreateRemoteActor is starting</span><br><span class="line">[INFO] [10/26/2018 15:25:43.775] [main2-akka.actor.default-dispatcher-16] [akka://main2/remote/akka.tcp/main3@127.0.0.1:2553/user/toCreateActor] Msg received: I&apos;m created!</span><br></pre></td></tr></table></figure></p><p>到这，一个远端的Actor就被创建出来了。<br>不过，事情就这样结束了吗？思考一个问题：<strong><em>查询这种远端创建的Actor，跟之前那个远端自己起来的Actor，方式一样吗？</em></strong><br>参考Main2，我们再写一个Main4来尝试查询并发送消息。那有一个问题，toCreateActor的地址到底该选哪个？按理说，应该是<code>akka.tcp://main2@127.0.0.1:2552/user/toCreateActor</code>。带着问题，我们试试看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config = ConfigFactory.parseString(</span><br><span class="line">                <span class="string">"akka.remote.netty.tcp.port="</span> + <span class="number">0</span>)</span><br><span class="line">                .withFallback(ConfigFactory.load(<span class="string">"remote.conf"</span>));</span><br><span class="line">        <span class="comment">// Create an Akka system</span></span><br><span class="line">        ActorSystem system = ActorSystem.create(<span class="string">"main4"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find remote actor</span></span><br><span class="line">        ActorSelection toFind = system.actorSelection(<span class="string">"akka.tcp://main2@127.0.0.1:2552/user/toCreateActor"</span>);</span><br><span class="line">        toFind.tell(<span class="string">"I'm alive!"</span>, ActorRef.noSender());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Main2中，会打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 15:42:25.508] [main2-akka.actor.default-dispatcher-16] [akka://main2/user/toCreateActor] Message [java.lang.String] without sender to Actor[akka://main2/user/toCreateActor] was not delivered. [2] dead letters encountered. If this is not an expected behavior, then [Actor[akka://main2/user/toCreateActor]] may have terminated unexpectedly, This logging can be turned off or adjusted with configuration settings &apos;akka.log-dead-letters&apos; and &apos;akka.log-dead-letters-during-shutdown&apos;.</span><br></pre></td></tr></table></figure></p><p>失败了。。。。。。<br>仔细看，Main2里面创建出来的Actor的Path是<br><code>akka://main2/remote/akka.tcp/main3@127.0.0.1:2553/user/toCreateActor</code><br>而远端自己起的Actor地址是：<br><code>akka://sys/user/toFind</code><br>所以，正确的Path应该是<a href="mailto:`akka.tcp/main3@127.0.0.1" target="_blank" rel="noopener">`akka.tcp/main3@127.0.0.1</a>:2553/user/toCreateActor`<br>修改后测试一下，会发现Main2中打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [10/26/2018 15:25:58.615] [main2-akka.actor.default-dispatcher-17] [akka://main2/remote/akka.tcp/main3@127.0.0.1:2553/user/toCreateActor] Msg received: I&apos;m alive!</span><br></pre></td></tr></table></figure></p><p>所以，可以得出一个看上去不是很合理的结论：<br>虽然RemoteActor是创建在远程机器上，但如果想要查询它，还得向创建者发请求。</p><h2 id="Artery"><a href="#Artery" class="headerlink" title="Artery"></a>Artery</h2><p>Artert是Akka为新版的remote包起的代号。目前是共存状态，但被标记为<a href="https://doc.akka.io/docs/akka/current/common/may-change.html" target="_blank" rel="noopener">may change</a>状态，仅UDP模式可以用于生产。</p><p>配置与原来的remote略有不同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">akka &#123;</span><br><span class="line">  actor &#123;</span><br><span class="line">    provider = remote</span><br><span class="line">  &#125;</span><br><span class="line">  remote &#123;</span><br><span class="line">    artery &#123;</span><br><span class="line">      enabled = on</span><br><span class="line">      transport = aeron-udp</span><br><span class="line">      canonical.hostname = &quot;127.0.0.1&quot;</span><br><span class="line">      canonical.port = 25520</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>与原先相比，多了一个enabled选项控制artery是否启动。<br>相比原来的remote，Artery的变化主要集中在高吞吐、低延迟场景下提高性能上，包括用Akka Streams TCP/TLS替代了原来的Netty TCP，并新增了基于<a href="https://github.com/real-logic/Aeron" target="_blank" rel="noopener">Aeron</a>的UDP协议模式，以及对直接写<code>java.nio.ByteBuffer</code>的支持，大小消息分channel发等等。</p><h2 id="其他介绍"><a href="#其他介绍" class="headerlink" title="其他介绍"></a>其他介绍</h2><p>在具体使用中，还需要考虑序列化、路由、安全，而这些Akka都提供了。且看下回分解。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;虽然&lt;code&gt;Akka&lt;/code&gt;在单机上可以运行上百万的&lt;code&gt;Actor&lt;/code&gt;，但出于容错、负载均衡、灰度发布、提高并行度等等原因，我们仍然需要能在多个不同的服务器上运行&lt;code&gt;Actor&lt;/code&gt;。所以Akka提供了&lt;code&gt;akka-remoting&lt;/code&gt;的扩展包，屏蔽底层网络传输的细节，让上层以及其简单的方式使用远程的&lt;code&gt;Actor&lt;/code&gt;调度。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://doc.akka.io/docs/akka/current/remoting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://doc.akka.io/docs/akka/current/remoting.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h2&gt;
    
    </summary>
    
    
      <category term="akka" scheme="http://edisonxu.org/tags/akka/"/>
    
      <category term="actor" scheme="http://edisonxu.org/tags/actor/"/>
    
      <category term="并发" scheme="http://edisonxu.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Akka入门系列(二)：Actor</title>
    <link href="http://edisonxu.org/2018/10/30/akka-actor.html"/>
    <id>http://edisonxu.org/2018/10/30/akka-actor.html</id>
    <published>2018-10-30T01:04:02.000Z</published>
    <updated>2018-10-30T02:02:17.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Actor模型"><a href="#Actor模型" class="headerlink" title="Actor模型"></a>Actor模型</h2><p>由于<code>AKka</code>的核心是<code>Actor</code>，而<code>Actor</code>是按照<code>Actor模型</code>进行实现的，所以在使用<code>Akka</code>之前，有必要弄清楚什么是<code>Actor模型</code>。<br><code>Actor模型</code>最早是1973年Carl Hewitt、Peter Bishop和Richard Seiger的论文中出现的，受物理学中的广义相对论(<a href="https://en.wikipedia.org/wiki/General_relativity" target="_blank" rel="noopener">general relativity</a>)和量子力学(<a href="https://en.wikipedia.org/wiki/Quantum_mechanics" target="_blank" rel="noopener">quantum mechanics</a>)所启发，为解决并发计算的一个数学模型。</p><p><code>Actor模型</code>所推崇的哲学是”<strong>一切皆是Actor</strong>“，这与面向对象编程的”<strong>一切皆是对象</strong>“类似。<br>但不同的是，在模型中，<code>Actor</code>是一个运算实体，它遵循以下规则：</p><ul><li>接受外部消息，不占用调用方（消息发送者）的CPU时间片</li><li>通过消息改变自身的状态</li><li>创建有限数量的新<code>Actor</code></li><li>发送有限数量的消息给其他<code>Actor</code></li></ul><p>很多语言都实现了<code>Actor模型</code>，而其中最出名的实现要属<code>Erlang</code>的。<code>Akka</code>的实现借鉴了不少<code>Erlang</code>的经验。</p><h2 id="Actor模型的实现"><a href="#Actor模型的实现" class="headerlink" title="Actor模型的实现"></a>Actor模型的实现</h2><p><code>Akka</code>中<code>Actor</code>接受外部消息是靠<code>Mailbox</code>，参见下图<br><img src="/images/2018/10/actor-model.png" alt=""></p><p>对于<code>Akka</code>，它又做了一些约束：</p><ul><li>消息是不可变的</li><li>Actor本身是无状态的</li></ul><h2 id="基本的Actor例子"><a href="#基本的Actor例子" class="headerlink" title="基本的Actor例子"></a>基本的Actor例子</h2><p>本文用Maven管理一个Java的Akka项目。当日，你可以直接从<a href="https://developer.lightbend.com/start/?group=akka下载一个官方的例子。" target="_blank" rel="noopener">https://developer.lightbend.com/start/?group=akka下载一个官方的例子。</a></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-actor_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;akka-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写Actor"><a href="#编写Actor" class="headerlink" title="编写Actor"></a>编写Actor</h3><p>通常情况下，我们只需要直接继承<code>AbstractActor</code>就足够了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoActor</span> <span class="keyword">extends</span> <span class="title">AbstractActor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoggingAdapter log = Logging.getLogger(getContext().getSystem(), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Receive <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> receiveBuilder()</span><br><span class="line">                .match(String.class, s -&gt; &#123;</span><br><span class="line">                    log.info(<span class="string">"Received String message: &#123;&#125;"</span>, s);</span><br><span class="line">                &#125;)</span><br><span class="line">                .matchAny(o -&gt; log.info(<span class="string">"Received unknown message"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>AbstractActor</code>要求必须实现<code>createReceive()</code>方法，该方法返回一个<code>Receive</code>定义了该<code>Actor</code>能够处理哪些消息，以及怎么处理。这里只简单的打印一个日志。</p><h3 id="Actor的启动"><a href="#Actor的启动" class="headerlink" title="Actor的启动"></a>Actor的启动</h3><p><code>Akka</code>中，用<code>ActorSystem</code>来管理所有的<code>Actor</code>，包括其生命周期及交互。<br>启动Actor，有两种方式</p><ol><li>使用内置的main方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">akka.Main.main(<span class="keyword">new</span> String[]&#123;EchoActor.class.getName()&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>这里会自动将EchoActor创建出来。</p><ol><li>手动创建<code>ActorSystem</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActorSystem system = ActorSystem.create(<span class="string">"app"</span>);</span><br><span class="line">ActorRef echoActor = system.actorOf(Props.create(EchoActor.class), <span class="string">"echoActor"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>两种方法本质上其实是一样的，只不过第一种里面把创建<code>ActorSystem</code>等工作封装好了罢了。</p><blockquote><p>注意：<br><code>ActorSystem</code>是一个较重的存在，一般一个应用里，只需要一个<code>ActorSystem</code>。<br>在同一个<code>ActorySystem</code>中，Actor不能重名。</p></blockquote><h3 id="Actor的Path"><a href="#Actor的Path" class="headerlink" title="Actor的Path"></a>Actor的Path</h3><p><code>Akka</code>中的<code>Actor</code>不能直接被new出来，而是按一棵树来管理的，每个<code>Actor</code>都有一个树上的<code>path</code>：<br><img src="/images/2018/10/actor_top_tree.png" alt="Akka Actor Hierarchy"></p><p>实际上，在我们创建自己的<code>Actor</code>之前，<code>Akka</code>已经在系统中创建了三个名字中带有<code>guardian</code>的<code>Actor</code>：</p><ul><li><code>/</code> 最顶层的 <code>root guardian</code>。它是系统中所有<code>Actor</code>的父，系统停止时，它是最后一个停止的</li><li><code>/user</code> <code>guardian</code>。这是用户自行创建的所有<code>Actor</code>的父。这里的user跟用户没有一毛钱关系</li><li><code>/system</code> 系统<code>guardian</code></li></ul><p>在上面的例子里，我们使用的是<code>system.actorOf</code>来创建<code>Actor</code>，<code>actorOf</code>返回的并不是<code>Actor</code>自身，而是一个<code>ActorRef</code>，它屏蔽了<code>Actor</code>的具体物理地址(可能是本jvm，也可以是其他jvm或另一台机器)。通过直接打印<code>ActorRef</code>看到<code>Actor</code>的<code>path</code>，比如本例是<code>/app/user/echoActor</code>。<br>像这种直接由system创建出来的<code>Actor</code>被称为顶层<code>Actor</code>，一般系统设计的时候，顶层<code>Actor</code>数量往往不会太多，大都由顶层<code>Actor</code>通过<code>getContext().actorOf()</code>派生出来其他的<code>Actor</code>。</p><h3 id="Actor间的相互调用-tell-ask"><a href="#Actor间的相互调用-tell-ask" class="headerlink" title="Actor间的相互调用(tell, ask)"></a>Actor间的相互调用(tell, ask)</h3><p>在<code>Actor模型</code>中，<code>Actor</code>本身的执行是不占用被调用方(<code>akka</code>中的话是消息的发送者)的CPU时间片，所以，<code>akka</code>的<code>Actor</code>在相互调用时均是异步的行为。</p><ul><li>tell 发送一个消息到目标<code>Actor</code>后立刻返回</li><li>ask 发送一个消息到目标<code>Actor</code>，并返回一个<code>Future</code>对象，可以通过该对象获取结果。但前提是目标<code>Actor</code>会有Reply才行，如果没有Reply，则抛出超时异常。</li></ul><h4 id="Tell：-Fire-forget"><a href="#Tell：-Fire-forget" class="headerlink" title="Tell： Fire-forget"></a>Tell： Fire-forget</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.tell(message, getSelf());</span><br></pre></td></tr></table></figure><p>其中第二个参数是发送者。之所以要带上这个是为了方便target处理完逻辑后，如果需要返回结果，可以也通过<code>tell</code>异步通知回去。</p><h4 id="Ask-Send-And-Recieve-Future"><a href="#Ask-Send-And-Recieve-Future" class="headerlink" title="Ask: Send-And-Recieve-Future"></a>Ask: Send-And-Recieve-Future</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;Object&gt; future = Patterns.ask(echoActor, <span class="string">"echo me"</span>, <span class="number">200</span>);</span><br><span class="line">future.onSuccess(<span class="keyword">new</span> OnSuccess&lt;Object&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object result)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, system.dispatcher());</span><br></pre></td></tr></table></figure><p>由于之前的<code>EchoActor</code>并没有返回Reply，所以这里什么都没打印。<br>修改<code>EchoActor</code>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Receive <span class="title">createReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> receiveBuilder()</span><br><span class="line">            .match(String.class, s -&gt; &#123;</span><br><span class="line">                log.info(<span class="string">"Received String message: &#123;&#125;"</span>, s);</span><br><span class="line">                ActorRef sender = getSender();</span><br><span class="line">                <span class="keyword">if</span>(!sender.isTerminated())</span><br><span class="line">                    sender.tell(<span class="string">"Receive: "</span>+s, getSelf());</span><br><span class="line">            &#125;)</span><br><span class="line">            .matchAny(o -&gt; log.info(<span class="string">"Received unknown message"</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于前面两个消息的发送者是<code>ActorRef.noSender()</code>，所以<code>EchoActor</code>中<code>getSender()</code>返回的是<code>DeadLetter</code>的<code>ActorRef</code>，terminated值为真。只有最后的值打印出来：<code>Receive: echo me</code></p><h3 id="Actor的停止"><a href="#Actor的停止" class="headerlink" title="Actor的停止"></a>Actor的停止</h3><p>停止一个<code>Actor</code>有三种方法：</p><ul><li>调用<code>ActorSystem</code>或<code>getContext()</code>的stop方法</li><li>给目标发送一个毒药消息：<code>akka.actor.PoisonPill.getInstance()</code></li><li>给目标发送一个Kill消息： <code>akka.actor.Kill.getInstance()</code></li></ul><p>当使用前两种方法时，<code>Actor</code>的行为是：</p><ol><li>挂起它的<code>Mailbox</code>，停止接受新消息</li><li>给它所有的子<code>Actor</code>发送stop命令，并等待所有子<code>Actor</code>停止</li><li>最终停止自己</li></ol><blockquote><p>由于停止<code>Actor</code>是一个异步的操作，在目标<code>Actor</code>被完全停止之前，如果要创建一个同名的<code>Actor</code>，则会收到<code>InvalidActorNameException</code>。</p></blockquote><p>“kill”的方法略有不同，它会抛出一个<code>ActorKilledException</code>到父层去，由父层实现决定如何处理。<br>一般来说，不应该依赖于<code>PoisonPill</code>和<code>Kill</code>去关闭<code>Actor</code>。推荐的方法是自定义关闭消息，交由<code>Actor</code>处理。</p><p>如果需要等待关闭结果，可以采用<code>PatternsCS.gracefulStop</code>，它会返回一个<code>CompletionStage</code>，可以进行到期处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> akka.pattern.PatternsCS.gracefulStop;</span><br><span class="line"><span class="keyword">import</span> akka.pattern.AskTimeoutException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletionStage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  CompletionStage&lt;Boolean&gt; stopped =</span><br><span class="line">    gracefulStop(actorRef, Duration.ofSeconds(<span class="number">5</span>), Manager.SHUTDOWN);</span><br><span class="line">  stopped.toCompletableFuture().get(<span class="number">6</span>, TimeUnit.SECONDS);</span><br><span class="line">  <span class="comment">// the actor has been stopped</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (AskTimeoutException e) &#123;</span><br><span class="line">  <span class="comment">// the actor wasn't stopped within 5 seconds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发送一个自定义的消息，如<code>Manager.SHUTDOWN</code>，等待关闭，如果6秒未关闭，再去处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Actor模型&quot;&gt;&lt;a href=&quot;#Actor模型&quot; class=&quot;headerlink&quot; title=&quot;Actor模型&quot;&gt;&lt;/a&gt;Actor模型&lt;/h2&gt;&lt;p&gt;由于&lt;code&gt;AKka&lt;/code&gt;的核心是&lt;code&gt;Actor&lt;/code&gt;，而&lt;code&gt;Actor&lt;/code&gt;是按照&lt;code&gt;Actor模型&lt;/code&gt;进行实现的，所以在使用&lt;code&gt;Akka&lt;/code&gt;之前，有必要弄清楚什么是&lt;code&gt;Actor模型&lt;/code&gt;。&lt;br&gt;&lt;code&gt;Actor模型&lt;/code&gt;最早是1973年Carl Hewitt、Peter Bishop和Richard Seiger的论文中出现的，受物理学中的广义相对论(&lt;a href=&quot;https://en.wikipedia.org/wiki/General_relativity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;general relativity&lt;/a&gt;)和量子力学(&lt;a href=&quot;https://en.wikipedia.org/wiki/Quantum_mechanics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quantum mechanics&lt;/a&gt;)所启发，为解决并发计算的一个数学模型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Actor模型&lt;/code&gt;所推崇的哲学是”&lt;strong&gt;一切皆是Actor&lt;/strong&gt;“，这与面向对象编程的”&lt;strong&gt;一切皆是对象&lt;/strong&gt;“类似。&lt;br&gt;但不同的是，在模型中，&lt;code&gt;Actor&lt;/code&gt;是一个运算实体，它遵循以下规则：&lt;/p&gt;
    
    </summary>
    
    
      <category term="akka" scheme="http://edisonxu.org/tags/akka/"/>
    
      <category term="actor" scheme="http://edisonxu.org/tags/actor/"/>
    
      <category term="并发" scheme="http://edisonxu.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Akka入门系列(一)：基本介绍</title>
    <link href="http://edisonxu.org/2018/10/30/akka-intro.html"/>
    <id>http://edisonxu.org/2018/10/30/akka-intro.html</id>
    <published>2018-10-30T01:02:26.000Z</published>
    <updated>2018-10-30T01:57:35.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Akka，它能干什么？"><a href="#什么是Akka，它能干什么？" class="headerlink" title="什么是Akka，它能干什么？"></a>什么是Akka，它能干什么？</h2><p>互联网系统的发展，大多数情况下都是业务倒逼的。发展过程不外乎以下几步：</p><ol><li>最开始时，一个简单的MVC程序就可以，甚至是早期的J2EE也能得到很好的性能。</li><li>忽然某一天，系统压力大了，一些功能变得比较慢，这时会尝试去做代码重构优化，必要的地方开始使用进程内MQ以及线程池，开启异步及<code>多线程</code>。</li><li>再往后，单台也不能满足系统的吞吐了，这时就得上集群，前面一个<code>负载均衡</code>，后面部署多台相同的服务器，将压力均衡到若干服务器上，甚至数据库都开始做切片。</li><li>再往后，继续优化，将一些压力大的功能单独提出来，做成一个<code>Service</code>，对外部提供服务，可以是REST，也可以是RPC，用这种方式来提高服务器利用率，毕竟有些业务只需要IO，而有些业务需要很强的CPU，根据实现逻辑不同，需要的物理资源也不同。而这时，简单的负载均衡也无法适用了，需要功能相对复杂的<code>网关</code>或<code>总线</code>，并且各种分布式下的难点都出来了——<code>调度</code>、分布式<code>容错</code>、<code>熔断</code>、<code>弹性</code>、<code>扩容</code>、分布式事务、灰度发布、<code>压力调整</code>等等。</li></ol><p>可以看到，如果要开发一个分布式系统，工程师要掌握的架构知识比较多，从基本的多线程到复杂的调度、容错、熔断、弹性、扩容等等复杂系统等等，任何一个环节出问题，都可能导致系统的不稳定。而<code>Akka</code>简化了这一切：</p><ul><li><code>Akka</code>屏蔽了Java的多线程和锁，转而使用<code>Actor</code>模型，一般的工程师可以在不了解如何优化Java多线程编程的情况下，也能实现非常高性能的系统</li><li><code>Actor</code>设计之初就天然满足了分布式，而且粒度较小，单机上可以跑上百万的<code>Actor</code></li><li><code>Akka</code>屏蔽了分布式集群中底层的通讯机制，对于开发者来说，只要根据业务写好<code>Actor</code>即可</li><li><code>Akka</code>直接提供了分布式下高可用、弹性、动态扩容的功能，无需再次开发</li></ul><p><code>Akka</code>由<code>Scala</code>编写，但同时提供了<code>Scala</code>和<code>Java</code> API。或许<code>Akka</code>你没有听过，但<code>Spark</code>、<code>Flink</code>这些当下流行的大数据分布式流式系统应当有所耳闻，它们的的底层，通通都在使用<code>Akka</code>。<code>Scala</code>的作者<code>Martin Odersky</code>，就是<code>Akka</code>背后的公司<a href="https://www.lightbend.com" target="_blank" rel="noopener"><code>Lightbend</code></a>（以前称为Typesafe）的创始人。<code>Lightbend</code>一直致力于提供基于Actor模型的分布式高性能<strong>系统</strong>，而非仅仅只有分布式框架，旗下除了Akka，还有<code>Play</code>(响应式Web框架)、<code>Lagom</code>(微服务框架)、<code>alpkka</code>(响应式集成中间件)。</p><blockquote><p><code>Akka</code>和<code>Spring</code>区别<br><code>Akka</code>关注在高性能上，<code>Spring</code>关注于工具集的整合和统一上<br><code>Spring</code>写出的代码(生产可用级)，未必是高性能的(没说写不出高性能的)，而<code>Akka</code>写出来的，基本上都是高性能。</p></blockquote><h2 id="利弊"><a href="#利弊" class="headerlink" title="利弊"></a>利弊</h2><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>使用了<code>Akka</code>框架，你可以获得：</p><ul><li>无锁、无同异步编程和多线程编程，低成本(编码阶段)实现高性能，</li><li>天然的并发系统和响应式系统，提供高吞吐和高并发服务</li><li>直接获得容错系统，自由定义恢复、重置或关闭等操作</li><li>简单的由单机扩展至分布式，核心业务代码几乎不用动</li><li>文档齐全</li></ul><blockquote><p>并发和并行的区别</p><ul><li>并发是一个处理器利用时间切片处理多个任务<br>想象电影院内的5台按摩椅，每次服务5-20分钟不等，一堆人等着坐，这个人下来那个人上。</li><li>并行是多个处理器或多核的处理器同时处理不同的任务<br>想象有N排按摩椅 ，每一排都可以服务一堆人。<br>Akka是天然并发系统，但是并不能默认做到所有任务并行。特此澄清一下!</li></ul></blockquote><h3 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h3><ul><li>上手难度高，学习路线陡峭</li><li>中文文档少</li><li>国内使用人少，遇到问题可请教或讨论的人少</li><li>纯异步，调试起来比较麻烦</li><li>第三方工具集少，添加进系统可能还需额外处理，缺少部分组件的整合的资料</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li>作为一个独立程序单独启动</li><li>作为一个lib集成到其他框架，如Spring里</li></ul><h2 id="提供的模组"><a href="#提供的模组" class="headerlink" title="提供的模组"></a>提供的模组</h2><p><code>Akka</code>主要提供了如下的组件（还有一些小的省略了）：</p><ul><li>akka-actor_2.12 核心框架</li><li>akka-remote_2.12 底层通讯模块</li><li>akka-cluster_2.12 集群模块</li><li>akka-cluster-sharding_2.12 集群分片功能模块</li><li>akka-cluster-singleton_2.12 提供集群单例功能的模块</li><li>akka-cluster-tools_2.12 集群特殊功能模块</li><li>akka-stream_2.12 流处理及流式编程模块</li><li>akka-camel_2.12 基于<a href="http://camel.apache.org/" target="_blank" rel="noopener">Apache Camel</a>的实现模块，与各种接口进行通信</li><li>akka-agent_2.12 处理共享变量及原子操作的模块</li><li>akka-http_2.12 用于构建基础http服务的模块(注意，akka http不是web框架！)</li><li>akka-stream-kafka_2.12 kakfa的流式接口模块</li><li>akka-management_2.12 分布式集群管理模块</li><li>akka-testkit_2.12 单元测试模块</li><li>akka-slf4j_2.12 实现slf4j接口的日志模块</li><li>akka-persistence_2.12 用于保存数据、实现CQRS架构、实现EventSourcing的模块</li><li>akka-distributed-data_2.12 分布式数据保存模块，实现最终一致性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Akka，它能干什么？&quot;&gt;&lt;a href=&quot;#什么是Akka，它能干什么？&quot; class=&quot;headerlink&quot; title=&quot;什么是Akka，它能干什么？&quot;&gt;&lt;/a&gt;什么是Akka，它能干什么？&lt;/h2&gt;&lt;p&gt;互联网系统的发展，大多数情况下都是业务倒逼的。发展过程不外乎以下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最开始时，一个简单的MVC程序就可以，甚至是早期的J2EE也能得到很好的性能。&lt;/li&gt;
&lt;li&gt;忽然某一天，系统压力大了，一些功能变得比较慢，这时会尝试去做代码重构优化，必要的地方开始使用进程内MQ以及线程池，开启异步及&lt;code&gt;多线程&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;再往后，单台也不能满足系统的吞吐了，这时就得上集群，前面一个&lt;code&gt;负载均衡&lt;/code&gt;，后面部署多台相同的服务器，将压力均衡到若干服务器上，甚至数据库都开始做切片。&lt;/li&gt;
&lt;li&gt;再往后，继续优化，将一些压力大的功能单独提出来，做成一个&lt;code&gt;Service&lt;/code&gt;，对外部提供服务，可以是REST，也可以是RPC，用这种方式来提高服务器利用率，毕竟有些业务只需要IO，而有些业务需要很强的CPU，根据实现逻辑不同，需要的物理资源也不同。而这时，简单的负载均衡也无法适用了，需要功能相对复杂的&lt;code&gt;网关&lt;/code&gt;或&lt;code&gt;总线&lt;/code&gt;，并且各种分布式下的难点都出来了——&lt;code&gt;调度&lt;/code&gt;、分布式&lt;code&gt;容错&lt;/code&gt;、&lt;code&gt;熔断&lt;/code&gt;、&lt;code&gt;弹性&lt;/code&gt;、&lt;code&gt;扩容&lt;/code&gt;、分布式事务、灰度发布、&lt;code&gt;压力调整&lt;/code&gt;等等。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="akka" scheme="http://edisonxu.org/tags/akka/"/>
    
      <category term="actor" scheme="http://edisonxu.org/tags/actor/"/>
    
      <category term="并行" scheme="http://edisonxu.org/tags/%E5%B9%B6%E8%A1%8C/"/>
    
      <category term="并发" scheme="http://edisonxu.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JHipster快速开发Web应用</title>
    <link href="http://edisonxu.org/2018/02/01/jhipster-quick-start.html"/>
    <id>http://edisonxu.org/2018/02/01/jhipster-quick-start.html</id>
    <published>2018-02-01T08:39:24.000Z</published>
    <updated>2018-02-23T02:19:15.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在基于Spring的Web项目开发中，通常存在两个问题：</p><ol><li>普通CRUD的代码基本重复，完全是体力活；</li><li>Controller层和持久层之间的数据传递，存在不规范。有人喜欢直接返回JSON，有人喜欢用DTO，有人喜欢直接Entity。</li></ol></blockquote><p>那如何解决这个问题呢？自动生成呗。一群喜欢动脑筋（懒）的人，发明了JHipster。<img src="/images/2018/02/logo-jhipster.svg" style="display: inline-block;" width="65" height="65/"></p><blockquote><p><a href="http://www.jhipster.tech" target="_blank" rel="noopener">JHipster</a>是一个基于SpringBoot和Angular的快速Web应用和SpringCloud微服务的脚手架。本文将介绍如何利用JHipster快速开发Web应用。</p></blockquote><h2 id="安装JHipster"><a href="#安装JHipster" class="headerlink" title="安装JHipster"></a>安装JHipster</h2><p>JHipster支持好几种安装方式，这里选用最方便的一种方式：Yarn</p><h5 id="1-安装Java8；"><a href="#1-安装Java8；" class="headerlink" title="1. 安装Java8；"></a>1. 安装<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java8</a>；</h5><h5 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></h5><h5 id="3-安装Yarn"><a href="#3-安装Yarn" class="headerlink" title="3. 安装Yarn"></a>3. 安装<a href="https://yarnpkg.com/en/docs/install" target="_blank" rel="noopener">Yarn</a></h5><h5 id="4-安装JHipster：-yarn-global-add-generator-jhipster"><a href="#4-安装JHipster：-yarn-global-add-generator-jhipster" class="headerlink" title="4. 安装JHipster： yarn global add generator-jhipster"></a>4. 安装JHipster： <code>yarn global add generator-jhipster</code></h5><h2 id="创建Web应用"><a href="#创建Web应用" class="headerlink" title="创建Web应用"></a>创建Web应用</h2><h5 id="1-创建项目目录"><a href="#1-创建项目目录" class="headerlink" title="1. 创建项目目录"></a>1. 创建项目目录</h5><h5 id="2-为一些被墙的资源添加国内源"><a href="#2-为一些被墙的资源添加国内源" class="headerlink" title="2. 为一些被墙的资源添加国内源"></a>2. 为一些被墙的资源添加国内源</h5><p>在项目目录下创建<code>.npmrc</code>文件，为该项目特指一些源。（当然，你也可以为Node和Yarn指定全局的源，那就可以跳过这一步）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class="line">electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br><span class="line">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h5 id="3-在项目目录下运行命令jhipster初始化"><a href="#3-在项目目录下运行命令jhipster初始化" class="headerlink" title="3. 在项目目录下运行命令jhipster初始化"></a>3. 在项目目录下运行命令<code>jhipster</code>初始化</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">(1/16)</span> <span class="string">Which</span> <span class="string">*type*</span> <span class="string">of</span> <span class="string">application</span> <span class="string">would</span> <span class="string">you</span> <span class="string">like</span> <span class="string">to</span> <span class="string">create?</span> <span class="string">(Use</span> <span class="string">arrow</span> <span class="string">keys)</span></span><br><span class="line"><span class="string">&gt; Monolithic application (recommended for simple projects) </span></span><br><span class="line"><span class="string">  //传统Web应用</span></span><br><span class="line"><span class="string">  Microservice application</span></span><br><span class="line"><span class="string">  //微服务</span></span><br><span class="line"><span class="string">  Microservice gateway</span></span><br><span class="line"><span class="string">  //微服务网关</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (2/16) What is the base name of your application? (jhipster) jhipster_quick_start</span></span><br><span class="line"><span class="string">  //输入项目名称，对应Maven的 artifactId</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (3/16) What is your default Java package name? (com.chimestone) com.edi</span></span><br><span class="line"><span class="string">  //输入默认包名，对应Maven的 groupId</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (4/16) Do you want to use the JHipster Registry to configure, monitor and scale your application? (Use arrow keys)</span></span><br><span class="line"><span class="string">&gt; No</span></span><br><span class="line"><span class="string">  Yes</span></span><br><span class="line"><span class="string">  //选择是否启用JHipster Registry（微服务默认开启），它可以理解为Eureka、Spring Cloud Config Server、Spring Cloud Admin的一个合体</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (5/16) Which *type* of authentication would you like to use? (Use arrow keys)</span></span><br><span class="line"><span class="string">  JWT authentication (stateless, with a token)</span></span><br><span class="line"><span class="string">&gt; HTTP Session Authentication (stateful, default Spring Security mechanism)</span></span><br><span class="line"><span class="string">  OAuth2 Authentication (stateless, with an OAuth2 server implementation)</span></span><br><span class="line"><span class="string">  //选择认证方式，支持JWT、Session和OATUH2三种</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (6/16) Which *type* of database would you like to use? (Use arrow keys)</span></span><br><span class="line"><span class="string">&gt; SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle, MSSQL)</span></span><br><span class="line"><span class="string">  MongoDB</span></span><br><span class="line"><span class="string">  Cassandra</span></span><br><span class="line"><span class="string">  //选择数据库类型</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (7/16) Which *production* database would you like to use? (Use arrow keys)</span></span><br><span class="line"><span class="string">&gt; MySQL</span></span><br><span class="line"><span class="string">  MariaDB</span></span><br><span class="line"><span class="string">  PostgreSQL</span></span><br><span class="line"><span class="string">  Oracle (Please follow our documentation to use the Oracle proprietary driver)</span></span><br><span class="line"><span class="string">  Microsoft SQL Server</span></span><br><span class="line"><span class="string">  //选择数据库</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (8/16) Which *development* database would you like to use?</span></span><br><span class="line"><span class="string">  H2 with disk-based persistence</span></span><br><span class="line"><span class="string">&gt; H2 with in-memory persistence</span></span><br><span class="line"><span class="string">  MySQL</span></span><br><span class="line"><span class="string">  //选择开发时连接的数据库，这里选H2只是为了演示</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (9/16) Do you want to use Hibernate 2nd level cache? (Use arrow keys)</span></span><br><span class="line"><span class="string">&gt; Yes, with ehcache (local cache, for a single node)</span></span><br><span class="line"><span class="string">  Yes, with HazelCast (distributed cache, for multiple nodes)</span></span><br><span class="line"><span class="string">  [BETA] Yes, with Infinispan (hybrid cache, for multiple nodes)</span></span><br><span class="line"><span class="string">  No</span></span><br><span class="line"><span class="string">  //选择集成到Hibernate2级缓存</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (10/16) Would you like to use Maven or Gradle for building the backend? (Use arrow keys)</span></span><br><span class="line"><span class="string">&gt; Maven</span></span><br><span class="line"><span class="string">  Gradle</span></span><br><span class="line"><span class="string">  //选择打包工具</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (11/16) Which other technologies would you like to use?</span></span><br><span class="line"><span class="string">  ( ) Social login (Google, Facebook, Twitter)</span></span><br><span class="line"><span class="string">  (*) Search engine using Elasticsearch</span></span><br><span class="line"><span class="string"> &gt;(*) WebSockets using Spring Websocket</span></span><br><span class="line"><span class="string">  ( ) API first development using swagger-codegen</span></span><br><span class="line"><span class="string">  ( ) [BETA] Asynchronous messages using Apache Kafka</span></span><br><span class="line"><span class="string">  //选择其他的集成框架，这里注意要按下空格键才是启用，启用后会加上*标识。看到无脑自动集成ES是不是泪流满面？</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (12/16) Which *Framework* would you like to use for the client? (Use arrow keys)</span></span><br><span class="line"><span class="string">&gt; Angular 4</span></span><br><span class="line"><span class="string">  AngularJS 1.x</span></span><br><span class="line"><span class="string">  //选择集成的Angular的版本，Angular4采用Webpack打包自动化，而1.x采用Bower和Gulp做自动化</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (13/16) Would you like to use the LibSass stylesheet preprocessor for your CSS? (y/N) y</span></span><br><span class="line"><span class="string">  //是否启用LibSass</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (14/16) Would you like to enable internationalization support? (Y/n) n</span></span><br><span class="line"><span class="string">  //是否开启国际化</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (15/16) Besides JUnit and Karma, which testing frameworks would you like to use? (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to inverse selection)</span></span><br><span class="line"><span class="string"> &gt;( ) Gatling</span></span><br><span class="line"><span class="string">  ( ) Cucumber</span></span><br><span class="line"><span class="string">  ( ) Protractor</span></span><br><span class="line"><span class="string">  //选择测试框架，做压力测试的同学有福了</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  (16/16) Would you like to install other generators from the JHipster Marketplace? (y/N)</span></span><br><span class="line"><span class="string">  //从JHipster市场下载一些其他集成，上下键翻动，空格选取/反选，回车结束。可以看到市场里还是有不少好东西的，像pages服务、ReactNative集成、swagger2markup让你的swagger界面更漂亮、gRPC自动CRUD代码等。</span></span><br></pre></td></tr></table></figure><p>全部选择后，就开始了自动执行生成项目，喝杯水坐等。<strong>如果没有翻墙且忘了添加第二步的同学，请坐等卡住。</strong><br>这里有一点必须提醒，虽然JHipster选项中可以启用ES集成，<strong>但受SpringBoot对ES的集成版本限制</strong>。<br>JHipster采用的是1.5.X的SpringBoot版本，对应的spring-data-elasticsearch是2.1.X版本，该版本最高支持ES到2.X，醉了~~~具体参见<a href="https://github.com/spring-projects/spring-data-elasticsearch" target="_blank" rel="noopener">这里</a><br>所以如果要使用高版本的ES，还是得用ES自己提供的REST接口，据ES的一篇文章<a href="https://www.elastic.co/blog/benchmarking-rest-client-transport-client" target="_blank" rel="noopener">Benchmarking REST client and transport client</a>显示，5.0以后的ES自带的REST接口性能还是可以的。</p><h2 id="基本姿势"><a href="#基本姿势" class="headerlink" title="基本姿势"></a>基本姿势</h2><p>对于普通Web应用，JHipster在SpringBoot中默认加载了<code>SpringMVC</code>、<code>SpringData</code>、<code>SpringJPA</code>、<code>SpringSecurity</code>几个主要的Web相关的家族成员，LogStash作为日志工具，同时引入了<code>ApacheCommons</code>包、<code>Swagger</code>、<code>HikariCP</code>数据库连接池、<code>Jackson</code>等工具。基本上开发一个JavaWeb项目所需的框架都具备了，甚至还引入了<code>Metrics</code>做运维监控。<br>此外，它还引入两个特殊的组件——<code>Liquibase</code>和<code>MapperStruct</code>。</p><ul><li><a href="liquibase.org">Liquibase</a>是一个帮助管理数据库变更的工具</li><li><a href="http://mapstruct.org/" target="_blank" rel="noopener">MapperStruct</a>用于自动生成Entity和对应DTO之间的映射关系类，<strong>在使用DTO时，千万记得要把自动生成的目录加到IDE的项目路径里</strong>！</li></ul><p>国内搞JavaWeb的，大都喜欢使用<code>Mybatis</code>，可惜的是JHipster默认并不提供<code>Mybatis</code>的集成。但是<code>SpringJPA</code>现在已经封装的十分完善，常规的CRUD和分页，在JHipster下，无需写一行代码（是的，你没看错）。<br>如果确实需要比较复杂的级联查询，JPA也提供了Specification和Sample实现，性能测试下来其实没多大区别，对付普通Web足以。<br>如果确实不喜欢JPA，好在SpringBoot本身可以同时使用JPA和Mybatis，那么就把复杂级联用Mybatis，普通CRUD用JPA，达到最佳效果。</p><h5 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h5><ul><li><p><strong>Entity</strong><br>JHipster自动产生的项目，内置了<code>User</code>、<code>Authority</code>、<code>PersistentToken</code>、<code>PersistentAuditEvent</code>四个Entity（如果选取的还有其他组件，如OAUTH2等，会有对应的Entity自动生成）。产生的几张表均以<code>jhi_</code>开头。如果启用了ES，那么除了<code>@Entity</code>注解外，你还会看到<code>@Document</code>注解。<br>这里值得一提的是，官方并不推荐修改默认的表名，而且如果要更改User的字段，官方推荐使用创建一个子类继承User类，然后在该子类中把User给Map进来，参见<a href="http://www.jhipster.tech/tips/022_tip_registering_user_with_additional_information.html" target="_blank" rel="noopener">这里</a>。但其实完全自己修改，然后更新数据库字段后，用Liquibase diff命令生成changelog。</p></li><li><p><strong>Controller</strong><br>JHipster自动生成的Controller暴露出的RESTful接口都是<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">标准的RESTful API风格</a>，国内很多程序员都不在乎这个东西，导致代码风格及其粗狂。</p></li><li><p><strong>Repository</strong><br>这一块得益于SpringJPA的强大，一个JpaRepository接口足以满足大多数需求，有些懒人甚至连Controller都懒得写，给Repository接口加上<code>@RepositoryRestResource</code>注解直接暴露RESTful接口出去。</p></li></ul><h5 id="开始表演"><a href="#开始表演" class="headerlink" title="开始表演"></a>开始表演</h5><p>熟悉了代码结构后，我们开始用JHipster来做项目了。</p><ol><li>创建JDL文件描述Entity<br>JHipster默认提供了以下几种类型及校验关键字：</li></ol><table><thead><tr><th>类型</th><th style="text-align:right">校验</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>String</td><td style="text-align:right">required, minlength, maxlength, pattern</td><td style="text-align:right">Java String类型，默认长度取决于使用的底层技术，JPA默认是255长，可以用validation rules修改到1024</td></tr><tr><td>Integer</td><td style="text-align:right">required, min, max</td><td style="text-align:right"></td></tr><tr><td>Long</td><td style="text-align:right">required, min, max</td><td style="text-align:right"></td></tr><tr><td>BigDecimal</td><td style="text-align:right">required, min, max</td><td style="text-align:right"></td></tr><tr><td>Float</td><td style="text-align:right">required, min, max</td><td style="text-align:right"></td></tr><tr><td>Double</td><td style="text-align:right">required, min, max</td><td style="text-align:right"></td></tr><tr><td>Enum</td><td style="text-align:right">required</td><td style="text-align:right"></td></tr><tr><td>Boolean</td><td style="text-align:right">required</td><td style="text-align:right"></td></tr><tr><td>LocalDate</td><td style="text-align:right">required</td><td style="text-align:right">对应<code>java.time.LocalDate</code>类</td></tr><tr><td>Instant</td><td style="text-align:right">required</td><td style="text-align:right">对应<code>java.time.Instant</code>类，DB中映射为<code>Timestamp</code></td></tr><tr><td>ZonedDateTime</td><td style="text-align:right">required</td><td style="text-align:right">对应<code>java.time.ZonedDateTime</code>类，用于需要提供TimeZone的日期</td></tr><tr><td>Blob</td><td style="text-align:right">required, minbytes, maxbytes</td><td style="text-align:right"></td></tr></tbody></table><p>官方提供了一个在线的<a href="https://start.jhipster.tech/jdl-studio/" target="_blank" rel="noopener">JDL Studio</a>，方便撰写JDL。<br>例子如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//双斜杠注释会被忽略掉</span><br><span class="line">/** 这种注释会带到生成的代码里去 */</span><br><span class="line">entity Person &#123;</span><br><span class="line">    name String required,</span><br><span class="line">    sex Sex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum Sex &#123;</span><br><span class="line">    MALE, FEMALE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">entity Country&#123;</span><br><span class="line">    countryName String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">relationship ManyToOne &#123;</span><br><span class="line">    Person&#123;country&#125; to Country</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">paginate Person with pagination</span><br><span class="line">paginate Country with infinite-scroll</span><br></pre></td></tr></table></figure><ol><li>用<code>jhipster import-jdl your-jdl-file.jdl</code>导入Entity。<br>中间会提示有<code>conflict</code>，因为像Cache配置、LiquidBase配置等是已存在的，可以覆盖或merge。<br>执行完毕后，看到代码已经生成进去了。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.edi.domain;</span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这种注释会带到生成的代码里去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"这种注释会带到生成的代码里去"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Cache</span>(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)</span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"sex"</span>)</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="keyword">private</span> Country country;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jhipster-needle-entity-add-field - Jhipster will add fields here, do not remove</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sex <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">sex</span><span class="params">(Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Country <span class="title">getCountry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">country</span><span class="params">(Country country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(Country country)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// jhipster-needle-entity-add-getters-setters - Jhipster will add getters and setters here, do not remove</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>看到有段注释带进去了。<br>再看下Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.edi.web.rest;</span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * REST controller for managing Person.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonResource</span> </span>&#123;</span><br><span class="line"> ... </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET  /people : get all the people.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable the pagination information</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the ResponseEntity with status 200 (OK) and the list of people in body</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/people"</span>)</span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Person&gt;&gt; getAllPeople(<span class="meta">@ApiParam</span> Pageable pageable) &#123;</span><br><span class="line">        log.debug(<span class="string">"REST request to get a page of People"</span>);</span><br><span class="line">        Page&lt;Person&gt; page = personRepository.findAll(pageable);</span><br><span class="line">        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, <span class="string">"/api/people"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(page.getContent(), headers, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SEARCH  /_search/people?query=:query : search for the person corresponding</span></span><br><span class="line"><span class="comment">     * to the query.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> query the query of the person search</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable the pagination information</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of the search</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/_search/people"</span>)</span><br><span class="line">    <span class="meta">@Timed</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Person&gt;&gt; searchPeople(<span class="meta">@RequestParam</span> String query, <span class="meta">@ApiParam</span> Pageable pageable) &#123;</span><br><span class="line">        log.debug(<span class="string">"REST request to search for a page of People for query &#123;&#125;"</span>, query);</span><br><span class="line">        Page&lt;Person&gt; page = personSearchRepository.search(queryStringQuery(query), pageable);</span><br><span class="line">        HttpHeaders headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, <span class="string">"/api/_search/people"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(page.getContent(), headers, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其他的不一一列举了，这里着重看下上面两个实现，一个是分页返回列表，一个是ES搜索。<br>分页这里与我们常规有所不同，它是把分页信息通过<code>PaginationUtil.generatePaginationHttpHeaders(page, &quot;/api/people&quot;);</code>这里生成到<code>Header</code>里去了，前端需要从Header里取。</p><h5 id="自定义修改返回类型-Optional"><a href="#自定义修改返回类型-Optional" class="headerlink" title="自定义修改返回类型(Optional)"></a>自定义修改返回类型(Optional)</h5><p>好吧，看到上面肯定有同学要说了，我们平时分页都是返回JSON，所有数据都是返回JSON！<br>如果非得这么做，那就只能自己做个ResponseUtil，把结果包装成如下格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"content"</span>: [&#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">            <span class="attr">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line">            <span class="attr">"sex"</span>: <span class="string">"MALE"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需增加两个新类：<br><code>CommonResponse</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponse</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CODE = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code=DEFAULT_CODE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResponse</span><span class="params">(<span class="keyword">boolean</span> success, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResponse</span><span class="params">(<span class="keyword">boolean</span> success, T data, <span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... <span class="comment">//get &amp; set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ResponseUtil</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ResponseUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResponseUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseEntity&lt;CommonResponse&gt; <span class="title">okResponse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, <span class="keyword">null</span>, DEFAULT_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(<span class="keyword">int</span> statusCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, <span class="keyword">null</span>, statusCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, data, DEFAULT_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(T data, Pageable pageable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, data, DEFAULT_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(T data, <span class="keyword">int</span> statusCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, data, statusCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(<span class="keyword">boolean</span> successful,T data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, data, DEFAULT_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(<span class="keyword">boolean</span> successful, <span class="keyword">int</span> statusCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, <span class="keyword">null</span>, statusCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(<span class="keyword">boolean</span> successful, T data, <span class="keyword">int</span> statusCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> CommonResponse&lt;&gt;(successful, data, statusCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapResponse</span><span class="params">(<span class="keyword">boolean</span> successful,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                  Optional&lt;T&gt; maybeResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                  HttpHeaders headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                  <span class="keyword">int</span> statusCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ResponseEntity)maybeResponse.map((response) -&gt; &#123;</span><br><span class="line">            CommonResponse&lt;T&gt; commonResponse = <span class="keyword">new</span> CommonResponse&lt;&gt;(successful, response, statusCode);</span><br><span class="line">            <span class="keyword">return</span> ((ResponseEntity.BodyBuilder)ResponseEntity.ok().headers(headers)).body(commonResponse);</span><br><span class="line">        &#125;).orElse(<span class="keyword">new</span> ResponseEntity(<span class="keyword">new</span> CommonResponse&lt;&gt;(successful, <span class="keyword">null</span>, HttpStatus.NOT_FOUND.value()), HttpStatus.NOT_FOUND));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ResponseEntity&lt;CommonResponse&gt; <span class="title">wrapOrNotFound</span><span class="params">(Optional&lt;T&gt; maybeResponse)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wrapResponse(<span class="keyword">true</span>, maybeResponse, <span class="keyword">null</span>, DEFAULT_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后修改下Controller里面的返回为如下即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/people"</span>)</span><br><span class="line"><span class="meta">@Timed</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;Person&gt;&gt; getAllPeople(<span class="meta">@ApiParam</span> Pageable pageable) &#123;</span><br><span class="line">    log.debug(<span class="string">"REST request to get a page of People"</span>);</span><br><span class="line">    Page&lt;Person&gt; page = personRepository.findAll(pageable);</span><br><span class="line">    <span class="comment">//HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/people");</span></span><br><span class="line">    <span class="comment">//return new ResponseEntity&lt;&gt;(page.getContent(), headers, HttpStatus.OK);</span></span><br><span class="line">    <span class="keyword">return</span> ResponseUtil.wrapResponse(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h5><p>先执行<code>yarn install &amp;&amp; bower install</code> (Angular 1.x版本) 或 <code>yarn install</code>(Angular 4版本)对前端代码进行编译。<br>然后可选：</p><ul><li>命令行运行 ./mvnw </li><li>带LiveReload前端调试 gulp (Angular1.x版本)或yarn start(Angular 4版本)</li><li>生产编译 ./mvnw clean package -Pprod</li></ul><p>启动后，默认在本地8080端口启动JHipster的页面，看到已经用它自己的模板实现了常规页面。我们需要做的只是自己做套Angluar页面，套用该模板下的请求处理就好了。</p><h2 id="高级姿势"><a href="#高级姿势" class="headerlink" title="高级姿势"></a>高级姿势</h2><h5 id="Docker集成"><a href="#Docker集成" class="headerlink" title="Docker集成"></a>Docker集成</h5><p>在/src/main/docker/目录下，JHipster提供了docker化所需的所有文件，所以开箱即用。例如，</p><ul><li>启动一个mysql数据库： <code>docker-compose -f src/main/docker/mysql.yml up -d</code></li><li>停止并删除该mysql数据库： <code>docker-compose -f src/main/docker/mysql.yml down</code></li><li>Maven将本项目打包成docker镜像： <code>./mvnw package -Pprod dockerfile:build</code></li><li>启动项目容器： <code>docker-compose -f src/main/docker/app.yml up -d</code></li></ul><p>如果需要maven打包docker镜像后推到Registry，则需要修改pom.xml，将<code>dockerfile-maven-plugin</code>中注释掉的一段给打开。</p><h5 id="CI集成"><a href="#CI集成" class="headerlink" title="CI集成"></a>CI集成</h5><p>(留坑)</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>正常情况下，用<code>Jhipster</code>快速实现普通的JavaWeb项目其实仅需三步：1.初始化项目；2.用JDL创建自己的Entity；3.导入JDL；<br>作为一个脚手架，使用起来已经非常方便了，而且它还支持微服务项目。<br>既然谈到脚手架，不由自主的会与JFinal等其他脚手架对比，JHipster不一定比其他脚手架轻快，但好在代码规范，Spring家族全套，回头看看，确实可以解决文初的那两个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在基于Spring的Web项目开发中，通常存在两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通CRUD的代码基本重复，完全是体力活；&lt;/li&gt;
&lt;li&gt;Controller层和持久层之间的数据传递，存在不规范。有人喜欢直接返回JSON，有人喜欢用DTO，有人喜欢直接Entity。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;那如何解决这个问题呢？自动生成呗。一群喜欢动脑筋（懒）的人，发明了JHipster。&lt;img src=&quot;/images/2018/02/logo-jhipster.svg&quot; style=&quot;display: inline-block;&quot; width=&quot;65&quot; height=&quot;65/&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jhipster.tech&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JHipster&lt;/a&gt;是一个基于SpringBoot和Angular的快速Web应用和SpringCloud微服务的脚手架。本文将介绍如何利用JHipster快速开发Web应用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://edisonxu.org/tags/SpringBoot/"/>
    
      <category term="JHipster" scheme="http://edisonxu.org/tags/JHipster/"/>
    
      <category term="微服务" scheme="http://edisonxu.org/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(八)：AxonFramework与SpringCloud的整合</title>
    <link href="http://edisonxu.org/2017/04/24/axon-spring-cloud.html"/>
    <id>http://edisonxu.org/2017/04/24/axon-spring-cloud.html</id>
    <published>2017-04-24T07:01:51.000Z</published>
    <updated>2018-10-30T01:57:10.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇里，我们在利用Axon3的DistributeCommand的JGroup支持，和DistributedEvent对AMQP的支持，实现了分布式环境下的CQRS和EventSourcing。<br>在这一篇中，我们将把Axon3与当下比较火热的微服务框架——SpringCloud进行整合，并将其微服务化。</p></blockquote><h6 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h6><p>AxonFramework对SpringCloud的支持，是从3.0.2才开始的，但是在3.0.2和3.0.3两个版本，均存在blocking bug，<strong>所以要想与SpringCloud完成整合，版本必须大于等于3.0.4</strong>。<br>PS：连续跳坑，debug读代码，帮Axon找BUG，血泪换来的结论……好在社区足够活跃，作者也比较给力，连续更新。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>按照微服务的概念，我们把Product和Order各自相关的功能单独抽出来各做出一个服务，即product-service和order-service。与上一篇不同，这里并没有把各自service的command端和query端单独拆成一个service，而是放在一起了。当然，你也可以自行把他们拆开，中间通过mq传递消息。<br>具体架构如下：<br><img src="/images/2017/04/lesson7_archi.png" alt=""></p><h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><p>首先，我们在父pom中配置好与SpringCloud集成相关的公共Maven依赖。</p><ul><li>对SpringBoot的依赖 (这一块前面我们已经配置过了，这里可以跳过)</li><li>对SpringCloud的依赖</li><li>对具体SpringCloud组件的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>config-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>discovery-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>proxy-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>product-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>order-service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Features --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringCloud组件"><a href="#SpringCloud组件" class="headerlink" title="SpringCloud组件"></a>SpringCloud组件</h2><p>熟悉SpringCloud的朋友，可以直接跳过本章。</p><h3 id="Discovery-Serivce"><a href="#Discovery-Serivce" class="headerlink" title="Discovery Serivce"></a>Discovery Serivce</h3><p>使用SpringCloud中的Eureka组件，实现服务注册和发现。各个服务本身把自己注册到Eureka上，Proxy Service使用的zuul，在配置了Eureka相关信息后，会自动从Eureka中发现对应服务名及其地址，与配置文件中进行匹配，从而实现动态路由。<br>同时Eureka提供的UI也可以很直观的对服务当前的状态进行监控。<br>使用Eureka非常简单，引入Maven依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在SpringBootApplication的类申明上加上<code>@EnableEurekaServer</code>注解即可。<br>对应配置文件如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure this Discovery Server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  client:</span> <span class="comment">#Not a client, don't register with yourself</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">      enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">endpoints:</span></span><br><span class="line"><span class="attr"> shutdown:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1111</span> <span class="comment">#HTTP(Tomcat) port</span></span><br></pre></td></tr></table></figure></p><p>没什么花样，只是申明自己不是EurekaClient，而是Server。<br>Eureka有一个自我保护机制关闭，默认打开的情况下，当注册的service”挂掉”后，Eureka短时间内并不会直接把它从列表内清除，而是保留一段时间。因为Eureka的设计者认为分布式环境中网络是不可靠的，也许因为网络的原因，Eureka Server没有收到实例的心跳，但并不说命实例就完蛋了，所以这种机制下，它仍然鼓励客户端再去尝试调用这个所谓DOWN状态的实例，如果确实调用失败了，断路器机制还可以派上用场。这里我们方便起见，直接使用server.enable-self-preservation设置为false关闭掉它。（生产别这么用）</p><h3 id="Proxy-Service"><a href="#Proxy-Service" class="headerlink" title="Proxy Service"></a>Proxy Service</h3><p>使用SpringCloud中的zuul组件。具体作用有：</p><ul><li>全局网关，屏蔽内部系统和网络</li><li>请求拦截和动态路由</li><li>请求负载均衡<br>zuul的使用配置非常简单，引入Maven依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>然后在SpringBootApplication类申明上加上<code>@EnableZuulProxy</code>和<code>@EnableDiscoveryClient</code>注解即可。<code>@EnableDiscoveryClient</code>是把Proxy Service注册到Eureka上。<br>对应配置文件如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">proxy-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line">      <span class="string">discovery.enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">discovery.serviceId:</span> <span class="string">config-service</span></span><br><span class="line"><span class="attr">      failFast:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Discovery Server Access</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;config.host:10.1.110.21&#125;:1111/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignoredServices:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    product_command_path:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/product/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">product-service</span></span><br><span class="line"><span class="attr">    product_query_path:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/products/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">product-service</span></span><br><span class="line"><span class="attr">    order-command_path:</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/order/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    order_query_path:</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/orders/**</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p><code>spring.application.name</code> 属性指定服务名<br><code>spring.cloud.config</code> 相关的是配置ConfigService去Eureka上找serviceId为<code>config-service</code>的服务<br><code>eureka.client.serviceUrl.defaultZone</code> 配置要注册的Eureka的地址<br><code>ignoredServices</code>设为<em>，即不转发除了下面<code>routes</code>以外的所有请求<br><code>routes.&lt;xxx&gt;.path</code> 是映射xxx服务与URL地址<br><code>routes.&lt;xxx&gt;.stripPrefix</code> 是不使用前缀，即将<a href="http://product/" target="_blank" rel="noopener">http://product/</a></em> 请求直接转发到product-service。如果设置了前缀，那么合法路径则变为http://<prefix>/product/* 。<br><code>routes.&lt;xxx&gt;.serviceId</code> 即Eureka上xxx服务所注册的服务名，zuul从Eureka上找到该服务名所对应的服务器信息，从而实现动态路由。<br>这里为了演示zuul对不同路径映射到相同服务，我故意把command和query端的URL地址设为不同，如/product和/products。</prefix></p><h3 id="Cloud-Configs-Service"><a href="#Cloud-Configs-Service" class="headerlink" title="Cloud Configs Service"></a>Cloud Configs Service</h3><p>使用SpringCloud中的Cloud组件，实现统一文件配置。（未引入SpringCloudBus实现配置修改通知，可自行修改添加。）<br>一样，引入Maven依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在SpringBootApplication的类声明前加上<code>@EnableConfigServer</code>和<code>@EnableDiscoveryClient</code>注解。<code>@EnableDiscoveryClient</code>是把Config Service注册到Eureka上。<br>SpringCloudConfig最大的好处，可以从git读取配置，给不同环境、不同zone设置不同分支，根据profile指定分支，非常方便。<br>在这里为了方便各位自己跑，我把Config Service配置为读取本地文件。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># Active reading config from local file system</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">native</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        native:</span></span><br><span class="line"><span class="attr">          searchLocations:</span> <span class="string">/usr/edi/spring/configs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:1111/eureka/</span></span><br></pre></td></tr></table></figure></p><h2 id="业务服务"><a href="#业务服务" class="headerlink" title="业务服务"></a>业务服务</h2><p>在前一篇<a href="http://edisonxu.com/2017/04/01/axon-distribute.html" target="_blank" rel="noopener">CQRS和Event Souring系列（八）：DistributeCommand和DistributeEvent</a> 中提到过，DistributedCommandBus不会直接调用command handler，它只是在不同JVM的commandbus之间建立一个“桥梁”，通过指定<code>CommandRouter</code>和<code>CommandBusConnector</code>进行Command的分发。<code>axon-distributed-commandbus-springcloud</code>包提供了SpringCloud环境下的<code>CommandRouter</code>和<code>CommandBusConnector</code>。<br><strong><em>CommandRouter</em></strong><br><code>SpringCloudCommandRouter</code>是该包中<code>CommandRouter</code>的具体实现类，其实是调用了我们在SpringBootApplication中<code>@EnableDiscoveryClient</code>后注入的EurekaClient。<br>每一个Axon的command节点在启动时，会通过DiscoveryClient把本地所有的CommandHandler变向的塞入本地服务在Eureka上的metadata信息中。当DistributedCommandBus发送command时，通过DiscoveryClient从Eureka上获取所有节点信息后，找到metadata中的CommandHandler的信息进行command匹配，分发到匹配的节点去处理command。</p><p><strong><em>CommandBusConnector</em></strong><br><code>SpringHttpCommandBusConnector</code>是<code>CommandBusConnector</code>的具体实现类，它其实在本地起了一个地址为”/spring-command-bus-connector”的REST接口，用以接受来自其他节点的command请求。<br>同时，它也覆写了方法<code>CommandBusConnector</code>中的send方法，用以发送command到经<code>CommandRouter</code>确认的目标地址。当然，它会先判断目标地址是否本地，如果是本地，则直接调用localCommandBus去处理了，否则，则使用RestTemplate将Command发送到远程地址。</p><p>所以，启用Axon对SpringCloud的支持，必须要有三步（引入<code>axon-spring-boot-autoconfigure</code>的前提下）：</p><ol><li>引入<code>axon-distributed-commandbus-springcloud</code>包依赖；</li><li>配置文件中<code>axon.distributed.enabled</code>设置为true;</li><li>在自己的配置类中提供一个名字为<code>restTemplate</code>的Bean，返回一个RestTemplate的对象；</li></ol><p><strong>注意！</strong><br>目前不能在RestTemplate声明时加上@LoadBalance启用Ribbon做负载均衡，因为<code>SpringHttpCommandBusConnector</code>在发送远程command时，会根据Eureka返回的目标Server信息自己build URI，URI中直接使用了ip/hostname，而不是service name。一旦用@LoadBalance，那么请求将被拦截生成RibbonHttpRequest,该Request在执行时会把传入的URI当做service name去与DiscoveryClient取到的所有service的service name匹配，最终会找不到目标节点，而报java.lang.IllegalStateException: No instances available for 10.1.110.21 。 这里10.1.110.21即是前面<code>SpringHttpCommandBusConnector</code>自己从DiscoveryClient那已经解析出来的ip。</p><h3 id="Product-Serivce"><a href="#Product-Serivce" class="headerlink" title="Product Serivce"></a>Product Serivce</h3><p>核心代码与上一篇并无大区别，依然是CQRS，C端采用JPA将Event持久化到Mysql，而Q端将数据保存在MongoDB，方便查询（好吧，这仅仅是为了show一下怎么样在C、Q端使用不同的持久层而已，存Event的话，MongoDB比MySql适合的多）。这里只把不同地方中关键的列出来说一下，详细请查阅代码。<br><em><strong>pom依赖</strong></em><br>引入<code>axon-distributed-commandbus-springcloud</code>包依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.axonframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axon-distributed-commandbus-springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;axon.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>AMQPConfiguration</code><br>配置AMQP协议的mq绑定，用于把Event分发到mq中，最终由Order Service的OrderSaga去处理。Product Serivce本身不消费Order Service所产生的Event，本地的EventHandle并不会走MQ。详细配置这里就省略了，可以参见上一篇文章或者看具体代码。</p><p><code>CloudConfiguration</code><br>这个类啥都不干，只是创建一个restTemplate的实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"com.edi.learn.cloud.command"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="string">"com.edi.learn.cloud.query"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件的修改上面已经提过了，这里就不再重复。</p><h3 id="Order-Serivce"><a href="#Order-Serivce" class="headerlink" title="Order Serivce"></a>Order Serivce</h3><p>就启用SpringCloud来说，与上面没有任何区别。为了让OrderSaga能正常收到并处理来自于prodcut-service的事件，必须要进行额外配置。前一篇文章中提到的<code>@ProcessGroup</code>，并不适用于Saga，同时，Axon3中，目前对于Saga处理distributed event并不是很友好，3.0.4以前，Saga只能支持绑定一个EventStore，但是分布式情况下，一个service可能要监听多个queue，所以3.0.4中，支持了自定义Saga配置，即可以声明一个&lt;saga_name&gt;+SagaConfiguration作为Bean名，并返回SagaConfiguration类型的Bean。为了让Saga能处理来自于外部MQ的事件，我们必须提供一个orderSagaConfiguration。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringAMQPMessageSource <span class="title">queueMessageSource</span><span class="params">(Serializer serializer)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringAMQPMessageSource(serializer)&#123;</span><br><span class="line">        <span class="meta">@RabbitListener</span>(queues = <span class="string">"orderqueue"</span>)</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@Transactional</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            LOGGER.debug(<span class="string">"Message received: "</span>+message.toString());</span><br><span class="line">            <span class="keyword">super</span>.onMessage(message, channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SagaConfiguration&lt;OrderSaga&gt; <span class="title">orderSagaConfiguration</span><span class="params">(Serializer serializer)</span></span>&#123;</span><br><span class="line">    SagaConfiguration&lt;OrderSaga&gt; sagaConfiguration = SagaConfiguration.subscribingSagaManager(OrderSaga.class, c-&gt; queueMessageSource(serializer));</span><br><span class="line">    <span class="comment">//sagaConfiguration.registerHandlerInterceptor(c-&gt;transactionManagingInterceptor());</span></span><br><span class="line">    <span class="keyword">return</span> sagaConfiguration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionManagingInterceptor <span class="title">transactionManagingInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransactionManagingInterceptor(<span class="keyword">new</span> SpringTransactionManager(transactionManager));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上面代码，自行指定Saga的message source，这样来自于product-service写入mq的ProductReservedEvent等事件就能被Saga正确处理。<br>这里要注意的是事务问题，由于我们是通过MQ的onMessage来启动具体的SagaCommandHandler，上下文中并未定义事务特性，但是由于我们引入了Spring的jpa包，axon3的auto configuration会自动启用SagaJpaRepository，也就是说，onMessage方法线程执行时，会牵扯到DB的更新，必须得给它指定一个transaction manager。这里有两种方法：</p><ol><li>使用@Transactional 注解，让Spring自行配置；</li><li>在SagaConfiguration中注册TransactionManagingInterceptor。</li></ol><p>另外，由于在创建订单时，只传了Product的Id，根据id去查询当前product的最新详情，需要请求Product Service的query端。这个query端我们是用<code>spring-boot-starter-data-rest</code>直接暴露出去的<a href="https://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener">HATEOAS</a>(Hypermedia as the Engine of Application State)风格的RESTFul接口。即是说，要做一个跨服务的REST请求，且要支持HATEOAS，那么我们就使用<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">Feign</a>加上<code>spring-boot-starter-hateoas</code>。</p><ol><li><p>更新pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-hateoas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在order-service中添加一个Feign Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"product-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/products"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">Resources&lt;ProductDto&gt; <span class="title">getProducts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/products/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">ProductDto <span class="title">getProduct</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String productId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在SpringBootApplication中启用FeignClient和HypermediaSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"com.edi.learn.cloud.command"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="string">"com.edi.learn.cloud.query"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableFeignClients</span>(basePackages = &#123;<span class="string">"com.edi.learn.cloud.common.web"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableHypermediaSupport</span>(type = EnableHypermediaSupport.HypermediaType.HAL)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>ProductDto都是封装属性的POJO，就不写了。这样我们就可以在代码中直接注入ProductService，并调用相应方法从product-service端取数据了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，Axon3与SpringCloud的集成已完毕。Axon3使用SpringCloud提供的服务注册和发现机制，来进行Command的分发和处理。具体运行情况我就不写了，大家可自行修改order-service的配置，去跑多个order-service。留个悬念，由于是同一段代码和配置，mq我们使用fanout，即分发的模式，所有节点都会收到ProductReservedEvent，是否所有节点都会处理呢？</p><h6 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h6><p>截止到本篇，Axon3使用的大部分功能都已经做了入门介绍，并写了例子，作为研究，算是入门了,尤其是文档中没有说明的一些关键地方，我都在文中提了出来。掉过不少坑，看了很多源码， 回头看来，我对Axon3的设计是肯定与失望并存。<br>肯定的是Axon3的易用性与性能，尤其是DisruptorCommandBus配合CachingGenericEventSourcingRepository（采用了LMAX的<a href="https://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">Disruptor框架</a>，可以看下一篇比较早的文章介绍，猛击<a href="http://blog.trifork.com/2011/07/20/processing-1m-tps-with-axon-framework-and-the-disruptor/" target="_blank" rel="noopener">这里</a>或<a href="http://ifeve.com/axon/" target="_blank" rel="noopener">中文翻译版</a>）;<br>失望的是Axon3更多的优化和针对都集中在单体应用上，对分布式和微服务的集成稍显简单，例如负载均衡的支持、容错性的支持等，目前尚未看到介绍。<br>当然，这块现在也才刚刚起步，后续应该会变得越来越好。原期望于Axon3直接把这块做掉或者提供支持，现在看来是否我想太多，这块本就不该它做呢？欢迎加群57241527讨论。</p><p>照例，本文源码：<a href="https://github.com/EdisonXu/sbs-axon/tree/master/lesson-7" target="_blank" rel="noopener">https://github.com/EdisonXu/sbs-axon/tree/master/lesson-7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上一篇里，我们在利用Axon3的DistributeCommand的JGroup支持，和DistributedEvent对AMQP的支持，实现了分布式环境下的CQRS和EventSourcing。&lt;br&gt;在这一篇中，我们将把Axon3与当下比较火热的微服务框架——SpringCloud进行整合，并将其微服务化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h6&gt;&lt;p&gt;AxonFramework对SpringCloud的支持，是从3.0.2才开始的，但是在3.0.2和3.0.3两个版本，均存在blocking bug，&lt;strong&gt;所以要想与SpringCloud完成整合，版本必须大于等于3.0.4&lt;/strong&gt;。&lt;br&gt;PS：连续跳坑，debug读代码，帮Axon找BUG，血泪换来的结论……好在社区足够活跃，作者也比较给力，连续更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(七)：DistributeCommand和DistributeEvent</title>
    <link href="http://edisonxu.org/2017/04/01/axon-distribute.html"/>
    <id>http://edisonxu.org/2017/04/01/axon-distribute.html</id>
    <published>2017-04-01T07:01:51.000Z</published>
    <updated>2018-10-30T01:57:01.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇我们才算真正实现了一个基于Axon3的例子，本篇我们来尝试实现在分布式环境下利用Axon3做CQRS，即把CommandSide和QuerySide变成两个独立应用，分别可以启多份实例。</p></blockquote><p>首先，我们回顾一下CQRS&amp;EventSourcing模式下，整个架构的关键点，或者说最大的特点：</p><ul><li>CommandSide和QuerySide的持久层分离；</li><li>保存对Aggregate状态造成变化的Event，而不是状态本身；</li><li>Aggregate的状态全局原子化操作；</li><li>适用于读大于写的场景；<br>我们前面的例子，是在一个应用里面实现了CQRS模式，而在分布式场景下，有如下要求：</li><li>CommandSide和QuerySide可以不在同一个节点(甚至不在同一个应用)下；</li><li>CommandSide不同的CommandHandler、EventHandler可以不在同一个节点；</li><li>不同CommandSide对同一个Aggregate的操作应具有原子性；<br>我们来一步步满足这三个要求。</li></ul><h2 id="拆分CommandSide和QuerySide"><a href="#拆分CommandSide和QuerySide" class="headerlink" title="拆分CommandSide和QuerySide"></a>拆分CommandSide和QuerySide</h2><p>这个其实比较好解决，直接把两者分别用两个SpringBoot来承载就好了，只需要引入一个MQ，传递从CommandSide到QuerySide的事件就好了。<br>Axon提供了对AMQP协议的MQ的支持，我们可以直接拿来用。当然，你也可以用Kafka等其他MQ，只是需要自己实现了。<br>具体关于Axon对AMQP的支持，在后面会详述。</p><h2 id="实现CommandHandler的分布式调用"><a href="#实现CommandHandler的分布式调用" class="headerlink" title="实现CommandHandler的分布式调用"></a>实现CommandHandler的分布式调用</h2><p>前文中提到过，Axon提供的四种CommandBus的实现中，有一个<code>DistributedCommandBus</code>，<code>DistributedCommandBus</code>不会直接调用command handler，它只是在不同JVM的commandbus之间建立一个“桥梁”。每个JVM上的<code>DistributedCommandBus</code>被称为“Segment”。<br><img src="/images/2017/03/distributed-command-bus.png" alt=""><br><code>DistributedCommandBus</code>要求提供两个参数:</p><ol><li><code>CommandRouter</code>提供路由表，指明应当把Command发到哪里。<code>CommandRouter</code>的实现必须提供Routing Strategy，以此来计算Routing Key。Axon提供了两种Routing Strategy：<ul><li>MetaDataRoutingStrategy 使用CommandMessage中的MetaData的property来找到路由key</li><li>AnnotationRoutingStrategy（默认） 使用Command中@TargetIdentifier标识的field做路由key<br><strong>所以，当使用<code>DistributeCommandBus</code>时，如果使用默认的Routing Strategy，一定要在Command中提供@TargetIdentifier</strong></li></ul></li><li><code>CommandBusConnector</code>管理链接，提供发送、订阅方法<br>Axon目前提供了两种Connector的实现：JGroupsConnector和SpringCloudConnector。本文将使用JGroup，后者将放到后一篇与SpringCloud集成一文中使用。<br>起用JGroupsConnector很简单，只需要确保如下两个依赖存在：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.axonframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axon-spring-boot-starter-jgroups<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;axon.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.axonframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axon-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;axon.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>axon-spring-boot-autoconfigure提供了自动配置，在<code>AxonAutoConfiguration</code>类中，可以发现有如下源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>(name = &#123;<span class="string">"org.axonframework.jgroups.commandhandling.JGroupsConnector"</span>, <span class="string">"org.jgroups.JChannel"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(JGroupsConfiguration.JGroupsProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(<span class="string">"axon.distributed.jgroups.enabled"</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(JpaConfiguration.class)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JGroupsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JGroupsConfiguration.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JGroupsProperties jGroupsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(<span class="string">"axon.distributed.jgroups.gossip.autoStart"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"stop"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> GossipRouter <span class="title">gossipRouter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Matcher matcher =</span><br><span class="line">                Pattern.compile(<span class="string">"([^[\\[]]*)\\[(\\d*)\\]"</span>).matcher(jGroupsProperties.getGossip().getHosts());</span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line"></span><br><span class="line">            GossipRouter gossipRouter = <span class="keyword">new</span> GossipRouter(matcher.group(<span class="number">1</span>), Integer.parseInt(matcher.group(<span class="number">2</span>)));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                gossipRouter.start();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Unable to autostart start embedded Gossip server: &#123;&#125;"</span>, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> gossipRouter;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(<span class="string">"Wrong hosts pattern, cannot start embedded Gossip Router: "</span> +</span><br><span class="line">                                 jGroupsProperties.getGossip().getHosts());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DistributedCommandBus <span class="title">distributedCommandBus</span><span class="params">(CommandRouter router, CommandBusConnector connector)</span> </span>&#123;</span><br><span class="line">        DistributedCommandBus commandBus = <span class="keyword">new</span> DistributedCommandBus(router, connector);</span><br><span class="line">        commandBus.updateLoadFactor(jGroupsProperties.getLoadFactor());</span><br><span class="line">        <span class="keyword">return</span> commandBus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;CommandRouter.class, CommandBusConnector.class&#125;)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JGroupsConnectorFactoryBean <span class="title">jgroupsConnectorFactoryBean</span><span class="params">(Serializer serializer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                   @Qualifier(<span class="string">"localSegment"</span>)</span> CommandBus</span></span><br><span class="line"><span class="function">                                                                           localSegment) </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.setProperty(<span class="string">"jgroups.tunnel.gossip_router_hosts"</span>, jGroupsProperties.getGossip().getHosts());</span><br><span class="line">        System.setProperty(<span class="string">"jgroups.bind_addr"</span>, String.valueOf(jGroupsProperties.getBindAddr()));</span><br><span class="line">        System.setProperty(<span class="string">"jgroups.bind_port"</span>, String.valueOf(jGroupsProperties.getBindPort()));</span><br><span class="line"></span><br><span class="line">        JGroupsConnectorFactoryBean jGroupsConnectorFactoryBean = <span class="keyword">new</span> JGroupsConnectorFactoryBean();</span><br><span class="line">        jGroupsConnectorFactoryBean.setClusterName(jGroupsProperties.getClusterName());</span><br><span class="line">        jGroupsConnectorFactoryBean.setLocalSegment(localSegment);</span><br><span class="line">        jGroupsConnectorFactoryBean.setSerializer(serializer);</span><br><span class="line">        jGroupsConnectorFactoryBean.setConfiguration(jGroupsProperties.getConfigurationFile());</span><br><span class="line">        <span class="keyword">return</span> jGroupsConnectorFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"axon.distributed.jgroups"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JGroupsProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Gossip gossip;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Enables JGroups configuration for this application</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enabled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The name of the JGroups cluster to connect to. Defaults to "Axon".</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String clusterName = <span class="string">"Axon"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The JGroups configuration file to use. Defaults to a TCP Gossip based configuration</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String configurationFile = <span class="string">"default_tcp_gossip.xml"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The address of the network interface to bind JGroups to. Defaults to a global IP address of this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String bindAddr = <span class="string">"GLOBAL"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Sets the initial port to bind the JGroups connection to. If this port is taken, JGroups will find the</span></span><br><span class="line"><span class="comment">         * next available port.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String bindPort = <span class="string">"7800"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Sets the loadFactor for this node to join with. The loadFactor sets the relative load this node will</span></span><br><span class="line"><span class="comment">         * receive compared to other nodes in the cluster. Defaults to 100.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> loadFactor = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Gossip <span class="title">getGossip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> gossip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGossip</span><span class="params">(Gossip gossip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.gossip = gossip;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> enabled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getClusterName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> clusterName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClusterName</span><span class="params">(String clusterName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clusterName = clusterName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getConfigurationFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> configurationFile;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurationFile</span><span class="params">(String configurationFile)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.configurationFile = configurationFile;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getBindAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> bindAddr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBindAddr</span><span class="params">(String bindAddr)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bindAddr = bindAddr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getBindPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> bindPort;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBindPort</span><span class="params">(String bindPort)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bindPort = bindPort;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> loadFactor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadFactor</span><span class="params">(<span class="keyword">int</span> loadFactor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Gossip</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Whether to automatically attempt to start a Gossip Routers. The host and port of the Gossip server</span></span><br><span class="line"><span class="comment">             * are taken from the first define host in 'hosts'.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">boolean</span> autoStart = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Defines the hosts of the Gossip Routers to connect to, in the form of host[port],...</span></span><br><span class="line"><span class="comment">             * &lt;p&gt;</span></span><br><span class="line"><span class="comment">             * If autoStart is set to &#123;<span class="doctag">@code</span> true&#125;, the first host and port are used as bind address and bind port</span></span><br><span class="line"><span class="comment">             * of the Gossip server to start.</span></span><br><span class="line"><span class="comment">             * &lt;p&gt;</span></span><br><span class="line"><span class="comment">             * Defaults to localhost[12001].</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">private</span> String hosts = <span class="string">"localhost[12001]"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAutoStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> autoStart;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutoStart</span><span class="params">(<span class="keyword">boolean</span> autoStart)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.autoStart = autoStart;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getHosts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hosts;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHosts</span><span class="params">(String hosts)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.hosts = hosts;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到我们只需在application.properties中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axon.distributed.jgroups.enabled=true</span><br><span class="line">axon.distributed.jgroups.gossip.autoStart=true</span><br></pre></td></tr></table></figure></p><p>就可以启用JGroupsConnector。同时也可以用前缀axon.distributed.jgroups加上<code>JGroupsProperties</code>里定义的各种field名来做JGroup的配置。（默认连接本地7800端口）<br>这里值得注意的是：</p><ol><li><code>JGroupsConnectorFactoryBean</code>实现的方法中，有一段<em>System.setProperty(“jgroups.tunnel.gossiprouterhosts”, jGroupsProperties.getGossip().getHosts());</em> ，如果axon.distributed.jgroups.gossip.autoStart未设为true(默认false)，那么getGossip()显然将会报空指针异常。</li><li><code>JacksonSerializer</code>的实现中，并未去考虑Jackson对Exception的处理(<strong>objectMapper.configure( DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)</strong>)，导致一旦在Command执行时发生异常，DistributeCommandBus也会尝试把这个Exception消息进行序列化，而Jackson默认是无法处理java.lang.Throwable类的，就会发生序列化错误<em>org.codehaus.jackson.map.exc.UnrecognizedPropertyException: Unrecognized field “cause” (Class java.lang.Throwable), not marked as ignorable</em>，从而导致把真正的Exception给掩埋掉了。所以，这里我就改回默认的XStreamSerializer。</li><li>默认情况下，<code>localSegment</code>是SimpleCommandBus，所以参考前文，可以使用sendAndWait把异常抛到最前端处理，或者用send(command, callback)传入一个callback，在callback的onFailure方法对Throwable进行处理。</li></ol><h2 id="实现EventHandler的分布式调用"><a href="#实现EventHandler的分布式调用" class="headerlink" title="实现EventHandler的分布式调用"></a>实现EventHandler的分布式调用</h2><p>通常情况下，Event的分发我们第一时间想到的就是MQ，Axon也不例外，提供了对<a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol" target="_blank" rel="noopener">AMQP</a>(Advanced Message Queuing Protocol)的支持，例如Rabbit MQ。<br>引入如下Maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.axonframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axon-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.axonframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axon-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>spring-boot-starter-amqp提供具体AMQP实现的服务，axon-amqp提供具体的Event分发机制实现，axon-spring-boot-autoconfigure提供AMQP的自动配置。<br>AxonAutoConfiguration中，关于AMQP部分的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;SpringAMQPPublisher.class, ConnectionFactory.class&#125;)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(AMQPProperties.class)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AMQPConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AMQPProperties amqpProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RoutingKeyResolver <span class="title">routingKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PackageRoutingKeyResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AMQPMessageConverter <span class="title">amqpMessageConverter</span><span class="params">(Serializer serializer, RoutingKeyResolver routingKeyResolver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAMQPMessageConverter(serializer, routingKeyResolver, amqpProperties.isDurableMessages());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(<span class="string">"axon.amqp.exchange"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"start"</span>, destroyMethod = <span class="string">"shutDown"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringAMQPPublisher <span class="title">amqpBridge</span><span class="params">(EventBus eventBus, ConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          AMQPMessageConverter amqpMessageConverter)</span> </span>&#123;</span><br><span class="line">        SpringAMQPPublisher publisher = <span class="keyword">new</span> SpringAMQPPublisher(eventBus);</span><br><span class="line">        publisher.setExchangeName(amqpProperties.getExchange());</span><br><span class="line">        publisher.setConnectionFactory(connectionFactory);</span><br><span class="line">        publisher.setMessageConverter(amqpMessageConverter);</span><br><span class="line">        <span class="keyword">switch</span> (amqpProperties.getTransactionMode()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> TRANSACTIONAL:</span><br><span class="line">                publisher.setTransactional(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PUBLISHER_ACK:</span><br><span class="line">                publisher.setWaitForPublisherAck(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> NONE:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown transaction mode: "</span> + amqpProperties.getTransactionMode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> publisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，只要引入了Spring关于AMQP的starter包，我们只需要在application.properties中用<code>axon.amqp.exchange=Axon.EventBus</code>指明AMQP的exchange名字就可以启用了，非常方便。<br>另外就是需要给spring-boot-starter-amqp提供amqp具体实现的配置，这里我们以<a href="https://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMq</a>为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mq</span><br><span class="line">spring.rabbitmq.host=10.1.110.21</span><br><span class="line">spring.rabbitmq.port=5672</span><br><span class="line">spring.rabbitmq.username=axon</span><br><span class="line">spring.rabbitmq.password=axon</span><br><span class="line">axon.amqp.exchange=Axon.EventBus</span><br></pre></td></tr></table></figure></p><p>RabbitMqServer的搭建我这里就不叙述了，网上一搜一大把。但为了方便理解，我还是简单介绍下AMQP和RabbitMq的一些关键要素。<br>首先看一下AMQP的”生产/消费”模型图<br><img src="/images/2017/04/producer_consumer.png" alt=""><br>我们关注里面的三个核心概念</p><ul><li><code>Exchange</code>: 交换器，message到达broker的第一站，根据分发策略，匹配查询表中的routing key，分发消息到queue中去。</li><li><code>Queue</code>：消息最终被送到这里等待consumer取走。一个message可以被同时拷贝到多个queue中。</li><li><code>Binding</code>：Exchange与Queue之间的绑定关系，指定了绑定策略，即消息的分发策略。<br>分发策略有以下四种：</li><li><code>direct</code><br><img src="/images/2017/04/direct_exchange.png" alt=""><br>“先匹配, 再投送”. 即在绑定时设定一个<code>routing_key</code>, 消息的<code>routing_key</code>匹配时, 才会被交换器投送到绑定的队列中去.</li><li><code>fanout</code><br><img src="/images/2017/04/fanout_exchange.png" alt=""><br>把消息转发给所有绑定的队列上, 就是一个”广播”行为.</li><li><code>topic</code><br><img src="/images/2017/04/topic_exchange.png" alt=""><br>与direct类似，只是绑定的<code>routing_key</code>支持匹配规则（并不是正则！），会把消息自己的<code>routing_key</code>与绑定的<code>routing_key</code>进行匹配操作，只把匹配成功的发到对应queue中。<br>这里有个“坑”，rabbit提供的*绑定一个任意字母，#绑定0个或多个字母匹配规则中，#并不能直接使用，比如#test#就无法匹配aatest33，必须要#.test.#才起作用，匹配aa.test.33，也是醉了。所以Axon默认提供的RoutingKey生成就是根据包名来匹配……</li><li><code>headers</code><br>不使用<code>routing_key</code>，而使用<code>headers</code>来做匹配。</li></ul><p>那么我们来对AMQP在代码中做exchange和queue的绑定，以及对event的listen动作。<br><code>AMQPConfiguration</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AMQPConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;axon.amqp.exchange&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String exchangeName;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">productQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"product"</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">orderQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"order"</span>,<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Exchange <span class="title">exchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ExchangeBuilder.topicExchange(exchangeName).durable(<span class="keyword">true</span>).build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Binding <span class="title">productQueueBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BindingBuilder.bind(productQueue()).to(exchange()).with(<span class="string">"#.product.#"</span>).noargs();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Binding <span class="title">orderQueueBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BindingBuilder.bind(orderQueue()).to(exchange()).with(<span class="string">"#.order.#"</span>).noargs();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">  public SpringAMQPMessageSource productQueueMessageSource(Serializer serializer)&#123;</span></span><br><span class="line"><span class="comment">      return new SpringAMQPMessageSource(serializer)&#123;</span></span><br><span class="line"><span class="comment">          @RabbitListener(queues = "product")</span></span><br><span class="line"><span class="comment">          @Override</span></span><br><span class="line"><span class="comment">          public void onMessage(Message message, Channel channel) throws Exception &#123;</span></span><br><span class="line"><span class="comment">              LOGGER.debug("Product message received: "+message.toString());</span></span><br><span class="line"><span class="comment">              super.onMessage(message, channel);</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">      &#125;;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  @Bean</span></span><br><span class="line"><span class="comment">  public SpringAMQPMessageSource orderQueueMessageSource(Serializer serializer)&#123;</span></span><br><span class="line"><span class="comment">      return new SpringAMQPMessageSource(serializer)&#123;</span></span><br><span class="line"><span class="comment">          @RabbitListener(queues = "order")</span></span><br><span class="line"><span class="comment">          @Override</span></span><br><span class="line"><span class="comment">          public void onMessage(Message message, Channel channel) throws Exception &#123;</span></span><br><span class="line"><span class="comment">              LOGGER.debug("Order message received: "+message.toString());</span></span><br><span class="line"><span class="comment">              super.onMessage(message, channel);</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">      &#125;;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，由于本例中，我并没有把Product和Order相关的Service拆分成两个应用，仍然在一个CommandSide中，所以其实我们根本用不到分布式EventHandler，local可以完成的操作，放到其他node去做，反而降低了性能。<br>所以，我这里并没有在CommandSide的这个<code>AMQPConfiguration</code>中去配置监听queue。这里的队列其实是CommandSide和QuerySide之间用的。<br>但配置和原理都是一样的，如果把Product和Order分开，<code>ProductReservedEvent</code>在ProductServcices所在节点扔到队列后，可按需配置绑定，让OrderService能够取到该事件，交给Saga中的EventHandler去处理。<br>在后面与SpringCloud集成的一文中，就会这样做。<br>QuerySide的<code>AMQPConfiguration</code>与上面一致，但是要打开被注释掉的部分。因为exchange和queue是自动创建的，有可能QuerySide先启动，所以必须要在QuerySide也加上exchange和queue的定义及绑定策略。<br><code>@RabbitListener(queues = &quot;product&quot;)</code>用来指定当前AMQPMessageSource要监听哪个queue。<br>同时，还需要修改application.properties，来绑定AMQPMessageSource和具体的EventHandler注册类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axon.eventhandling.processors.product.source=productQueueMessageSource</span><br><span class="line">axon.eventhandling.processors.order.source=orderQueueMessageSource</span><br></pre></td></tr></table></figure></p><p>axon.eventhandling.processors.[processors_group_name].source中，前面axon.eventhandling.processors.[processors_group_name]其实是一个ProcessingGroup，Axon提供了注解@ProcessingGroup(“[processors_group_name]”)来进行标识。<br>所以我们需要在QuerySide的<code>ProductEventHandler</code>和<code>OrderEventHandler</code>上面增加该注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ProcessingGroup</span>(<span class="string">"order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEventHandler</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ProcessingGroup</span>(<span class="string">"product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEventHandler</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为方便测试，我们来增加一个对Product库存进行调整的接口，这样可以启动两个CommandSide，同时对库存进行调整，看看会不会有并发问题。<br>同样，先定义Commmand和对应的Event：<br>ChangeStockCommand(productId, number)<br>IncreaseStockCommand extends ChangeStockCommand<br>DecreaseStockCommand extends ChangeStockCommand<br>IncreaseStockEvent(productId, number)<br>DecreaseStockEvent(productId, number)</p><p>修改<code>ProductAggregate</code>，增加对应的CommandHandler和EventHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aggregate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAggregate</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CommandHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(IncreaseStockCommand command)</span> </span>&#123;</span><br><span class="line">      apply(<span class="keyword">new</span> IncreaseStockEvent(command.getId(),command.getNumber()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CommandHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(DecreaseStockCommand command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stock&gt;=command.getNumber())</span><br><span class="line">          apply(<span class="keyword">new</span> DecreaseStockEvent(command.getId(),command.getNumber()));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> NoEnoughStockException(<span class="string">"No enough items"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(IncreaseStockEvent event)</span></span>&#123;</span><br><span class="line">      stock = stock + event.getNumber();</span><br><span class="line">      LOGGER.info(<span class="string">"Product &#123;&#125; stock increase &#123;&#125;, current value: &#123;&#125;"</span>, id, event.getNumber(), stock);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(DecreaseStockEvent event)</span></span>&#123;</span><br><span class="line">      stock = stock - event.getNumber();</span><br><span class="line">      LOGGER.info(<span class="string">"Product &#123;&#125; stock decrease &#123;&#125;, current value: &#123;&#125;"</span>, id, event.getNumber(), stock);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后对外增加一个REST接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> String id,</span></span><br><span class="line"><span class="function">                     @<span class="title">RequestBody</span><span class="params">(required = <span class="keyword">true</span>)</span> JSONObject input,</span></span><br><span class="line"><span class="function">                     HttpServletResponse response)</span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> isIncrement = input.getBooleanValue(<span class="string">"incremental"</span>);</span><br><span class="line">      <span class="keyword">int</span> number = input.getIntValue(<span class="string">"number"</span>);</span><br><span class="line">      ChangeStockCommand command = isIncrement? <span class="keyword">new</span> IncreaseStockCommand(id, number) : <span class="keyword">new</span> DecreaseStockCommand(id, number);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// multiply 100 on the price to avoid float number</span></span><br><span class="line">          <span class="comment">//commandGateway.send(command, LoggingCallback.INSTANCE);</span></span><br><span class="line">          commandGateway.sendAndWait(command);</span><br><span class="line">          response.setStatus(HttpServletResponse.SC_OK);<span class="comment">// Set up the 201 CREATED response</span></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CommandExecutionException cex) &#123;</span><br><span class="line">          LOGGER.warn(<span class="string">"Add Command FAILED with Message: &#123;&#125;"</span>, cex.getMessage());</span><br><span class="line">          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != cex.getCause()) &#123;</span><br><span class="line">              LOGGER.warn(<span class="string">"Caused by: &#123;&#125; &#123;&#125;"</span>, cex.getCause().getClass().getName(), cex.getCause().getMessage());</span><br><span class="line">              <span class="keyword">if</span> (cex.getCause() <span class="keyword">instanceof</span> ConcurrencyException) &#123;</span><br><span class="line">                  LOGGER.warn(<span class="string">"Concurrent issue happens for product &#123;&#125;"</span>, id);</span><br><span class="line">                  response.setStatus(HttpServletResponse.SC_CONFLICT);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="comment">// should not happen</span></span><br><span class="line">          LOGGER.error(<span class="string">"Unexpected exception is thrown"</span>, e);</span><br><span class="line">          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我用了sendAndWait，把Exception一路抛上来在Controller捕获。你也可以用我注掉的那段send(command,callback)，传入一个callback，在callback的onFailure方法去处理。<br>同样，QuerySide要对这两个事件进行处理<br><code>ProductEventHandler</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>好，最后我们把CommandSide的server.port配成0（随机端口），启动两个CommandSide(假定一个端口为&lt;first_port&gt;，一个为&lt;second_port&gt;)和一个QuerySide。</p><ol><li>POST请求到<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>:&lt;first_port&gt;/product/1?name=ttt&amp;price=10&amp;stock=100 创建商品；</li><li>POST请求到<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>:&lt;second_port&gt;/product/1?name=ttt&amp;price=10&amp;stock=100 会发现报错，商品已存在；</li><li>GET请求到<a href="http://127.0.0.1:8080/product/1" target="_blank" rel="noopener">http://127.0.0.1:8080/product/1</a> 在QuerySide查看商品是否创建成功；</li><li><p>PUT如下json到<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>:&lt;first_port&gt;/product/1 来增加库存；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"incremental"</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">"number"</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PUT如下json到<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>:&lt;second_port&gt;/product/1 来减少库存；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"incremental"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">"number"</span>:<span class="number">101</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重置MongoDB的库，同时发送3、4，看看结果。<br>其实我们如果去MongoDB的Events里面查看，数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.events.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"_id"</span> : ObjectId(<span class="string">"58ec4ef673bc0c1c188117b9"</span>),</span><br><span class="line">        <span class="attr">"aggregateIdentifier"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"ProductAggregate"</span>,</span><br><span class="line">        <span class="attr">"sequenceNumber"</span> : NumberLong(<span class="number">0</span>),</span><br><span class="line">        <span class="attr">"serializedPayload"</span> : <span class="string">"&lt;com.edi.learn.axon.events.product.ProductCreatedEvent&gt;&lt;id&gt;1&lt;/id&gt;&lt;name&gt;ttt&lt;/name&gt;&lt;price&gt;1000&lt;/price&gt;&lt;stock&gt;100&lt;/stock&gt;&lt;/com.edi.learn.axon.events.product.ProductCreatedEvent&gt;"</span>,</span><br><span class="line">        <span class="attr">"timestamp"</span> : <span class="string">"2017-04-11T03:35:18.310Z"</span>,</span><br><span class="line">        <span class="attr">"payloadType"</span> : <span class="string">"com.edi.learn.axon.events.product.ProductCreatedEvent"</span>,</span><br><span class="line">        <span class="attr">"payloadRevision"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"serializedMetaData"</span> : <span class="string">"&lt;meta-data&gt;&lt;entry&gt;&lt;string&gt;traceId&lt;/string&gt;&lt;string&gt;af292c24-bde4-4ba1-a190-9743822f839c&lt;/string&gt;&lt;/entry&gt;&lt;entry&gt;&lt;string&gt;correlationId&lt;/string&gt;&lt;string&gt;af292c24-bde4-4ba1-a190-9743822f839c&lt;/string&gt;&lt;/entry&gt;&lt;/meta-data&gt;"</span>,</span><br><span class="line">        <span class="attr">"eventIdentifier"</span> : <span class="string">"ed244ef3-a1fe-48fb-99b8-39ebd2444cc1"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"_id"</span> : ObjectId(<span class="string">"58ec4f0273bc0c1c188117ba"</span>),</span><br><span class="line">        <span class="attr">"aggregateIdentifier"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"ProductAggregate"</span>,</span><br><span class="line">        <span class="attr">"sequenceNumber"</span> : NumberLong(<span class="number">1</span>),</span><br><span class="line">        <span class="attr">"serializedPayload"</span> : <span class="string">"&lt;com.edi.learn.axon.events.product.IncreaseStockEvent&gt;&lt;id&gt;1&lt;/id&gt;&lt;number&gt;10&lt;/number&gt;&lt;/com.edi.learn.axon.events.product.IncreaseStockEvent&gt;"</span>,</span><br><span class="line">        <span class="attr">"timestamp"</span> : <span class="string">"2017-04-11T03:35:30.728Z"</span>,</span><br><span class="line">        <span class="attr">"payloadType"</span> : <span class="string">"com.edi.learn.axon.events.product.IncreaseStockEvent"</span>,</span><br><span class="line">        <span class="attr">"payloadRevision"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"serializedMetaData"</span> : <span class="string">"&lt;meta-data&gt;&lt;entry&gt;&lt;string&gt;traceId&lt;/string&gt;&lt;string&gt;05252e0c-eb0b-4ed0-945c-0134fa94b6ba&lt;/string&gt;&lt;/entry&gt;&lt;entry&gt;&lt;string&gt;correlationId&lt;/string&gt;&lt;string&gt;05252e0c-eb0b-4ed0-945c-0134fa94b6ba&lt;/string&gt;&lt;/entry&gt;&lt;/meta-data&gt;"</span>,</span><br><span class="line">        <span class="attr">"eventIdentifier"</span> : <span class="string">"f6b9786d-4abd-4407-a40b-880f88738b4b"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"_id"</span> : ObjectId(<span class="string">"58ec4f0d73bc0c1ad83281d6"</span>),</span><br><span class="line">        <span class="attr">"aggregateIdentifier"</span> : <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"type"</span> : <span class="string">"ProductAggregate"</span>,</span><br><span class="line">        <span class="attr">"sequenceNumber"</span> : NumberLong(<span class="number">2</span>),</span><br><span class="line">        <span class="attr">"serializedPayload"</span> : <span class="string">"&lt;com.edi.learn.axon.events.product.DecreaseStockEvent&gt;&lt;id&gt;1&lt;/id&gt;&lt;number&gt;101&lt;/number&gt;&lt;/com.edi.learn.axon.events.product.DecreaseStockEvent&gt;"</span>,</span><br><span class="line">        <span class="attr">"timestamp"</span> : <span class="string">"2017-04-11T03:35:41.474Z"</span>,</span><br><span class="line">        <span class="attr">"payloadType"</span> : <span class="string">"com.edi.learn.axon.events.product.DecreaseStockEvent"</span>,</span><br><span class="line">        <span class="attr">"payloadRevision"</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"serializedMetaData"</span> : <span class="string">"&lt;meta-data&gt;&lt;entry&gt;&lt;string&gt;traceId&lt;/string&gt;&lt;string&gt;cf21b4a8-dfae-4da8-a6e0-964876c101c3&lt;/string&gt;&lt;/entry&gt;&lt;entry&gt;&lt;string&gt;correlationId&lt;/string&gt;&lt;string&gt;cf21b4a8-dfae-4da8-a6e0-964876c101c3&lt;/string&gt;&lt;/entry&gt;&lt;/meta-data&gt;"</span>,</span><br><span class="line">        <span class="attr">"eventIdentifier"</span> : <span class="string">"ac9db091-73fd-4830-9ddb-85fea3a13206"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其实可以发现<code>sequenceNumber</code>一值是递增的，说明Event在分布式环境中也是严格按时间排序的。这样即便是在两个不同的CommandSide节点，当我们尝试去改变Aggregate的状态时，Axon会做ES来从Repository里获取当前Aggregate的最新状态，从而实现了原子性操作。</p><p>本文完整代码：<a href="https://github.com/EdisonXu/sbs-axon/tree/master/lesson-6" target="_blank" rel="noopener">https://github.com/EdisonXu/sbs-axon/tree/master/lesson-6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上一篇我们才算真正实现了一个基于Axon3的例子，本篇我们来尝试实现在分布式环境下利用Axon3做CQRS，即把CommandSide和QuerySide变成两个独立应用，分别可以启多份实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，我们回顾一下CQRS&amp;amp;EventSourcing模式下，整个架构的关键点，或者说最大的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CommandSide和QuerySide的持久层分离；&lt;/li&gt;
&lt;li&gt;保存对Aggregate状态造成变化的Event，而不是状态本身；&lt;/li&gt;
&lt;li&gt;Aggregate的状态全局原子化操作；&lt;/li&gt;
&lt;li&gt;适用于读大于写的场景；&lt;br&gt;我们前面的例子，是在一个应用里面实现了CQRS模式，而在分布式场景下，有如下要求：&lt;/li&gt;
&lt;li&gt;CommandSide和QuerySide可以不在同一个节点(甚至不在同一个应用)下；&lt;/li&gt;
&lt;li&gt;CommandSide不同的CommandHandler、EventHandler可以不在同一个节点；&lt;/li&gt;
&lt;li&gt;不同CommandSide对同一个Aggregate的操作应具有原子性；&lt;br&gt;我们来一步步满足这三个要求。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(六)：Saga的使用</title>
    <link href="http://edisonxu.org/2017/03/31/axon-saga.html"/>
    <id>http://edisonxu.org/2017/03/31/axon-saga.html</id>
    <published>2017-03-31T03:37:32.000Z</published>
    <updated>2018-10-30T01:56:51.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇里面，我们正式的使用了CQRS模式完成了AXON的第一个真正的例子，但是细心的朋友会发现一个问题，创建订单时并没有检查商品库存。<br>库存是否足够直接回导致订单状态的成功与否，在并发时可能还会出现超卖。当库存不足时还需要回滚订单，所以这里出现了复杂的跨Aggregate事务问题。<br>Saga就是为解决这里复杂流程而生的。</p></blockquote><h2 id="Saga"><a href="#Saga" class="headerlink" title="Saga"></a><strong>Saga</strong></h2><p><strong>Saga</strong> 这个名词最早是由Hector Garcia-Molina和Kenneth Salem写的<a href="http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf" target="_blank" rel="noopener">Sagas</a>这篇论文里提出来的，但其实Saga并不是什么新事物，在我们传统的系统设计中，它有个更熟悉的名字——“ProcessManager”，只是换了个马甲，还是干同样的事——组合一组逻辑处理复杂流程。<br>但它与我们平常理解的“ProgressManager”又有不同，它的提出，最早是是为了解决分布式系统中长时间运行事务(long-running business process)的问题，把单一的transaction按照步骤分成一组若干子transaction，通过补偿机制实现最终一致性。<br>举个例子，在一个交易环节中有下单支付两个步骤，如果是传统方式，两个步骤在一个事务里，统一成功或回滚，然而如果支付时间很长，那么就会导致第一步，即下单这里所占用的资源被长时间锁定，可能会对系统可用性造成影响。如果用Saga来实现，那么下单是一个独立事务，下单的事务先提交，提交成功后开始支付的事务，如果支付成功，则支付的事务也提交，整个流程就算完成，但是如果支付事务执行失败，那么支付需要回滚，因为这时下单事务已经提交，则需要对下单操作进行补偿操作（可能是回滚，也可能是变成新状态）。<br>可以看到Saga是牺牲了数据的强一致性，实现最终一致性。</p><blockquote><p>Saga的概念使得强一致性的分布式事务不再是唯一的解决方案，通过保证事务中每一步都可以一个补偿机制，在发生错误后执行补偿事务来保证系统的可用性和最终一致性。</p></blockquote><p>在CQRS中，我们尽量遵从“聚合尽量设计的小，且一次修改只修改一个聚合”的原则（与OO中高内聚，低耦合的原则相同），所以当我们需要完成一个复杂流程时，就可能涉及到对多个Aggregate状态的改变，我们就可以把整个过程管理统一放到Saga来定义。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>把我们的订单创建流程修改成以下：<br><img src="/images/2017/03/flowchart.png" alt=""></p><h2 id="创建Command和Event"><a href="#创建Command和Event" class="headerlink" title="创建Command和Event"></a>创建Command和Event</h2><p>在上一篇例子的基础上，创建如下Command和Event<br>-ReserveProductCommand (orderId, productId, number)<br>-RollbackReservationCommand (orderId, productId, number)<br>-ConfirmOrderCommand (orderId)<br>-RollbackOrderCommand (orderId)<br>-ProductReservedEvent (orderId, productId, number)<br>-ProductNotEnoughEvent (orderId, productId)<br>-OrderCancelledEvent (orderId)<br>-OrderConfirmedEvent (orderId)</p><p>都是POJO，这里我就不放代码了。具体可以去源代码看。</p><h2 id="创建Saga"><a href="#创建Saga" class="headerlink" title="创建Saga"></a>创建Saga</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Saga</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSaga</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(OrderSaga.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OrderId orderIdentifier;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, OrderProduct&gt; toReserve;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, OrderProduct&gt; toRollback;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toReserveNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> needRollback;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> CommandGateway commandGateway;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StartSaga</span></span><br><span class="line">    <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"orderId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderCreatedEvent event)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderIdentifier = event.getOrderId();</span><br><span class="line">        <span class="keyword">this</span>.toReserve = event.getProducts();</span><br><span class="line">        toRollback = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        toReserveNumber = toReserve.size();</span><br><span class="line">        event.getProducts().forEach((id,product)-&gt;&#123;</span><br><span class="line">            ReserveProductCommand command = <span class="keyword">new</span> ReserveProductCommand(orderIdentifier, id, product.getAmount());</span><br><span class="line">            commandGateway.send(command);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"orderId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ProductNotEnoughEvent event)</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"No enough item to buy"</span>);</span><br><span class="line">        toReserveNumber--;</span><br><span class="line">        needRollback=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(toReserveNumber==<span class="number">0</span>)</span><br><span class="line">            tryFinish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(needRollback)&#123;</span><br><span class="line">            toReserve.forEach((id, product)-&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span>(!product.isReserved())</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                toRollback.put(id, product);</span><br><span class="line">                commandGateway.send(<span class="keyword">new</span> RollbackReservationCommand(orderIdentifier, id, product.getAmount()));</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(toRollback.isEmpty())</span><br><span class="line">                commandGateway.send(<span class="keyword">new</span> RollbackOrderCommand(orderIdentifier));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        commandGateway.send(<span class="keyword">new</span> ConfirmOrderCommand(orderIdentifier));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"orderId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ReserveCancelledEvent event)</span></span>&#123;</span><br><span class="line">        toRollback.remove(event.getProductId());</span><br><span class="line">        <span class="keyword">if</span>(toRollback.isEmpty())</span><br><span class="line">            commandGateway.send(<span class="keyword">new</span> RollbackOrderCommand(event.getOrderId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"id"</span>, keyName = <span class="string">"orderId"</span>)</span><br><span class="line">    <span class="meta">@EndSaga</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderCancelledEvent event)</span> <span class="keyword">throws</span> OrderCreateFailedException </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Order &#123;&#125; is cancelled"</span>, event.getId());</span><br><span class="line">        <span class="comment">// throw exception here will not cause the onFailure() method in the command callback</span></span><br><span class="line">        <span class="comment">//throw new OrderCreateFailedException("Not enough product to reserve!");</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"orderId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ProductReservedEvent event)</span></span>&#123;</span><br><span class="line">        OrderProduct reservedProduct = toReserve.get(event.getProductId());</span><br><span class="line">        reservedProduct.setReserved(<span class="keyword">true</span>);</span><br><span class="line">        toReserveNumber--;</span><br><span class="line">        <span class="keyword">if</span>(toReserveNumber ==<span class="number">0</span>)</span><br><span class="line">            tryFinish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"id"</span>, keyName = <span class="string">"orderId"</span>)</span><br><span class="line">    <span class="meta">@EndSaga</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderConfirmedEvent event)</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"Order &#123;&#125; is confirmed"</span>, event.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Saga的启动和结束"><a href="#Saga的启动和结束" class="headerlink" title="Saga的启动和结束"></a>Saga的启动和结束</h3><p>Axon中通过<code>@Saga</code>注解标识Saga。Saga有起点和终点，必须以<code>@StartSaga</code>和<code>@EndSaga</code>区分清楚。一个Saga的起点可能只有一个，但终点可能有好几个，对应流程的不同结果。<br>默认情况下，只有在找不到同类型已存在的Saga instance时，才会创建一个新的Saga。但是可以通过更改<code>@StartSaga</code>中的<code>forceNew</code>为true让它每次都新建一个。<br>只有当<code>@EndSaga</code>对应的方法被顺利执行，Saga才会结束，但也可以直接从Saga内部调用<code>end()</code>方法强制结束。</p><h3 id="EventHandling"><a href="#EventHandling" class="headerlink" title="EventHandling"></a>EventHandling</h3><p>Saga通过<code>@SagaEventHandler</code>注解来标明EventHandler，与普通EventHandler基本一致，唯一的不同是，普通的EventHandler会接受所有对应的Event，而Saga的EventHandler只处理与其关联过的Event。<br>当被注解<code>@StartSaga</code>的方法调用时，axon默认会根据当前<code>@SagaEventHandler</code>中的<code>associationProperty</code>去找Event中的field，然后把它的值与当前Saga进行关联，类似<code>&lt;saga_id,&lt;key,value&gt;&gt;</code>这种形式。<br>一旦产生关联，该Saga在遇到同一Event时，只会处理<code>&lt;key,value&gt;</code>与已关联值完全一致的Event。例如，有两个<code>OrderCreatedEvent</code>，我们定义<code>associationProperty =&quot;orderId&quot;</code>，两个event的orderId分别为1、2，当Saga创建时接受了orderId=1的<code>OrderCreatedEvent</code>后，值为2的Event它就不再处理了。<br>也可以在Saga内直接调用<code>associateWith(String key, String/Number value)</code>来做这个关联。例如，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderManagementSaga</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> paid = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> delivered = <span class="keyword">false</span>;</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> CommandGateway commandGateway;</span><br><span class="line">  <span class="meta">@StartSaga</span></span><br><span class="line">  <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"orderId"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderCreatedEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// client generated identifiers</span></span><br><span class="line">    ShippingId shipmentId = createShipmentId();</span><br><span class="line">    InvoiceId invoiceId = createInvoiceId();</span><br><span class="line">    <span class="comment">// associate the Saga with these values, before sending the commands</span></span><br><span class="line">    associateWith(<span class="string">"shipmentId"</span>, shipmentId);</span><br><span class="line">    associateWith(<span class="string">"invoiceId"</span>, invoiceId);</span><br><span class="line">    <span class="comment">// send the commands</span></span><br><span class="line">    commandGateway.send(<span class="keyword">new</span> PrepareShippingCommand(...));</span><br><span class="line">    commandGateway.send(<span class="keyword">new</span> CreateInvoiceCommand(...));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"shipmentId"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ShippingArrivedEvent event)</span> </span>&#123;</span><br><span class="line">    delivered = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (paid) &#123; end(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"invoiceId"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(InvoicePaidEvent event)</span> </span>&#123;</span><br><span class="line">    paid = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (delivered) &#123; end(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有时我们可能并不想直接使用Event里field的名称作为<code>associationProperty</code>的值，可以使用keyName来对应field名称。<br>Saga是靠Event驱动的，但有时command发出去了，并没有在规定时间内收到预期的Event怎么办？Saga提供了<code>EventScheduler</code>，通过Java内置的scheduler或Quarz，定时自动发送一个Event到这个Saga。<br>Saga的执行是在独立的线程里，所以我们无法通过commandgateway的sendAndWait方法等到其返回值或捕获异常。</p><h3 id="Saga-Store"><a href="#Saga-Store" class="headerlink" title="Saga Store"></a>Saga Store</h3><p>由于Sage在处理过程中也存在中间状态，而Saga的一些业务流程可能会执行很长时间，比如好几天，那么万一系统重启Saga的状态就丢失了，所以Saga也需要能够通过ES恢复，即指定一个<code>SagaStore</code>。<br><code>SagaStore</code>与<code>EventStore</code>的使用除了名字外，基本没有任何区别，也内置了InMemory,JPA,jdbc,Mongo四种实现这里我就不多叙述了。</p><blockquote><p>注意！当持久化Saga时，对于注入的资源field，如CommandGateway，一定要加上<code>transient</code>修饰符，这样Serializer才不会去序列化这个field。当Saga从Repository读出来的时候，会自动注入相关的资源。</p></blockquote><p>只需要显示的提供一个<code>SagaStore</code>的配置就可以了。当启用JPA时，默认会启动<code>JpaSagaStore</code>。我们这里使用<code>MongoSagaStore</code>，修改<code>AxonConfiguration</code>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxonConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  .....</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SagaStore <span class="title">sagaStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">      org.axonframework.mongo.eventhandling.saga.repository.MongoTemplate mongoTemplate =</span><br><span class="line">              <span class="keyword">new</span> org.axonframework.mongo.eventhandling.saga.repository.DefaultMongoTemplate(mongoClient(), mongoDbName, <span class="string">"sagas"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MongoSagaStore(mongoTemplate, axonJsonSerializer());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>在@StartSaga执行后，会把当前Saga插入到指定的SagaStore中，当@EndSaga执行时，axon会自动的从SagaStore中删除该Saga。</strong></p><h2 id="修改Handler"><a href="#修改Handler" class="headerlink" title="修改Handler"></a>修改Handler</h2><p>由于<code>ReserveProductCommand</code>和<code>RollbackReservationCommand</code>是需要查找原ProductAggregate的，所以单独创建一个<code>ProductHandler</code><br><code>ProductHandler</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(ProductHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Repository&lt;ProductAggregate&gt; repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CommandHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(ReserveProductCommand command)</span></span>&#123;</span><br><span class="line">        Aggregate&lt;ProductAggregate&gt; aggregate = repository.load(command.getProductId());</span><br><span class="line">        aggregate.execute(aggregateRoot-&gt;aggregateRoot.reserve(command.getOrderId(), command.getNumber()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CommandHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(RollbackReservationCommand command)</span></span>&#123;</span><br><span class="line">        Aggregate&lt;ProductAggregate&gt; aggregate = repository.load(command.getProductId());</span><br><span class="line">        aggregate.execute(aggregateRoot-&gt;aggregateRoot.cancellReserve(command.getOrderId(), command.getNumber()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改ProductAggregate，增加对应的方法和handler<br><code>ProductAggregate</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aggregate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAggregate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(OrderId orderId, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stock&gt;=amount) &#123;</span><br><span class="line">        apply(<span class="keyword">new</span> ProductReservedEvent(orderId, id, amount));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        apply(<span class="keyword">new</span> ProductNotEnoughEvent(orderId, id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancellReserve</span><span class="params">(OrderId orderId, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">      apply(<span class="keyword">new</span> ReserveCancelledEvent(orderId, id, stock));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(ProductReservedEvent event)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> oriStock = stock;</span><br><span class="line">      stock = stock - event.getAmount();</span><br><span class="line">      LOGGER.info(<span class="string">"Product &#123;&#125; stock change &#123;&#125; -&gt; &#123;&#125;"</span>, id, oriStock, stock);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(ReserveCancelledEvent event)</span></span>&#123;</span><br><span class="line">      stock +=event.getAmount();</span><br><span class="line">      LOGGER.info(<span class="string">"Reservation rollback, product &#123;&#125; stock changed to &#123;&#125;"</span>, id, stock);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Order这边对应也要修改Aggregate和handler<br><code>OrderHandler</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandler</span> </span>&#123;</span><br><span class="line">  <span class="meta">@CommandHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(RollbackOrderCommand command)</span></span>&#123;</span><br><span class="line">      Aggregate&lt;OrderAggregate&gt; aggregate = repository.load(command.getOrderId().getIdentifier());</span><br><span class="line">      aggregate.execute(aggregateRoot-&gt;aggregateRoot.delete());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CommandHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(ConfirmOrderCommand command)</span></span>&#123;</span><br><span class="line">      Aggregate&lt;OrderAggregate&gt; aggregate = repository.load(command.getId().getIdentifier());</span><br><span class="line">      aggregate.execute(aggregateRoot-&gt;aggregateRoot.confirm());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>OrderAggregate</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aggregate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderAggregate</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String state=<span class="string">"processing"</span>; <span class="comment">// 增加一个属性订单状态</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(OrderConfirmedEvent event)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">"confirmed"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(OrderCancelledEvent event)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="string">"deleted"</span>;</span><br><span class="line">      markDeleted();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><p>其他地方基本没有什么改动，为方便起见，我把Query端也改成MongoDB了，方法比较简单，就引入<code>spring-boot-starter-data-mongodb</code>包，启动类里将<code>@EnableJpaRepositories</code>改成<code>@EnableMongoRepositories</code>，然后把Queyr端的Entry类包含在Scan的范围内就好了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>&#125;)</span><br><span class="line"><span class="meta">@EntityScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventsourcing.eventstore.jpa"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventhandling.saga.repository.jpa"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventhandling.tokenstore.jpa"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行后，</p><ol><li>POST请求到<a href="http://127.0.0.1:8080/product/1?name=ttt&amp;price=10&amp;stock=100" target="_blank" rel="noopener">http://127.0.0.1:8080/product/1?name=ttt&amp;price=10&amp;stock=100</a> 创建商品；</li><li><p>POST如下JSON到<a href="http://127.0.0.1:8080/order" target="_blank" rel="noopener">http://127.0.0.1:8080/order</a> 来创建订单</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"username"</span>:<span class="string">"Edison"</span>,</span><br><span class="line"><span class="attr">"products"</span>:[&#123;</span><br><span class="line"><span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">"number"</span>:<span class="number">90</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再创建一次<br>可以看到控制台打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">09:39:10.648 [http-nio-8080-exec-1] DEBUG c.e.l.a.c.w.c.ProductController - Adding Product [1] &apos;ttt&apos; 10x100</span><br><span class="line">09:39:10.675 [http-nio-8080-exec-1] DEBUG c.e.l.a.c.a.ProductAggregate - Product [1] ttt 1000x100 is created.</span><br><span class="line">09:39:10.853 [http-nio-8080-exec-1] DEBUG c.e.l.a.q.h.ProductEventHandler - repository data is updated</span><br><span class="line">09:39:21.640 [http-nio-8080-exec-3] DEBUG c.e.l.a.c.a.ProductAggregate - Product [1] ttt 1000x100 is created.</span><br><span class="line">09:39:21.681 [http-nio-8080-exec-3] INFO  c.e.l.a.c.a.ProductAggregate - Product 1 stock change 100 -&gt; 10</span><br><span class="line">09:39:21.823 [http-nio-8080-exec-3] INFO  c.e.l.axon.command.saga.OrderSaga - Order 8706dbaf-4511-4b01-b6c5-e24bec3f10a9 is confirmed</span><br><span class="line">09:42:35.255 [http-nio-8080-exec-5] DEBUG c.e.l.a.c.handlers.OrderHandler - Loading product information with productId: 1</span><br><span class="line">09:42:35.259 [http-nio-8080-exec-5] DEBUG c.e.l.a.c.a.ProductAggregate - Product [1] ttt 1000x100 is created.</span><br><span class="line">09:42:35.263 [http-nio-8080-exec-5] INFO  c.e.l.a.c.a.ProductAggregate - Product 1 stock change 100 -&gt; 10</span><br><span class="line">09:42:35.301 [http-nio-8080-exec-5] INFO  c.e.l.axon.command.saga.OrderSaga - No enough item to buy</span><br><span class="line">09:42:35.313 [http-nio-8080-exec-5] INFO  c.e.l.axon.command.saga.OrderSaga - Order 6baba5e9-1173-48a8-ab98-cd51691ba9f5 is cancelled</span><br></pre></td></tr></table></figure></li><li><p>重启程序，再创建一次订单后发送GET请求到<a href="http://127.0.0.1:8080/orders" target="_blank" rel="noopener">http://127.0.0.1:8080/orders</a> 查询订单</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_embedded"</span>: &#123;</span><br><span class="line">    <span class="attr">"orders"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"Edison"</span>,</span><br><span class="line">        <span class="attr">"payment"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="string">"confirmed"</span>,</span><br><span class="line">        <span class="attr">"products"</span>: &#123;</span><br><span class="line">          <span class="attr">"1"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"ttt"</span>,</span><br><span class="line">            <span class="attr">"price"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="attr">"amount"</span>: <span class="number">90</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_links"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders/8706dbaf-4511-4b01-b6c5-e24bec3f10a9"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"orderEntry"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders/8706dbaf-4511-4b01-b6c5-e24bec3f10a9"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"Edison"</span>,</span><br><span class="line">        <span class="attr">"payment"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="string">"cancelled"</span>,</span><br><span class="line">        <span class="attr">"products"</span>: &#123;</span><br><span class="line">          <span class="attr">"1"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"ttt"</span>,</span><br><span class="line">            <span class="attr">"price"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="attr">"amount"</span>: <span class="number">90</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_links"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders/6baba5e9-1173-48a8-ab98-cd51691ba9f5"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"orderEntry"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders/6baba5e9-1173-48a8-ab98-cd51691ba9f5"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"Edison"</span>,</span><br><span class="line">        <span class="attr">"payment"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="string">"cancelled"</span>,</span><br><span class="line">        <span class="attr">"products"</span>: &#123;</span><br><span class="line">          <span class="attr">"1"</span>: &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"ttt"</span>,</span><br><span class="line">            <span class="attr">"price"</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="attr">"amount"</span>: <span class="number">90</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"_links"</span>: &#123;</span><br><span class="line">          <span class="attr">"self"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders/27a829af-cda1-43f4-af37-fbc597fe5f6f"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"orderEntry"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders/27a829af-cda1-43f4-af37-fbc597fe5f6f"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_links"</span>: &#123;</span><br><span class="line">    <span class="attr">"self"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/orders"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"profile"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8080/profile/orders"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"page"</span>: &#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">"totalElements"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"totalPages"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>很明显看到只有第一个订单状态为’confirmed’，其他两个都是’cancelled’。重启后，Aggregate自动回溯后，对库存的判断也是正确的。</p><ol><li>再做个小实验，我们修改<code>OrderSaga</code>，强制在确认订单时让线程sleep一段时间，然后去MongoDB里查看Saga信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SagaEventHandler</span>(associationProperty = <span class="string">"id"</span>, keyName = <span class="string">"orderId"</span>)</span><br><span class="line"><span class="meta">@EndSaga</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderConfirmedEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"Order &#123;&#125; is confirmed"</span>, event.getId());</span><br><span class="line">    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.sagas.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;58df074d73bc0c10f4008eff&quot;),</span><br><span class="line">        &quot;sagaType&quot; : &quot;com.edi.learn.axon.command.saga.OrderSaga&quot;,</span><br><span class="line">        &quot;sagaIdentifier&quot; : &quot;08a371f5-9d9a-48a7-b46e-9b8e86b8897b&quot;,</span><br><span class="line">        &quot;serializedSaga&quot; : BinData(0,&quot;e30=&quot;),</span><br><span class="line">        &quot;associations&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;key&quot; : &quot;orderId&quot;,</span><br><span class="line">                        &quot;value&quot; : &quot;5111a55e-1ddd-4434-aab8-635c004fc1eb&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到我们的关联值了吧。</p><p>本文代码：<a href="https://github.com/EdisonXu/sbs-axon/tree/master/lesson-5" target="_blank" rel="noopener">https://github.com/EdisonXu/sbs-axon/tree/master/lesson-5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在上一篇里面，我们正式的使用了CQRS模式完成了AXON的第一个真正的例子，但是细心的朋友会发现一个问题，创建订单时并没有检查商品库存。&lt;br&gt;库存是否足够直接回导致订单状态的成功与否，在并发时可能还会出现超卖。当库存不足时还需要回滚订单，所以这里出现了复杂的跨Aggregate事务问题。&lt;br&gt;Saga就是为解决这里复杂流程而生的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Saga&quot;&gt;&lt;a href=&quot;#Saga&quot; class=&quot;headerlink&quot; title=&quot;Saga&quot;&gt;&lt;/a&gt;&lt;strong&gt;Saga&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Saga&lt;/strong&gt; 这个名词最早是由Hector Garcia-Molina和Kenneth Salem写的&lt;a href=&quot;http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sagas&lt;/a&gt;这篇论文里提出来的，但其实Saga并不是什么新事物，在我们传统的系统设计中，它有个更熟悉的名字——“ProcessManager”，只是换了个马甲，还是干同样的事——组合一组逻辑处理复杂流程。&lt;br&gt;但它与我们平常理解的“ProgressManager”又有不同，它的提出，最早是是为了解决分布式系统中长时间运行事务(long-running business process)的问题，把单一的transaction按照步骤分成一组若干子transaction，通过补偿机制实现最终一致性。&lt;br&gt;举个例子，在一个交易环节中有下单支付两个步骤，如果是传统方式，两个步骤在一个事务里，统一成功或回滚，然而如果支付时间很长，那么就会导致第一步，即下单这里所占用的资源被长时间锁定，可能会对系统可用性造成影响。如果用Saga来实现，那么下单是一个独立事务，下单的事务先提交，提交成功后开始支付的事务，如果支付成功，则支付的事务也提交，整个流程就算完成，但是如果支付事务执行失败，那么支付需要回滚，因为这时下单事务已经提交，则需要对下单操作进行补偿操作（可能是回滚，也可能是变成新状态）。&lt;br&gt;可以看到Saga是牺牲了数据的强一致性，实现最终一致性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(五)：第一个正式Axon例子</title>
    <link href="http://edisonxu.org/2017/03/30/axon-cqrs-example.html"/>
    <id>http://edisonxu.org/2017/03/30/axon-cqrs-example.html</id>
    <published>2017-03-30T11:45:16.000Z</published>
    <updated>2018-10-30T01:56:38.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面对Axon的基本概念和基本操作做了简介，从本章开始，我们将一步步使用AxonFramework完成一个真正CQRS&amp;EventSourcing的例子。</p></blockquote><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>回顾一下使用AxonFramework应用的架构<br><img src="/images/2017/03/detailed-architecture-overview.png" alt=""></p><p>Command端Repository和Query端的Database是解耦的，完全可以使用不同的持久化技术，我们来尝试用MongoDB做Command端的Repository，而MySQL做Query的数据库。</p><h3 id="例子描述"><a href="#例子描述" class="headerlink" title="例子描述"></a>例子描述</h3><p>我们尝试完成一个简单的case：后台人员创建商品，用户选定若干商品后下单购买。<br>商品定义：Product(id, name, stock, price)<br>商品创建流程：<br><code>CreateProductCommand</code> -&gt; new <code>ProductAggregate</code> instance -&gt; <code>ProductCreatedEvent</code></p><p>订单定义： Order(id, username, payment, products)<br>订单创建流程：<br><code>CreateOrderCommand</code> -&gt; new <code>OrderAggregate</code> instance -&gt; <code>OrderCreatedEvent</code><br>创建商品时，我们只接收商品ID，去查询商品的具体信息，这样来学习如何在handler内去查询Aggregate。</p><h2 id="Command端实现"><a href="#Command端实现" class="headerlink" title="Command端实现"></a>Command端实现</h2><p>Command端实现与前面几篇文章基本一致，需要定义Aggregate、Command，然后提供配置即可。</p><h3 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h3><p><code>ProductAggregate</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aggregate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(ProductAggregate.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AggregateIdentifier</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductAggregate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CommandHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductAggregate</span><span class="params">(CreateProductCommand command)</span> </span>&#123;</span><br><span class="line">        apply(<span class="keyword">new</span> ProductCreatedEvent(command.getId(),command.getName(),command.getPrice(),command.getStock()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(ProductCreatedEvent event)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = event.getId();</span><br><span class="line">        <span class="keyword">this</span>.name = event.getName();</span><br><span class="line">        <span class="keyword">this</span>.price = event.getPrice();</span><br><span class="line">        <span class="keyword">this</span>.stock = event.getStock();</span><br><span class="line">        LOGGER.debug(<span class="string">"Product [&#123;&#125;] &#123;&#125; &#123;&#125;x&#123;&#125; is created."</span>, id,name,price,stock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>OrderAggregate</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aggregate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderAggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AggregateIdentifier</span></span><br><span class="line">    <span class="keyword">private</span> OrderId id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> payment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AggregateMember</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, OrderProduct&gt; products;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderAggregate</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderAggregate</span><span class="params">(OrderId id, String username, Map&lt;String, OrderProduct&gt; products)</span> </span>&#123;</span><br><span class="line">        apply(<span class="keyword">new</span> OrderCreatedEvent(id, username, products));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderId <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, OrderProduct&gt; <span class="title">getProducts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> products;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(OrderCreatedEvent event)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = event.getOrderId();</span><br><span class="line">        <span class="keyword">this</span>.username = event.getUsername();</span><br><span class="line">        <span class="keyword">this</span>.products = event.getProducts();</span><br><span class="line">        computePrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computePrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        products.forEach((id, product) -&gt; &#123;</span><br><span class="line">            payment += product.getPrice() * product.getAmount();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Divided 100 here because of the transformation of accuracy</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPayment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> payment/<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">(OrderProduct product)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.products.put(product.getId(), product);</span><br><span class="line">        payment += product.getPrice() * product.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeProduct</span><span class="params">(String productId)</span></span>&#123;</span><br><span class="line">        OrderProduct product = <span class="keyword">this</span>.products.remove(productId);</span><br><span class="line">        payment = payment - product.getPrice() * product.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里，我并没有像ProductAggregate一样，把CreateOrderCommand放到OrderAggregate的构造器中去处理，原因是在创建订单时，由于需要知道商品的单价，所以要根据商品id查询商品信息，因为涉及到了其他Aggregate操作，特地单独创建一个OrderHandler来处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(OrderHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Repository&lt;OrderAggregate&gt; repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Repository&lt;ProductAggregate&gt; productRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EventBus eventBus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CommandHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(CreateOrderCommand command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, OrderProduct&gt; products = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        command.getProducts().forEach((productId,number)-&gt;&#123;</span><br><span class="line">            LOGGER.debug(<span class="string">"Loading product information with productId: &#123;&#125;"</span>,productId);</span><br><span class="line">            Aggregate&lt;ProductAggregate&gt; aggregate = productRepository.load(productId);</span><br><span class="line">            products.put(productId,</span><br><span class="line">                    <span class="keyword">new</span> OrderProduct(productId,</span><br><span class="line">                            aggregate.invoke(productAggregate -&gt; productAggregate.getName()),</span><br><span class="line">                            aggregate.invoke(productAggregate -&gt; productAggregate.getPrice()),</span><br><span class="line">                            number));</span><br><span class="line">        &#125;);</span><br><span class="line">        repository.newInstance(() -&gt; <span class="keyword">new</span> OrderAggregate(command.getOrderId(), command.getUsername(), products));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果查看<code>org.axonframework.commandhandling.model.Repository&lt;T&gt;</code>接口的定义，会发现里面只有三个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load the aggregate with the given unique identifier. No version checks are done when loading an aggregate,</span></span><br><span class="line"><span class="comment">     * meaning that concurrent access will not be checked for.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aggregateIdentifier The identifier of the aggregate to load</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The aggregate root with the given identifier.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AggregateNotFoundException if aggregate with given id cannot be found</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Aggregate&lt;T&gt; <span class="title">load</span><span class="params">(String aggregateIdentifier)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load the aggregate with the given unique identifier.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aggregateIdentifier The identifier of the aggregate to load</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expectedVersion     The expected version of the loaded aggregate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The aggregate root with the given identifier.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AggregateNotFoundException if aggregate with given id cannot be found</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Aggregate&lt;T&gt; <span class="title">load</span><span class="params">(String aggregateIdentifier, Long expectedVersion)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new managed instance for the aggregate, using the given &#123;<span class="doctag">@code</span> factoryMethod&#125;</span></span><br><span class="line"><span class="comment">     * to instantiate the aggregate's root.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factoryMethod The method to create the aggregate's root instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an Aggregate instance describing the aggregate's state</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception when the factoryMethod throws an exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Aggregate&lt;T&gt; <span class="title">newInstance</span><span class="params">(Callable&lt;T&gt; factoryMethod)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有人会疑惑了，为什么没有Delete和Update？<br>先说update，这个Repository其实是对Aggregate的操作，EventSourcing中对Aggregate所有的变化都是通过Event来实现的，所以在调用apply(EventMessage)时，Event就已经被持久化了，<code>EventHandler</code>在处理该Event时，就已经实现了对Aggregate的update。<br>而Delete没有，很简单，EventSourcing脱胎于现实概念，你见过现实生活中把一个事物真正“delete”掉吗？估计得使用高能量子炮把东西轰成原子吧。<br>所以，只会有一个把这个Aggregate标为失效的标志，Axon中，在Aggregate内部可以直接调用markDeleted()来表示这个Aggregate被“delete”掉了，其实只是不能被load出来罢了。<br>由于Repository默认返回的是同一类型Aggregate<t>，所以我们取属性就没那么简单了，只能通过invoke来调用get方法。是不是觉得很麻烦？因为其实CQRS压根不推荐直接从Repository直接query Aggregate来查询，而是调用Query端。</t></p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p>command的实现因为都是POJO我就不贴代码了，可以直接看源码。<br>这里写一下基于SpringWeb的Controller类（引入<code>spring-boot-starter-web</code>包），以创建Product为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(ProductController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommandGateway commandGateway;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(@PathVariable(value = <span class="string">"id"</span>)</span> String id,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"name"</span>, required = <span class="keyword">true</span>)</span> String name,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"price"</span>, required = <span class="keyword">true</span>)</span> <span class="keyword">long</span> price,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"stock"</span>,required = <span class="keyword">true</span>)</span> <span class="keyword">int</span> stock,</span></span><br><span class="line"><span class="function">                       HttpServletResponse response) </span>&#123;</span><br><span class="line"></span><br><span class="line">        LOGGER.debug(<span class="string">"Adding Product [&#123;&#125;] '&#123;&#125;' &#123;&#125;x&#123;&#125;"</span>, id, name, price, stock);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// multiply 100 on the price to avoid float number</span></span><br><span class="line">            CreateProductCommand command = <span class="keyword">new</span> CreateProductCommand(id,name,price*<span class="number">100</span>,stock);</span><br><span class="line">            commandGateway.sendAndWait(command);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_CREATED);<span class="comment">// Set up the 201 CREATED response</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CommandExecutionException cex) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">"Add Command FAILED with Message: &#123;&#125;"</span>, cex.getMessage());</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != cex.getCause()) &#123;</span><br><span class="line">                LOGGER.warn(<span class="string">"Caused by: &#123;&#125; &#123;&#125;"</span>, cex.getCause().getClass().getName(), cex.getCause().getMessage());</span><br><span class="line">                <span class="keyword">if</span> (cex.getCause() <span class="keyword">instanceof</span> ConcurrencyException) &#123;</span><br><span class="line">                    LOGGER.warn(<span class="string">"A duplicate product with the same ID [&#123;&#125;] already exists."</span>, id);</span><br><span class="line">                    response.setStatus(HttpServletResponse.SC_CONFLICT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CommandGateway</code>提供了四种发送Comman的方法：</p><ul><li>send(command, CommandCallback)  发送command，根据执行结果调用<code>CommandCallback</code>中的<code>onSuccess</code>或<code>onFailure</code>方法</li><li>sendAndWait(command) 发送完command，等待执行完成并返回结果</li><li>sendAndWait(command, timeout, TimeUnit) 这个好理解，比上面多了一个超时</li><li>send(command) 该方法返回一个<code>CompletableFuture</code>，不用等待command的执行，立刻返回。结果通过future获取。</li></ul><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>由于我们要使用<code>axon-mongo</code>，而非默认的jpa，所以必须得手动指定两个Aggregate的Repository，以其中一个为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EventStore eventStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProductAggregate <span class="title">productAggregate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductAggregate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AggregateFactory&lt;ProductAggregate&gt; <span class="title">productAggregateAggregateFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SpringPrototypeAggregateFactory&lt;ProductAggregate&gt; aggregateFactory = <span class="keyword">new</span> SpringPrototypeAggregateFactory&lt;&gt;();</span><br><span class="line">        aggregateFactory.setPrototypeBeanName(<span class="string">"productAggregate"</span>);</span><br><span class="line">        <span class="keyword">return</span> aggregateFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Repository&lt;ProductAggregate&gt; <span class="title">productAggregateRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EventSourcingRepository&lt;ProductAggregate&gt; repository = <span class="keyword">new</span> EventSourcingRepository&lt;ProductAggregate&gt;(</span><br><span class="line">                productAggregateAggregateFactory(),</span><br><span class="line">                eventStore</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> repository;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用EventSourcingRepository，必须指定一个AggregateFactory用来反射生成Aggregate的，所以我们这里定义了Aggregate的prototype，并把它注册到AggregateFactory中去。<br>这样在系统启动时，读取历史Event进行ES还原时，就可以真实再现Aggregate的状态。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>前面使用MySQL作为EventStorage是不是感到不爽，那么我们通过引入<code>axon-mongo</code>依赖，使用MongoDB来做EventStorage。<br>pom的修改我就不写了，着重看下相关配置<br>先是修改application.property<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongo</span></span><br><span class="line"><span class="string">mongodb.url=10.1.110.24</span></span><br><span class="line"><span class="string">mongodb.port=27017</span></span><br><span class="line"><span class="comment"># mongodb.username=</span></span><br><span class="line"><span class="comment"># mongodb.password=</span></span><br><span class="line"><span class="string">mongodb.dbname=axon</span></span><br><span class="line"><span class="string">mongodb.events.collection.name=events</span></span><br><span class="line"><span class="string">mongodb.events.snapshot.collection.name=snapshots</span></span><br></pre></td></tr></table></figure></p><p>通过Spring提供的@Value注解在具体的Configuration类里读取。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandRepositoryConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mongodb.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mongoUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mongodb.dbname&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mongoDbName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mongodb.events.collection.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String eventsCollectionName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mongodb.events.snapshot.collection.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String snapshotCollectionName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializer <span class="title">axonJsonSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JacksonSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventStorageEngine <span class="title">eventStorageEngine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MongoEventStorageEngine(</span><br><span class="line">                axonJsonSerializer(),<span class="keyword">null</span>, axonMongoTemplate(), <span class="keyword">new</span> DocumentPerEventStorageStrategy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"axonMongoTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">axonMongoTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MongoTemplate template = <span class="keyword">new</span> DefaultMongoTemplate(mongoClient(), mongoDbName, eventsCollectionName, snapshotCollectionName);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoClient <span class="title">mongoClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MongoFactory mongoFactory = <span class="keyword">new</span> MongoFactory();</span><br><span class="line">        mongoFactory.setMongoAddresses(Arrays.asList(<span class="keyword">new</span> ServerAddress(mongoUrl)));</span><br><span class="line">        <span class="keyword">return</span> mongoFactory.createMongo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用Jacson做序列化器，MongoClient提供了具体连接实现，MongoTemplate指定了db名称、存放event的collection名称、存放snapshot的collection名称。（snapshot的概念以后再解释）<br>中间一个参数是做不同版本Event间兼容的，我们先留null。<br><code>EventStorageEngine</code>指定<code>MongoEventStorageEngine</code>，<code>spring-boot-autoconfigure</code>中的<code>AxonAutoConfiguration</code>就会帮你把它注入到Axon的配置器中。<br>这里指的注意的是，<strong>使用Jackson做序列化器时，对应的entity的所有需要持久化的field必须都有public getter方法</strong>，因为Jackson在反射时默认只读public修饰符的field，否则就会报<br>com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class com.edi.learn.axon.common.domain.OrderId and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.edi.learn.axon.common.events.OrderCreatedEvent[“orderId”])<br>错误。如果确实不想写，那么在Entity的class声明前加上<code>@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.ANY)</code><br>到此，Command端的实现已基本完成（Event我没写，因为与前文类似），那么我们来看看Query端。</p><h2 id="Query端实现"><a href="#Query端实现" class="headerlink" title="Query端实现"></a>Query端实现</h2><p>AxonFramework的Query端其实并没有特别的，我们只需要实现一些<code>EventHandler</code>来处理Command端产生的事件，来更新Query端的数据库就行了。<br>这里我就使用JPA的MySQL实现，spring提供了<code>spring-boot-starter-data-rest</code>，为JPA Repository增加了HateOas风格的REST接口，非常简单，非常方便，堪称无脑。<br>先定义三个Entity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEntry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> price;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> stock;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProductEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProductEntry</span><span class="params">(String id, String name, <span class="keyword">long</span> price, <span class="keyword">int</span> stock)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.price = price;</span><br><span class="line">      <span class="keyword">this</span>.stock = stock;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter &amp; setter</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEntry</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> payment;</span><br><span class="line">  <span class="meta">@OneToMany</span>(fetch = FetchType.EAGER, cascade = CascadeType.ALL)</span><br><span class="line">  <span class="meta">@JoinColumn</span>(name = <span class="string">"order_id"</span>)</span><br><span class="line">  <span class="meta">@MapKey</span>(name = <span class="string">"id"</span>)</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, OrderProductEntry&gt; products;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrderEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrderEntry</span><span class="params">(String id, String username, Map&lt;String, OrderProductEntry&gt; products)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">      <span class="keyword">this</span>.username = username;</span><br><span class="line">      <span class="keyword">this</span>.payment = payment;</span><br><span class="line">      <span class="keyword">this</span>.products = products;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter &amp; setter</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProductEntry</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span></span><br><span class="line">  <span class="keyword">private</span> Long jpaId;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> price;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrderProductEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OrderProductEntry</span><span class="params">(String id, String name, <span class="keyword">long</span> price, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.price = price;</span><br><span class="line">      <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter &amp; setter</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比较简单，唯一需要注意的是ProductEntry和OrderEntry之间的一对多关系。<br>然后为它们创建两个Repository<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RepositoryRestResource(collectionResourceRel = &quot;orders&quot;, path = &quot;orders&quot;)</span><br><span class="line">public interface OrderEntryRepository extends PagingAndSortingRepository&lt;OrderEntry, String&gt; &#123;&#125;</span><br><span class="line">@RepositoryRestResource(collectionResourceRel = &quot;products&quot;, path = &quot;products&quot;)</span><br><span class="line">public interface ProductEntryRepository extends PagingAndSortingRepository&lt;ProductEntry, String&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>是不是很简单？最后定义handler，为省篇幅，我只写一个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(OrderEventHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderEntryRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(OrderCreatedEvent event)</span></span>&#123;</span><br><span class="line">        Map&lt;String, OrderProductEntry&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        event.getProducts().forEach((id, product)-&gt;&#123;</span><br><span class="line">            map.put(id,</span><br><span class="line">                    <span class="keyword">new</span> OrderProductEntry(</span><br><span class="line">                            product.getId(),</span><br><span class="line">                            product.getName(),</span><br><span class="line">                            product.getPrice(),</span><br><span class="line">                            product.getAmount()));</span><br><span class="line">        &#125;);</span><br><span class="line">        OrderEntry order = <span class="keyword">new</span> OrderEntry(event.getOrderId().toString(), event.getUsername(), map);</span><br><span class="line">        repository.save(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p>由于我们使用了axon提供的<code>MongoEventStorageEngine</code>，其内部也使用了JPA，所以我们在启动类还需要把Axon帮我们转Entity的一些类也加到EntityScan中去<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>&#125;)</span><br><span class="line"><span class="meta">@EntityScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventsourcing.eventstore.jpa"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventhandling.saga.repository.jpa"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventhandling.tokenstore.jpa"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"com.edi.learn.axon.query"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动后，用POST发送请求<a href="http://127.0.0.1:8080/product/1?name=ttt&amp;price=10&amp;stock=100" target="_blank" rel="noopener">http://127.0.0.1:8080/product/1?name=ttt&amp;price=10&amp;stock=100</a> ，查询mongoDB：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; use axon</span><br><span class="line">&gt; show collections</span><br><span class="line">events</span><br><span class="line">snapshots</span><br><span class="line">system.indexes</span><br><span class="line">&gt; db.events.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;58dd181073bc0c0fb86d895e&quot;),</span><br><span class="line">        &quot;aggregateIdentifier&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;ProductAggregate&quot;,</span><br><span class="line">        &quot;sequenceNumber&quot; : NumberLong(0),</span><br><span class="line">        &quot;serializedPayload&quot; : &quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ttt\&quot;,\&quot;price\&quot;:1000,\&quot;stock\&quot;:100&#125;&quot;,</span><br><span class="line">        &quot;timestamp&quot; : &quot;2017-03-30T14:37:04.075Z&quot;,</span><br><span class="line">        &quot;payloadType&quot; : &quot;com.edi.learn.axon.common.events.ProductCreatedEvent&quot;,</span><br><span class="line">        &quot;payloadRevision&quot; : null,</span><br><span class="line">        &quot;serializedMetaData&quot; : &quot;&#123;\&quot;traceId\&quot;:\&quot;4a298ed4-0d53-402a-ae6b-d79cc5e193bf\&quot;,\&quot;correlationId\&quot;:\&quot;4a298ed4-0d53-402a-ae6b-d79cc5e193bf\&quot;&#125;&quot;,</span><br><span class="line">        &quot;eventIdentifier&quot; : &quot;500f3a8f-7c02-4e8e-bb9c-7b676224ce5c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到生成的EventMessage，与前篇文章中MySQL表里内容基本一致。<br>再去看下MySQL库的product_entry表，有记录</p><table><thead><tr><th>id</th><th>name</th><th>price</th><th>stock</th></tr></thead><tbody><tr><td>1</td><td>ttt</td><td>1000</td><td>100</td></tr></tbody></table><p>用GET请求<a href="http://localhost:8080/products" target="_blank" rel="noopener">http://localhost:8080/products</a> 会返回当前所有product信息，加上id <a href="http://localhost:8080/products/1" target="_blank" rel="noopener">http://localhost:8080/products/1</a> 就会返回刚才创建的product。</p><p>本篇对应代码：<a href="https://github.com/EdisonXu/sbs-axon/tree/master/lesson-4" target="_blank" rel="noopener">https://github.com/EdisonXu/sbs-axon/tree/master/lesson-4</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前面对Axon的基本概念和基本操作做了简介，从本章开始，我们将一步步使用AxonFramework完成一个真正CQRS&amp;amp;EventSourcing的例子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;设计&quot;&gt;&lt;a href=&quot;#设计&quot; class=&quot;headerlink&quot; title=&quot;设计&quot;&gt;&lt;/a&gt;设计&lt;/h2&gt;&lt;p&gt;回顾一下使用AxonFramework应用的架构&lt;br&gt;&lt;img src=&quot;/images/2017/03/detailed-architecture-overview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(四)：Axon使用EventSourcing和AutoConfigure</title>
    <link href="http://edisonxu.org/2017/03/30/axon-event-sourcing.html"/>
    <id>http://edisonxu.org/2017/03/30/axon-event-sourcing.html</id>
    <published>2017-03-30T09:52:23.000Z</published>
    <updated>2018-10-30T01:56:32.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>继上一篇集成SpringBoot后，本篇将继续完成小目标：</p><ol><li>使用EventSourcing</li><li>使用AutoConfigure配置Axon</li></ol></blockquote><p>前一篇中看到配置Axon即便在Spring中也是比较麻烦的，好在Axon提供了<code>spring-boot-autoconfigure</code>，提供了Spring下的一些默认配置，极大地方便了我们的工作。<br>启用也是非常方便的，在上一篇的基础上，我们只需要干三件事即可达成目标：</p><ol><li>引入<code>spring-boot-autoconfigure</code></li><li>删除JpaConfig类</li><li>去除<code>BankAccount</code>中的Entity声明</li></ol><p>由于提供的application.properties里关于数据库的配置信息本身就是符合SpringDatasource定义的，所以，SpringBoot在检测到该配置后自动启用JPA。<br><code>spring-boot-autoconfigure</code>中<code>AxonAutoConfiguration</code>类帮我们提供了最常用的<code>CommandBus</code>、<code>EventBus</code>、<code>EventStorageEngine</code>、<code>Serializer</code>、<code>EventStore</code>等，所以可以直接运行了。<br>在该类中有一段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span>(EntityManagerFactory.class)</span><br><span class="line"><span class="meta">@RegisterDefaultEntities</span>(packages = &#123;<span class="string">"org.axonframework.eventsourcing.eventstore.jpa"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventhandling.tokenstore"</span>,</span><br><span class="line">        <span class="string">"org.axonframework.eventhandling.saga.repository.jpa"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventStorageEngine <span class="title">eventStorageEngine</span><span class="params">(EntityManagerProvider entityManagerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 TransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaEventStorageEngine(entityManagerProvider, transactionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManagerProvider <span class="title">entityManagerProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerManagedEntityManagerProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">(Serializer serializer, EntityManagerProvider entityManagerProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTokenStore(entityManagerProvider, serializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(SagaStore.class)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaSagaStore <span class="title">sagaStore</span><span class="params">(Serializer serializer, EntityManagerProvider entityManagerProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaSagaStore(serializer, entityManagerProvider);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，当我们提供了JPA相关配置，以及mysql-connector后，这些Bean也会被启用，可以看到里面默认的<code>EventStoreEngine</code>就是<code>JpaEventStorageEngine</code>。<br>执行后，我们可以看到数据库中创建了如下表<br><img src="/images/2017/03/db.png" alt=""></p><p>其中<code>domain_event_entry</code>就是用来保存对Aggregate状态造成改变的所有Event的表。如果不做特别声明，所有Event都会记录在这张表里。<br>表内容<br><img src="/images/2017/03/domainevents.png" alt=""><br>其中，比较重要的字段有</p><ul><li>pay_load Event的具体内容</li><li>pay_load_type Event的类型，Axon在ES(Event Sourcing)时会通过这个反射出来原来的Java class</li><li>time_stamp 该Event发生的时间</li><li>aggregate_identifier event所对应Aggregate的唯一标识，在ES时，只有相同identifier的event才会一起回溯</li><li>sequence_number 同一Aggregate对应的event发生的序列号，回溯时严格按照该顺序</li></ul><p>值得注意的是，在使用EventSourcing时，由于Aggregate本身的状态是通过ES获得的，所以所有对于Aggregate状态变化的动作一定都是放在<code>@EventHandler</code>里的，否则将会造成状态丢失。<br>预告一下，基本介绍已经完毕，下一篇开始，进入复杂的实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;继上一篇集成SpringBoot后，本篇将继续完成小目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用EventSourcing&lt;/li&gt;
&lt;li&gt;使用AutoConfigure配置Axon&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一篇中看到配置Axon即便在Spring中也是比较麻烦的，好在Axon提供了&lt;code&gt;spring-boot-autoconfigure&lt;/code&gt;，提供了Spring下的一些默认配置，极大地方便了我们的工作。&lt;br&gt;启用也是非常方便的，在上一篇的基础上，我们只需要干三件事即可达成目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入&lt;code&gt;spring-boot-autoconfigure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除JpaConfig类&lt;/li&gt;
&lt;li&gt;去除&lt;code&gt;BankAccount&lt;/code&gt;中的Entity声明&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(三)：Axon使用Jpa存储Aggregate状态</title>
    <link href="http://edisonxu.org/2017/03/30/axon-jpa.html"/>
    <id>http://edisonxu.org/2017/03/30/axon-jpa.html</id>
    <published>2017-03-30T07:52:23.000Z</published>
    <updated>2018-10-30T01:56:23.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇里，介绍了Axon的基本概念，并且做了一个最简单的hello例子。本篇将更进一步，完成两个小目标：</p><ol><li>集成SpringBoot；</li><li>使用Standard Repository来存储Aggregate的最新状态。</li></ol></blockquote><h2 id="1-更新Maven依赖"><a href="#1-更新Maven依赖" class="headerlink" title="1. 更新Maven依赖"></a>1. 更新Maven依赖</h2><p>干几件事：</p><ul><li>集成Springboot</li><li>加入spring-boot-starter-data-jpa(Spring提供的JPA快速包，很方便)</li><li>加入my-sql-connector</li><li>加入spring-boot-starter-web包，提供web接口调用，测试用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-提供application-properties，配置好数据库信息"><a href="#2-提供application-properties，配置好数据库信息" class="headerlink" title="2. 提供application.properties，配置好数据库信息"></a>2. 提供application.properties，配置好数据库信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Datasource configuration</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//xxx.xxx.xxx.xxx:3306/cqrs</span></span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=&lt;username&gt;</span><br><span class="line">spring.datasource.password=&lt;password&gt;</span><br><span class="line">spring.datasource.validation-query=SELECT <span class="number">1</span>;</span><br><span class="line">spring.datasource.initial-size=<span class="number">2</span></span><br><span class="line">spring.datasource.sql-script-encoding=UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">spring.jpa.show-sql=<span class="keyword">true</span></span><br><span class="line">spring.jpa.hibernate.ddl-auto=create-drop</span><br></pre></td></tr></table></figure><h2 id="3-使用Spring进行配置"><a href="#3-使用Spring进行配置" class="headerlink" title="3. 使用Spring进行配置"></a>3. 使用Spring进行配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAxon</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(JpaConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventStorageEngine <span class="title">eventStorageEngine</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryEventStorageEngine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManager <span class="title">axonTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringTransactionManager(transactionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventBus <span class="title">eventBus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleEventBus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandBus <span class="title">commandBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleCommandBus commandBus = <span class="keyword">new</span> SimpleCommandBus(axonTransactionManager(), NoOpMessageMonitor.INSTANCE);</span><br><span class="line">        <span class="comment">//commandBus.registerHandlerInterceptor(transactionManagingInterceptor());</span></span><br><span class="line">        <span class="keyword">return</span> commandBus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionManagingInterceptor <span class="title">transactionManagingInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransactionManagingInterceptor(<span class="keyword">new</span> SpringTransactionManager(transactionManager));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> EntityManagerProvider <span class="title">entityManagerProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ContainerManagedEntityManagerProvider();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Repository&lt;BankAccount&gt; <span class="title">accountRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GenericJpaRepository&lt;BankAccount&gt;(entityManagerProvider(),BankAccount.class, eventBus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableAxon</code>会启用<code>SpringAxonAutoConfigurer</code>，后者会自动把上线文里的关键配置模块注入到Axon的config中。但这个注解未来会被替代，所以推荐使用方式为引入axon-spring-boot-autoconfigure包。下一篇文章就会介绍如何使用autoconfigure进行配置。<br>在本例中，我们把Event保存在内存中，所以指定EventStoreEngine为<code>InMemoryEventStorageEngine</code>。<br>前一篇说过，Axon会给每一个Aggregate创建一个AggregateRepositoryBean，来指定每一个Aggregate的实际Repository。这里我们直接声明BankAccount对应的Repository为一个<code>GenericJpaRepository</code>,来直接保存Aggregate的状态。<code>GenericJpaRepository</code>要求提供一个<code>EntityManagerProvider</code>，该Provider会提供具体的<code>EntityManager</code>来管理持久化。<br>值得注意的是，CommandBus在初始化时，需要提供一个TransactionManager，如果直接调用SimpleCommandBus的无参构造器，默认是<code>NoTransactionManager.INSTANCE</code>。本例测试时把几个command放在一个线程里串行执行，如果不提供TransactionManager，那么最终withdraw会失败。<br>提供TransactionManager的方式有两种：</p><ul><li>如上例中直接构造器中指定；</li><li>注册一个TransactionManagingInterceptor；</li></ul><h2 id="4-把Aggregate加上JPA的标准Entity注解"><a href="#4-把Aggregate加上JPA的标准Entity注解" class="headerlink" title="4. 把Aggregate加上JPA的标准Entity注解"></a>4. 把Aggregate加上JPA的标准Entity注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aggregate</span>(repository = <span class="string">"accountRepository"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="meta">@AggregateIdentifier</span></span><br><span class="line">  <span class="keyword">private</span> AccountId accountId;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getAccountId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accountId.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getAccountName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> accountName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>repository = “accountRepository”指定了该Aggregate对应的Repository的Bean名字，即在JpaConfig中定义的那一个。<br>JPA要求Entity必须有一个ID，<code>GenericJpaRepository</code>默认使用String作为EntityId的类型，而这里并没有直接用String，将会在存储时报<br>java.lang.IllegalArgumentException: Provided id of the wrong type for class com.edi.learn.axon.aggregates.BankAccount. Expected: class com.edi.learn.axon.domain.AccountId, got class java.lang.String<br>解决方法是把@Id，@Column加在getter方法上。</p><h2 id="5-配置controller接受请求并发送command"><a href="#5-配置controller接受请求并发送command" class="headerlink" title="5. 配置controller接受请求并发送command"></a>5. 配置controller接受请求并发送command</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/bank"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(BankAccountController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommandGateway commandGateway;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"start"</span>);</span><br><span class="line">        AccountId id = <span class="keyword">new</span> AccountId();</span><br><span class="line">        LOGGER.debug(<span class="string">"Account id: &#123;&#125;"</span>, id.toString());</span><br><span class="line">        commandGateway.send(<span class="keyword">new</span> CreateAccountCommand(id, <span class="string">"MyAccount"</span>,<span class="number">1000</span>));</span><br><span class="line">        commandGateway.send(<span class="keyword">new</span> WithdrawMoneyCommand(id, <span class="number">500</span>));</span><br><span class="line">        commandGateway.send(<span class="keyword">new</span> WithdrawMoneyCommand(id, <span class="number">300</span>));</span><br><span class="line">        commandGateway.send(<span class="keyword">new</span> CreateAccountCommand(id, <span class="string">"MyAccount"</span>, <span class="number">1000</span>));</span><br><span class="line">        commandGateway.send(<span class="keyword">new</span> WithdrawMoneyCommand(id, <span class="number">500</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里是为了偷懒，直接一个post请求就可以执行一堆操作。有心者可以改下，接受参数，根据参数发送command。</p><h2 id="6-启动类"><a href="#6-启动类" class="headerlink" title="6. 启动类"></a>6. 启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.edi.learn"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唯一需要注意的是，如果Application类不在JpaConfig包路径的前面，JpaConfig讲不会被Spring扫描注册到上下文中，需要指定包路径。</p><p>启动后，在<a href="http://localhost:8080/bank" target="_blank" rel="noopener">http://localhost:8080/bank</a> 发送一个POST请求，就可以看到log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">17:53:47.099 [http-nio-8080-exec-1] INFO  c.e.l.a.c.aggregates.BankAccount - Account 2fabef76-80bc-4dfc-8f21-4b68c5969fa5 is created with balance 1000</span><br><span class="line">17:53:47.229 [http-nio-8080-exec-1] INFO  c.e.l.a.c.aggregates.BankAccount - Withdraw 500 from account 2fabef76-80bc-4dfc-8f21-4b68c5969fa5, balance result: 500</span><br><span class="line">17:53:47.241 [http-nio-8080-exec-1] INFO  c.e.l.a.c.aggregates.BankAccount - Withdraw 300 from account 2fabef76-80bc-4dfc-8f21-4b68c5969fa5, balance result: 200</span><br><span class="line">17:53:47.246 [http-nio-8080-exec-1] INFO  c.e.l.a.c.aggregates.BankAccount - Account 2fabef76-80bc-4dfc-8f21-4b68c5969fa5 is created with balance 1000</span><br><span class="line">17:53:47.253 [http-nio-8080-exec-1] WARN  o.a.c.gateway.DefaultCommandGateway - Command &apos;com.edi.learn.axon.command.commands.CreateAccountCommand&apos; resulted in javax.persistence.EntityExistsException(A different object with the same identifier value was already associated with the session : [com.edi.learn.axon.command.aggregates.BankAccount#2fabef76-80bc-4dfc-8f21-4b68c5969fa5])</span><br><span class="line">17:53:47.268 [http-nio-8080-exec-1] ERROR c.e.l.a.c.aggregates.BankAccount - Cannot withdraw more money than the balance!</span><br></pre></td></tr></table></figure></p><p>可以看到故意发送的第二个<code>CreateAccountCommand</code>时，由于id相同，提示创建失败。<br>进一步取钱时，因余额不足报错 。</p><p>本文源码：<a href="https://github.com/EdisonXu/sbs-axon/tree/master/lesson-2" target="_blank" rel="noopener">https://github.com/EdisonXu/sbs-axon/tree/master/lesson-2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上一篇里，介绍了Axon的基本概念，并且做了一个最简单的hello例子。本篇将更进一步，完成两个小目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集成SpringBoot；&lt;/li&gt;
&lt;li&gt;使用Standard Repository来存储Aggregate的最新状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-更新Maven依赖&quot;&gt;&lt;a href=&quot;#1-更新Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 更新Maven依赖&quot;&gt;&lt;/a&gt;1. 更新Maven依赖&lt;/h2&gt;&lt;p&gt;干几件事：&lt;/p&gt;
    
    </summary>
    
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(二)：Hello,Axon3</title>
    <link href="http://edisonxu.org/2017/03/30/hello-axon.html"/>
    <id>http://edisonxu.org/2017/03/30/hello-axon.html</id>
    <published>2017-03-30T06:47:46.000Z</published>
    <updated>2018-10-30T01:56:14.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>AxonFramework是一个轻量级的CQRS框架，支持EventSourcing，本系列将开始通过例子，StepByStep学习AxonFramework。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="www.axonframework.org">AxonFramework</a>是一个基于事件驱动的轻量级CQRS框架，既支持直接持久化Aggreaget状态，也支持采用EventSourcing，使用AxonFramework的应用架构如下<br><img src="/images/2017/03/detailed-architecture-overview.png" alt=""></p><p>引入Axon非常简单，加入Maven依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.axonframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axon-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;axon.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>AxonFramework的源码地址：<a href="https://github.com/AxonFramework/AxonFramework" target="_blank" rel="noopener">https://github.com/AxonFramework/AxonFramework</a><br>包含了如下组件；</p><ul><li><code>core</code> axon的核心代码</li><li><code>amqp</code> 使用AMQP协议的MQ，如rabbit等，实现Event跨JVM的分发</li><li><code>distributed-commandbus-jgroups</code> 使用Jgroup实现跨JVM的Command分发</li><li><code>distributed-commandbus-springcloud</code> 与SpringCloud集成，使用DiscoveryClient和RESTemplate实现跨JVM的Command分发</li><li><code>metrics</code> 提供监控相关信息</li><li><code>mongo</code> 实现axon与mongoDB的集成</li><li><code>spring-boot-autoconfigure</code> 实现spring的autoconfigure支持，只需要提供相关Property就可以自动配置Axon</li><li><code>spring-boot-starter-jgroups</code> 用distributed-commandbus-jgroups加上spring autoconfigure，提供jgroup“一键”集成</li><li><code>spring-boot-starter</code> 与springboot集成</li><li><code>spring</code> 提供各种annotation，与spring集成</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>废话不多说，我们来用一个简单的例子来说明AxonFramework最基本的使用方法：<br>“开一个银行账户，取钱”</p><h2 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h2><p>显然，在这个例子中，我们要实现一个Aggregate是银行账户，定义如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AggregateIdentifier</span></span><br><span class="line">    <span class="keyword">private</span> AccountId accountId;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Axon中定义一个class是Aggregate有两种方法：</p><ol><li>在配置中直接指定，如调用.configureAggregate(BankAccount.class)；</li><li>与Spring集成时，可以通过加上@Aggregate的注解标明；<br>结合前文DDD概念中关于Aggregate的介绍，每个Aggregate都有自己独立的全局唯一的标识符，<code>@AggregateIdentifier</code>即是这个唯一标识的标志，例子中就是银行的AccountId。一个AggregateIdentifier必须：</li></ol><ul><li>实现<code>equal</code>和<code>hashCode</code>方法，因为它会被拿来与其他标识对比</li><li>实现<code>toString</code>方法，其结果也应该是全局唯一的</li><li>实现<code>Serializable</code>接口以表明可序列化</li></ul><p>这里用Axon提供的generateIdentifier方法来创建唯一标识：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7119961474083133148L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String identifier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> hashCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.identifier = IdentifierFactory.getInstance().generateIdentifier();</span><br><span class="line">        <span class="keyword">this</span>.hashCode = identifier.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountId</span><span class="params">(String identifier)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(identifier, ()-&gt;<span class="string">"Identifier may not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.identifier = identifier;</span><br><span class="line">        <span class="keyword">this</span>.hashCode = identifier.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        AccountId accountId = (AccountId) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> identifier.equals(accountId.identifier);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> identifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>在CQRS模式下，所有的“写”操作，都是发送Command来操作。Axon中Command可以是任意的POJO类，由于axon是基于事件驱动的架构，Command类处理时会被axon封装成一个<code>CommandMessage</code>。<br>本例只需要实现两个Command:<br><code>CreateAccountCommand</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateAccountCommand</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountId accountId;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateAccountCommand</span><span class="params">(AccountId accountId, String accountName, <span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountId = accountId;</span><br><span class="line">        <span class="keyword">this</span>.accountName = accountName;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter &amp; setter</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>WithdrawMoneyCommand</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithdrawMoneyCommand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TargetAggregateIdentifier</span></span><br><span class="line">    <span class="keyword">private</span> AccountId accountId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithdrawMoneyCommand</span><span class="params">(AccountId accountId, <span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountId = accountId;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter &amp; setter</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>篇幅问题，我这里省略了getter/setter方法，但是，<strong>如果使用Jackson做序列化器，必须实现空参构造器和提供所有field的getter方法！</strong></p><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>Event是系统中发生任何改变时产生的事件类，典型的event就是对Aggregate状态的修改。与Command一样，Event可以是任何POJO，axon也会把Event自动封装成<code>EventMessage</code>，其中如果是Aggregate发送出来的Event，会被封装成<code>DomainEventMessage</code>。通常来说，Event最好是可序列化的。那么对应到本例，显然有两个Event：<br><code>AccountCreatedEvent</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountCreatedEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountId accountId;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountCreatedEvent</span><span class="params">(AccountId accountId, String accountName, <span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountId = accountId;</span><br><span class="line">        <span class="keyword">this</span>.accountName = accountName;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter &amp; setter</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MoneyWithdrawnEvent</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoneyWithdrawnEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccountId accountId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MoneyWithdrawnEvent</span><span class="params">(AccountId accountId, <span class="keyword">long</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountId = accountId;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter &amp; setter</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一样，省略了gettter/setter，注意序列化器对构造器和getter的要求。</p><h2 id="CommandHandler"><a href="#CommandHandler" class="headerlink" title="CommandHandler"></a>CommandHandler</h2><p>axon使用@CommandHandler注解来标明用来处理Command的方法，配置时会把这些CommandHandler统一加载管理，与其对应的Command形成KV键值对。在Aggregate实现BankAccount里面加入CommandHandler如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CommandHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span><span class="params">(CreateAccountCommand command)</span></span>&#123;</span><br><span class="line">   apply(<span class="keyword">new</span> AccountCreatedEvent(command.getAccountId(), command.getAccountName(), command.getAmount()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CommandHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(WithdrawMoneyCommand command)</span></span>&#123;</span><br><span class="line">   apply(<span class="keyword">new</span> MoneyWithdrawnEvent(command.getAccountId(), command.getAmount()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里不做其他事，只简单的产生Event并使用提供的静态方法<code>apply</code>把Event发送出去。<br>值得一提的是，这里用一个构造器来接受<code>CreateAccountCommand</code>，至于有什么特殊，这里卖个关子，文章最后见分晓。</p><h2 id="EventHandler"><a href="#EventHandler" class="headerlink" title="EventHandler"></a>EventHandler</h2><p>专门用来处理Event的方法，用@EventHandler标明或使用<code>EventHandlingConfiguration</code>去注册。在BankAccount内加入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(AccountCreatedEvent event)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.accountId = event.getAccountId();</span><br><span class="line">    <span class="keyword">this</span>.accountName = event.getAccountName();</span><br><span class="line">    <span class="keyword">this</span>.balance = <span class="keyword">new</span> BigDecimal(event.getAmount());</span><br><span class="line">    LOGGER.info(<span class="string">"Account &#123;&#125; is created with balance &#123;&#125;"</span>, accountId, <span class="keyword">this</span>.balance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EventHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(MoneyWithdrawnEvent event)</span></span>&#123;</span><br><span class="line">    BigDecimal result = <span class="keyword">this</span>.balance.subtract(<span class="keyword">new</span> BigDecimal(event.getAmount()));</span><br><span class="line">    <span class="keyword">if</span>(result.compareTo(BigDecimal.ZERO)&lt;<span class="number">0</span>)</span><br><span class="line">        LOGGER.error(<span class="string">"Cannot withdraw more money than the balance!"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = result;</span><br><span class="line">        LOGGER.info(<span class="string">"Withdraw &#123;&#125; from account &#123;&#125;, balance result: &#123;&#125;"</span>, event.getAmount(), accountId, balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>现在基本内容都有了，只差最后一步，对axon进行配置。Axon启动最少要指定如下几个模块：</p><h3 id="CommandBus"><a href="#CommandBus" class="headerlink" title="CommandBus"></a><code>CommandBus</code></h3><p>  <code>CommandBus</code>是用来分发Command到对应<code>CommandHandler</code>的机制。每一个Command只会发送到一个<code>CommandHandler</code>去，当有多个<code>CommandHandler</code>去订阅一个<code>CommandMessage</code>时，最后一个覆盖前面所有。<br>  Axon内置了四种<code>CommandBus</code>：</p><ul><li><p><code>SimpleCommandBus</code><br>默认，直接在发送线程里去执行command handler，执行后保存Aggregate状态和发送事件也都在同一个线程上，适用于大多数情况。</p></li><li><p><code>AsynchrounousCommandBus</code><br>默认使用一个<code>CachedThreadPool</code>来起一个新线程去处理command。<code>CachedThreadPool</code>线程调用时，会检查是否有可用的线程，没有则创建。闲置线程60s后自动关闭。也可以通过config指定其他的线程池来采用不同的线程调度策略。</p></li><li><p><code>DisruptorCommandBus</code><br>适用于多线程场景。<code>SimpleCommandBus</code>在遇到多线程调用时，为了保证aggregate的状态，必须要加锁，这样就降低了效率。<code>DisruptorCommandBus</code>用了开源的并发处理框架<a href="http://lmax-exchange.github.io/disruptor" target="_blank" rel="noopener">Disruptor</a>，用两组线程来处理多线程场景，一组用于执行command handler去更新aggregate的状态，一组用于存储和发送所产生的event到EventStore。<br>但是<code>DisruptorCommandBus</code>有以下的限制：</p><ol><li>仅支持Event Sourced Aggregates</li><li>一个Command只能改变一个Aggregate的状态。<ol><li>当使用Cache的时候，一个identifier只能对应一个aggregate，即不允许两个不同类型的aggregate拥有同一个identifier</li><li>所处理的Command不能导致UnitOfWork的rollback，因为DisruptorCommandBus无法保证rollback时按照dispatch的顺序来处理。</li><li>用于更新Aggregate的command只能按照dispatch的顺序执行，无法指定顺序。<br>DisruptorCommandBus可以使用DisruptorConfiguration来配置，它提供了一些进一步优化的参数。</li></ol></li></ol></li><li><p><code>DistributedCommandBus</code><br>不像其他CommandBus，DistributedCommandBus并不调用任何command handler，它只是在不同JVM的commandbus之间建立一个“桥梁”。每个JVM上的DistributedCommandBus被称为“Segment”。<br><img src="/images/2017/03/distributed-command-bus.png" alt=""><br>DistributedCommandBus需要指定路由规则和具体的connector，这两个东东具体实现由<code>distributed-commandbus-xxx</code>模块提供。</p></li></ul><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a><code>EventBus</code></h3><p>  <code>EventBus</code>用于把event发送到subscribe它的各个handler去。Axon提供了两种EventBus的实现，都支持订阅和跟踪：</p><ul><li><code>SimpleEventBus</code> 默认的EventBus，不持久化event，一旦发送到消费者去，就会销毁。</li><li><code>EmbeddedEventStore</code> 可以持久化event，以便以后replay。</li></ul><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a><code>Repository</code></h3><p>  即<code>Aggregate</code>的持久化方式。Axon内置了两种</p><ul><li><code>Standard Repositories</code> 代表是<code>GenericJpaRepository</code>，直接把Aggregate的最新状态存到db去。</li><li><code>Event Sourcing Repositories</code> 并不直接保存Aggregate的最新状态，而是保存对Aggregate造成影响的所有Event，通过Event回溯来恢复Aggregate状态</li></ul><h3 id="EventStorageEngine"><a href="#EventStorageEngine" class="headerlink" title="EventStorageEngine"></a><code>EventStorageEngine</code></h3><p>  提供event在底层storage读写的机制，内置了若干种：</p><ul><li><code>InMemoryEventStorageEngine</code> 存储到内存中</li><li><code>JpaEventStorageEngine</code> 使用JPA进行存储</li><li><code>JdbcEventStorageEngine</code> 使用jdbc</li><li><code>MongoEventStorageEngine</code> 使用Mongodb存储event</li></ul><h3 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a><code>Serializer</code></h3><p>  由于是事件驱动框架，序列化器必不可少。Axon内置了三种：XStreamSerializer, JavaSerializer, JacksonSerializer，默认是XStreamSerializer，使用<a href="http://xstream.codehaus.org" target="_blank" rel="noopener">XStream</a>来做序列化，理论上比Java自带的序列化器要快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = getLogger(Application.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Configuration config = DefaultConfigurer.defaultConfiguration()</span><br><span class="line">                .configureAggregate(BankAccount.class)</span><br><span class="line">                .configureEmbeddedEventStore(c -&gt; <span class="keyword">new</span> InMemoryEventStorageEngine())</span><br><span class="line">                .buildConfiguration();</span><br><span class="line">        config.start();</span><br><span class="line">        AccountId id = <span class="keyword">new</span> AccountId();</span><br><span class="line">        config.commandGateway().send(<span class="keyword">new</span> CreateAccountCommand(id, <span class="string">"MyAccount"</span>,<span class="number">1000</span>));</span><br><span class="line">        config.commandGateway().send(<span class="keyword">new</span> WithdrawMoneyCommand(id, <span class="number">500</span>));</span><br><span class="line">        config.commandGateway().send(<span class="keyword">new</span> WithdrawMoneyCommand(id, <span class="number">500</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Axon提供了DefaultConfigurer来帮助我们做一些基本配置，所以我们只需要简单的做Aggregate的注册和指定一个EventStorageEngine。<br>这里因为是测试，用了<code>InMemoryEventStorageEngine</code>。<br><code>CommandGateway</code>是对<code>CommandBus</code>的一个封装，更加方便的来发送Command。</p><hr><p>本文完整代码<br><a href="https://github.com/EdisonXu/sbs-axon/tree/master/lesson-1" target="_blank" rel="noopener">https://github.com/EdisonXu/sbs-axon/tree/master/lesson-1</a></p><p>前面说用一个构造器来接受<code>CreateAccountCommand</code>，有什么特殊地方。这里涉及到一个问题，就是Aggregate在Repository的创建。<br>Axon中，打开@Aggregate注解的定义会发现里面其实定义了一个repository。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Selects the name of the AggregateRepository bean. If left empty a new repository is created. In that case the</span></span><br><span class="line"><span class="comment"> * name of the repository will be based on the simple name of the aggregate's class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">repository</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br></pre></td></tr></table></figure></p><p>Axon其实会为每一个Aggregate对应一个AggregateRepository，如果不额外指定，会使用给定的StorageEngine对应的Repository。<br>通常情况下，如果要在Repository里面保存Aggregate，需要执行repository.newInstance(()-&gt;new BankAccount())，但如果直接提供了构造器接受command，那么axon在执行这个command，如<code>CreateAccountCommand</code>时，会自动帮你做一个newInstance的操作。<br>另外，有人会说，为什么要把CommandHandler、EventHandler放到Aggregate内部，能不能放到外面单独用一个类。答案是当然可以。<br>Axon会自动扫描带有@CommandHandler,@EventHandler的方法，加载到KV值中。<br>并没有明确规定说这些方法一定得放在Aggregate内部或外部，不过一般应该把仅涉及当前Aggregate状态变化的，放到Aggregate内部处理，如果牵扯到其他复杂逻辑，如查询其他Aggregate做判断等，则最好是另起一个handler类。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;AxonFramework是一个轻量级的CQRS框架，支持EventSourcing，本系列将开始通过例子，StepByStep学习AxonFramework。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;www.axonframework.org&quot;&gt;AxonFramework&lt;/a&gt;是一个基于事件驱动的轻量级CQRS框架，既支持直接持久化Aggreaget状态，也支持采用EventSourcing，使用AxonFramework的应用架构如下&lt;br&gt;&lt;img src=&quot;/images/2017/03/detailed-architecture-overview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Axon入门系列(一)：CQRS基本概念</title>
    <link href="http://edisonxu.org/2017/03/23/hello-cqrs.html"/>
    <id>http://edisonxu.org/2017/03/23/hello-cqrs.html</id>
    <published>2017-03-23T04:57:52.000Z</published>
    <updated>2018-10-30T01:58:14.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在研究微服务的过程中，跨服务的操作处理，尤其是带有事务性需要统一commit或rollback的，是比较麻烦的。本系列记录了我在研究这一过程中的心得体会。<br>本篇主要就以下几个问题进行介绍：</p><ul><li>微服务中的一个大难题</li><li>DDD中的几个基本概念</li><li>什么是EventSourcing？</li><li>什么是CQRS？</li><li>EventSourcing和CQRS的关系？</li><li>CQRS/ES怎么解决微服务的难题？</li></ul></blockquote><h2 id="微服务中的一个大难题"><a href="#微服务中的一个大难题" class="headerlink" title="微服务中的一个大难题"></a>微服务中的一个大难题</h2><p>微服务架构已经热了有两年了，而且目测会越来越热，除非有更高级的架构出现。相关解释和说明，网上一搜一大堆，我这里就不重复了。一句话概括：<br>微服务将原来的N个模块，或者说服务，按照适当的边界，从单节点划分成一整个分布式系统中的若干节点上。<br><img src="/images/2017/03/microservice.png" alt=""></p><p>原来服务间的交互直接代码级调用，现在则需要通过以下几种方式调用：</p><ul><li>SOA请求</li><li>RPC调用</li><li>ED(EventDriven)事件驱动</li></ul><p>前面两种就比较类似，都属于直接调用，好处明显，缺点是请求者必须知道被请求方的地址。现在一般会提供额外的机制，如服务注册、发现等，来提供动态地址，实现负载和动态路由。目前大多数微服务框架都走的这条路子，如当下十分火热的SpringCloud等。<br>事件驱动的方式，把请求者与被请求者的绑定关系解耦了，但是需要额外提供一个消息队列，请求者直接把消息发送到队列，被请求者监听队列，在获取到与自己有关系的事件时进行处理。主要缺点主要有二：<br>1） 调用链不再直观；<br>2） 高度依赖队列本身的性能和可靠性；</p><p>但无论是哪种方式，都使得传统架构下的事务无法再起到原先的作用了。<br>事务的作用主要有二：</p><ul><li>统一结果，要么都成功，要么都失败</li><li>并发时保证原子性操作</li></ul><p>在传统架构下，无论是DB还是框架所提供的事务操作，都是基于同线/进程的。在微服务所处的分布式框架下，业务操作变成跨进程、跨节点，只能自行实现，而由于节点通信状态的不确定性、节点间生命周期的不统一等，把实现分布式事务的难度提高了很多。<br>这就是微服务中的一个大难题。</p><h2 id="DDD中的几个基本概念"><a href="#DDD中的几个基本概念" class="headerlink" title="DDD中的几个基本概念"></a>DDD中的几个基本概念</h2><p>在进一步深入前，必须要了解几个基本概念。这些基本概念在EventSourcing和CQRS中都会用到。</p><h3 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a><code>Aggregate</code></h3><p>聚合。这个词或许听起来有点陌生，用集合或者组合就好理解点。</p><blockquote><p>A DDD aggregate is a cluster of domain objects that can be treated as a single unit.<br>—— Martin Fowler</p></blockquote><p>以下图为例<br><img src="/images/2017/03/nG3Vc.png" alt=""></p><p>车、轮子、轮胎构成了一个聚合。其中车是聚合根(<code>AggregateRoot</code>)<br><code>Aggregate</code>有两大特征：</p><ul><li>明确的边界</li><li>AggregateRoot</li></ul><p>具体来说，<code>Aggregate</code>存在于两种形式：</p><ol><li>一个单独的对象；</li><li>一组相互有关联的对象，其中一个作为<code>ROOT</code>，外部只能通过<code>AggregateRoot</code>对这组对象进行交互；<br>这里Customer不能直接访问Car下面的Tire，只能通过聚合根Car来访问。</li></ol><h2 id="什么是EventSourcing"><a href="#什么是EventSourcing" class="headerlink" title="什么是EventSourcing?"></a>什么是EventSourcing?</h2><p>不保存对象的最新状态，而是保存对象产生的所有事件。<br>通过事件回溯(Event Sourcing, ES)得到对象最新的状态</p><p>以前我们是在每次对象参与完一个业务动作后把对象的最新状态持久化保存到数据库中，也就是说我们的数据库中的数据是反映了对象的当前最新的状态。而事件溯源则相反，不是保存对象的最新状态，而是保存这个对象所经历的每个事件，所有的由对象产生的事件会按照时间先后顺序有序的存放在数据库中。当我们需要这个对象的最新状态时，只要先创建一个空的对象，然后把和改对象相关的所有事件按照发生的先后顺序从先到后全部应用一遍即可。这个过程就是事件回溯。</p><p>因为一个事件就是表示一个事实，事实是不能被磨灭或修改的，所以ES中的事件本身是不可修改的(Immutable)，不会有DELETE或UPDATE操作。<br>ES很明显先天就会有个问题——由于不停的记录Event，回溯获得对象最新状态所需花的时间会与事件的数量成正比，当数据量大了以后，获取最新状态的时间也相对的比较长。<br>而在很多的逻辑操作中，进行“写”前一般会需要“读”来做校验，所以ES架构的系统中一般会在<strong>内存</strong>中维护一份对象的最新状态，在启动时进行”预热”，读取所有持久化的事件进行回溯。这样在读对象——也就是<code>Aggregate</code>的最新状态时，就不会因为慢影响性能。<br>同时，也可以根据一些策略，把一部分的Event合集所产生的状态作为一个snapshot，下次直接从该snapshot开始回溯。<br>既然需要读，就不可避免的遇到并发问题。<br>EventSourcing要求对回溯的操作必须是原子性的，具体实现可参照Actor模型。</p><h3 id="Actor-Model"><a href="#Actor-Model" class="headerlink" title="Actor Model"></a>Actor Model</h3><p>ActorModel的核心思想是与对象的交互不会直接调用，而是通过发消息。如下图：<br><img src="/images/2017/03/CH06-ActorIntro.png" alt=""><br>每一个Actor都有一个Mailbox，它收到的所有的消息都会先放入Mailbox中，然后Actor内部单线程处理Mailbox中的消息。从而保证对同一个Actor的任何消息的处理，都是线性的，无并发冲突。整个系统中，有很多的Actor，每个Actor都在处理自己Mailbox中的消息，Actor之间通过发消息来通信。<br><a href="akka.io">Akka框架</a>就是实现Actor模型的并行开发框架。Actor作为DDD聚合根，最新状态是在内存中。Actor的状态修改是由事件驱动的，事件被持久化起来，然后通过Event Sourcing的技术，还原特定Actor的最新状态到内存。<br>另外，还有<a href="eventuate.io">Eventuate</a>，两者的作者是同一人，如果对Akka和Eventuate的区别感兴趣的话，可以参照我翻译的一篇文章<a href="http://edisonxu.com/2017/01/22/akka-persistence-eventuate-comparison.html" target="_blank" rel="noopener">(译)Akka Persistence和Eventuate的对比</a>。</p><h2 id="什么是CQRS"><a href="#什么是CQRS" class="headerlink" title="什么是CQRS?"></a>什么是CQRS?</h2><p><strong>CQRS</strong> 架构全称是<code>Command Query Responsibility Segregation</code>，即命令查询职责分离，名词本身最早应该是<a href="http://codebetter.com/gregyoung/" target="_blank" rel="noopener">Greg Young</a>提出来的，但是概念却很早就有了。<br>本质上，CQRS也是一种读写分离的机制，架构图如下：<br><img src="/images/2017/03/cqrs.png" alt=""></p><p>CQRS把整个系统划分成两块：</p><ul><li><code>Command Side</code> 写的一边<br>接收外部所有的Insert、Update、Delete命令，转化为<code>Command</code>，每一个<code>Command</code>修改一个<code>Aggregate</code>的状态。<code>Command Side</code>的命令通常不需要返回数据。注意：这种“写”操作过程中，可能会涉及“读”，因为要做校验，这时可直接在这一边进行读操作，而不需要再到<code>Query Side</code>去。</li><li><code>Query Side</code> 读的一边<br>接受所有查询请求，直接返回数据。</li></ul><p>由于C端与Q端的分离，两端各有一个自己的<code>Repository</code>，可根据不同的特性选取不同的产品，比如C端用RMDB，而Q端选用读取速度更快的NoSQL产品。</p><h3 id="CQRS适用的场景"><a href="#CQRS适用的场景" class="headerlink" title="CQRS适用的场景"></a>CQRS适用的场景</h3><p>使用了CQRS架构，由于读写之间会有延迟，就意味着系统的一致性模型为最终一致性(Eventual Consistency)，所以CQRS架构一般用于读比写大很多的场景。<br>注意：<br>CQRS并不像SOA、EDA(EventDrivenArchitecture)属于顶级架构，它有自己的局限性，并不适合于一切场景。有些天然适合于CRUD的系统，在评估CQRS所带来的好处与坏处后，认为利大于弊再选取CQRS。所以，通常CQRS只作为一个大系统中某部分功能实现时使用。</p><h2 id="EventSourcing和CQRS的关系"><a href="#EventSourcing和CQRS的关系" class="headerlink" title="EventSourcing和CQRS的关系"></a>EventSourcing和CQRS的关系</h2><p>从前面的介绍，应该可以发现两者其实并没有直接的关系，但是EventSourcing天然适合CQRS架构的C端的实现。<br>CQRS/ES整合在一起的架构，优缺点如下：</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>记录了数据变化的完整过程，便于BI分析</li><li>可以有效解决线上的数据问题，重演一遍，就可以找到问题所在</li><li>可以随时将系统还原到任何一个时间点</li><li>正确的实施后，天然适合并发场景</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>事件数量巨大，造成存储端成本上升</li><li>通过回溯重演获取<code>Aggregate</code>状态时，如果相关事件过多，需要提前“预热”</li><li>事件本身的内容被重构后，必须兼容以前的事件</li><li>事件驱动对传统思维的改变，需要适应</li><li>实施门槛高，需要成熟框架或中间件支撑</li></ul><h2 id="CQRS-ES怎么解决微服务的难题？"><a href="#CQRS-ES怎么解决微服务的难题？" class="headerlink" title="CQRS/ES怎么解决微服务的难题？"></a>CQRS/ES怎么解决微服务的难题？</h2><p>我们先把实现微服务事务中的主要难点列出来，然后看用CQRS/ES是怎么一一解决的。</p><ol><li><p>必须自己实现事务的统一commit和rollback；<br>这个是无论哪一种方式，都必须面对的问题。完全逃不掉。在DDD中有一个叫<code>Saga</code>的概念，专门用于统理这种复杂交互业务的，CQRS/ES架构下，由于本身就是最终一致性，所以都实现了<code>Saga</code>，可以使用该机制来做微服务下的transaction治理。</p></li><li><p>请求幂等<br>请求发送后，由于各种原因，未能收到正确响应，而被请求端已经正确执行了操作。如果这时重发请求，则会造成重复操作。<br>CQRS/ES架构下通过AggregateRootId、Version、CommandId三种标识来识别相同command，目前的开源框架都实现了幂等支持。</p></li><li><p>并发<br>单点上，CQRS/ES中按事件的先来后到严格执行，内存中<code>Aggregate</code>的状态由单一线程原子操作进行改变。<br>多节点上，通过EventStore的broker机制，毫秒级将事件复制到其他节点，保证同步性，同时支持版本回退。(Eventuate)</p></li></ol><h3 id="CQRS-ES如何与微服务架构结合"><a href="#CQRS-ES如何与微服务架构结合" class="headerlink" title="CQRS/ES如何与微服务架构结合"></a>CQRS/ES如何与微服务架构结合</h3><p>结合的方式很简单，就是把合适的服务变成CQRS/ES架构，然后提供一个统一的分布式消息队列。<br>每个服务自己内部用的C或Q的Storage完全可以不同，但C端的Storage尽量使用同一个，例如MongoDB、Cansandra这种本身就是HA的，以保证可用性。同时也可以避免大数据分析导数据时需要从不同的库导。<br>目前，相对成熟的CQRS/ES可用框架有：</p><table><thead><tr><th>名称</th><th>地址</th><th>语言</th><th>文档</th><th>特点</th></tr></thead><tbody><tr><td>AxonFramework</td><td><a href="http://www.axonframework.org" target="_blank" rel="noopener">http://www.axonframework.org</a></td><td>Java</td><td>比较全，更新及时</td><td>目前作者正在开发与SpringCloud的相关集成</td></tr><tr><td>Akka Persistence</td><td><a href="http://akka.io/" target="_blank" rel="noopener">http://akka.io/</a></td><td>Scala(也有.Net版)</td><td>文档全</td><td>相对成熟，性能较强</td></tr><tr><td>Eventuate</td><td><a href="http://eventuate.io" target="_blank" rel="noopener">http://eventuate.io</a></td><td>Scala</td><td>文档较少</td><td>与Akka同源，在Akka基础上对分布式相关功能进行了增强，提供AWS上的SaaS</td></tr><tr><td>ENode</td><td><a href="https://github.com/tangxuehua/enode" target="_blank" rel="noopener">https://github.com/tangxuehua/enode</a></td><td>C#</td><td>博客</td><td>来自微软的国人原创</td></tr><tr><td>Confluent</td><td><a href="https://www.confluent.io" target="_blank" rel="noopener">https://www.confluent.io</a></td><td>Scala</td><td>文档较少</td><td>不仅仅只是CQRS/ES，是整个一套基于kafka的高性能微服务产品，提供商业版</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在研究微服务的过程中，跨服务的操作处理，尤其是带有事务性需要统一commit或rollback的，是比较麻烦的。本系列记录了我在研究这一过程中的心得体会。&lt;br&gt;本篇主要就以下几个问题进行介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务中的一个大难题&lt;/li&gt;
&lt;li&gt;DDD中的几个基本概念&lt;/li&gt;
&lt;li&gt;什么是EventSourcing？&lt;/li&gt;
&lt;li&gt;什么是CQRS？&lt;/li&gt;
&lt;li&gt;EventSourcing和CQRS的关系？&lt;/li&gt;
&lt;li&gt;CQRS/ES怎么解决微服务的难题？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;微服务中的一个大难题&quot;&gt;&lt;a href=&quot;#微服务中的一个大难题&quot; class=&quot;headerlink&quot; title=&quot;微服务中的一个大难题&quot;&gt;&lt;/a&gt;微服务中的一个大难题&lt;/h2&gt;&lt;p&gt;微服务架构已经热了有两年了，而且目测会越来越热，除非有更高级的架构出现。相关解释和说明，网上一搜一大堆，我这里就不重复了。一句话概括：&lt;br&gt;微服务将原来的N个模块，或者说服务，按照适当的边界，从单节点划分成一整个分布式系统中的若干节点上。&lt;br&gt;&lt;img src=&quot;/images/2017/03/microservice.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CQRS" scheme="http://edisonxu.org/tags/CQRS/"/>
    
      <category term="axon" scheme="http://edisonxu.org/tags/axon/"/>
    
      <category term="event sourcing" scheme="http://edisonxu.org/tags/event-sourcing/"/>
    
  </entry>
  
  <entry>
    <title>论精益与领域设计</title>
    <link href="http://edisonxu.org/2017/03/17/lean-and-ddd.html"/>
    <id>http://edisonxu.org/2017/03/17/lean-and-ddd.html</id>
    <published>2017-03-17T07:00:21.000Z</published>
    <updated>2018-10-30T01:50:54.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>你是否遇到过这种事？一个“好”工程师，非常喜欢学习和钻研新的技术知识，JEE时代学习Spring，SSH时代学习分布式，大数据时代又开始学习Hadoop,Storm,云时代开始搞docker,k8……然后成长为一名“架构师”了，在他的公司，有一个重要项目，于是乎他决意把这个项目设计成一个全分布式的系统，毕竟“时髦”嘛。每一个小的开发团队负责分布式中的一个服务。由于架构师对这些程序员缺乏必要的指导和控制，每个程序员只熟悉自己负责的一小块工作，彼此间缺乏沟通和协作，这个项目的<code>概念完整性</code>很快就被破坏了，他们开始自行其事，分布式服务间大量的远程调用导致了性能和可伸缩性等多方面的问题，开发、测试、运维的工作难度与日递增。慢慢的，项目的开发人员，离职的越来越多，包含最初的架构师，代码的维护越来越难，最终只能重构，将十几个分布式服务合并为三个相对独立的集中应用。最初良好的架构，到最后沦为废墟。中间一位离职的程序员，换了一家公司，涨了一点工资，开始了另一段新系统建设的“狂欢”，周而复始，随着年龄的增大，他不再能够从软件开发中享受到乐趣，开发的生涯，对他来说痛苦开始多余快乐。学习新技术，他也比不上年轻人。运气好的话，他可以转产品、管理或做业务，运气不好的话，还得继续码代码，毕竟要养家糊口。从一家公司换到另一家公司……</p><h2 id="“如果”"><a href="#“如果”" class="headerlink" title="“如果”"></a>“如果”</h2><p>这是一个悲剧的故事，尤其是最后那位程序员。然而这可能是国内很多软件开发人员的真实写照。那么，我们从“上帝视角”来开看待这一切，会怎么样呢？先从“如果”开始吧。</p><ul><li>如果最初那位“架构师”不盲目赶时髦，压制住自己想通过该项目展示自己功力的想法，转而根据实际的业务需要和人力资源情况，考虑适当扩展性、可维护性后，再设计这套架构，会不会好点？</li><li>如果那位“架构师”抽出时间，找到合适的方法来指导和控制开发的程序员，保证整个系统的<code>概念完整性</code>，架构会不会发挥出它应有的能力和好处呢？</li><li>如果那位程序员，发现自己志不在编码，早日转行找到适合自己的岗位，生活会不会幸福很多呢？比如之前中关村离职开水果店的那位成功”程序员”（一日程序员，终生程序员）</li><li>如果那位程序员，能够及时意识到学习新知识的重要性，并以此为乐，或许，他会成为另一位最初的那位架构师</li><li>如果那位程序员和那位架构师，在开始一切之前，与<code>领域专家</code>进行详细的领域建模，能把握相关领域的核心知识，对他们的进一步前行，转行、进阶架构、进阶CTO，会不会带来额外的好处或便利？</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>当然，世界上不允许有如果，也没有后悔药。废话不多说，如果要在技术上继续走下去，总结起来无外乎几点：</p><ol><li>追求精益，即提高效率，避免浪费，哪怕你当了CTO、CEO；</li><li>重视沟通，重视团队管理，而不仅仅把注意力集中在新技术和良好的架构上；</li><li>一切都要透过现象看本质，把握核心要素；</li><li>保持危机感和饥渴；</li></ol><p>如果不想在技术上走下去，可以到这里就结束了。友情提醒：当管理可比做技术难太多了，人心比海深。</p><p>我们从现在回头看软件开发的历史，开发模式的演进，从瀑布式到极限到敏捷，到现在的DevOps，还是技术的演进，其实都是在1、2两点上进行不断的尝试和优化。最终，1、2其实都可以归于<code>精益</code>的思想。对于精益，我就不多叙述了，强烈推荐精益创业这本经典，虽然书本身是写给产品和创业者的，但精益的思想是普适的。<br>而3、4两点是针对个人的，对应到软件开发，就是DDD的出现。DDD最大的作用就是为了达到第三点（当然，对第2点也好很好的体现），把业务上真正核心要解决的问题进行建模。<br>这里我就不再详细阐述DDD的具体内容了，随便一搜一大把，下一篇我会就其中几个比较重要的概念进行解释，但是千万不要把DDD与单纯的以名词建模混为一谈，我曾经见过直接把一个业务中所有的名词抽象出来进行OOP的……囧<br>推荐看InfoQ几年前出的Domain-Driven Design Quickly(dddquickly)或<a href="http://www.infoq.com/resource/minibooks/domain-driven-design-quickly-new/zh/pdf/dddquickly-chinese-2014version.pdf" target="_blank" rel="noopener">中文精简版</a> ，有一定基础后，再去看原作者，也就是DDD概念的创始人Eric Evans的大作 <a href="">Domain-Driven Design: Tacking Complexity in the Heart of Software</a></p><hr><p>细思极恐，软件开发最终也还是跟哲学扯上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;你是否遇到过这种事？一个“好”工程师，非常喜欢学习和钻研新的技术知识，JEE时代学习Spring，SSH时代学习分布式，大数据时代又开始学习Hadoop,Storm,云时代开始搞docker,k8……然后成长为一名“架构师”了，在他的公司，有一个重要项目，于是乎他决意把这个项目设计成一个全分布式的系统，毕竟“时髦”嘛。每一个小的开发团队负责分布式中的一个服务。由于架构师对这些程序员缺乏必要的指导和控制，每个程序员只熟悉自己负责的一小块工作，彼此间缺乏沟通和协作，这个项目的&lt;code&gt;概念完整性&lt;/code&gt;很快就被破坏了，他们开始自行其事，分布式服务间大量的远程调用导致了性能和可伸缩性等多方面的问题，开发、测试、运维的工作难度与日递增。慢慢的，项目的开发人员，离职的越来越多，包含最初的架构师，代码的维护越来越难，最终只能重构，将十几个分布式服务合并为三个相对独立的集中应用。最初良好的架构，到最后沦为废墟。中间一位离职的程序员，换了一家公司，涨了一点工资，开始了另一段新系统建设的“狂欢”，周而复始，随着年龄的增大，他不再能够从软件开发中享受到乐趣，开发的生涯，对他来说痛苦开始多余快乐。学习新技术，他也比不上年轻人。运气好的话，他可以转产品、管理或做业务，运气不好的话，还得继续码代码，毕竟要养家糊口。从一家公司换到另一家公司……&lt;/p&gt;
&lt;h2 id=&quot;“如果”&quot;&gt;&lt;a href=&quot;#“如果”&quot; class=&quot;headerlink&quot; title=&quot;“如果”&quot;&gt;&lt;/a&gt;“如果”&lt;/h2&gt;
    
    </summary>
    
    
      <category term="DDD" scheme="http://edisonxu.org/tags/DDD/"/>
    
      <category term="感悟" scheme="http://edisonxu.org/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>JAVA线程间通信的几种方式</title>
    <link href="http://edisonxu.org/2017/03/02/java-thread-communication.html"/>
    <id>http://edisonxu.org/2017/03/02/java-thread-communication.html</id>
    <published>2017-03-02T13:10:44.000Z</published>
    <updated>2018-02-23T02:19:15.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天在群里面看到一个很有意思的面试题：<br>“编写两个线程，一个线程打印1~25，另一个线程打印字母A~Z，打印顺序为12A34B56C……5152Z，要求使用线程间的通信。”<br>这是一道非常好的面试题，非常能彰显被面者关于多线程的功力，一下子就勾起了我的兴趣。这里抛砖引玉，给出7种想到的解法。</p></blockquote><h2 id="1-第一种解法，包含多种小的不同实现方式，但一个共同点就是靠一个共享变量来做控制；"><a href="#1-第一种解法，包含多种小的不同实现方式，但一个共同点就是靠一个共享变量来做控制；" class="headerlink" title="1. 第一种解法，包含多种小的不同实现方式，但一个共同点就是靠一个共享变量来做控制；"></a>1. 第一种解法，包含多种小的不同实现方式，但一个共同点就是<strong>靠一个共享变量来做控制</strong>；</h2><h3 id="a-利用最基本的synchronized、notify、wait："><a href="#a-利用最基本的synchronized、notify、wait：" class="headerlink" title="a. 利用最基本的synchronized、notify、wait："></a>a. 利用最基本的<code>synchronized</code>、<code>notify</code>、<code>wait</code>：</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodOne</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadToGo threadToGo = <span class="keyword">new</span> ThreadToGo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (threadToGo) &#123;</span><br><span class="line">                            <span class="keyword">while</span> (threadToGo.value == <span class="number">2</span>)</span><br><span class="line">                                threadToGo.wait();</span><br><span class="line">                            Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                            threadToGo.value = <span class="number">2</span>;</span><br><span class="line">                            threadToGo.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Oops..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (threadToGo) &#123;</span><br><span class="line">                            <span class="keyword">while</span> (threadToGo.value == <span class="number">1</span>)</span><br><span class="line">                                threadToGo.wait();</span><br><span class="line">                            Helper.print(arr[i]);</span><br><span class="line">                            threadToGo.value = <span class="number">1</span>;</span><br><span class="line">                            threadToGo.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Oops..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ThreadToGo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MethodOne one = <span class="keyword">new</span> MethodOne();</span><br><span class="line">        Helper.instance.run(one.newThreadOne());</span><br><span class="line">        Helper.instance.run(one.newThreadTwo());</span><br><span class="line">        Helper.instance.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-利用Lock和Condition："><a href="#b-利用Lock和Condition：" class="headerlink" title="b. 利用Lock和Condition："></a>b. 利用<code>Lock</code>和<code>Condition</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadToGo threadToGo = <span class="keyword">new</span> ThreadToGo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.lock();</span><br><span class="line">                        <span class="keyword">while</span>(threadToGo.value == <span class="number">2</span>)</span><br><span class="line">                            condition.await();</span><br><span class="line">                        Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                        threadToGo.value = <span class="number">2</span>;</span><br><span class="line">                        condition.signal();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.lock();</span><br><span class="line">                        <span class="keyword">while</span>(threadToGo.value == <span class="number">1</span>)</span><br><span class="line">                            condition.await();</span><br><span class="line">                        Helper.print(arr[i]);</span><br><span class="line">                        threadToGo.value = <span class="number">1</span>;</span><br><span class="line">                        condition.signal();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        lock.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ThreadToGo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MethodTwo two = <span class="keyword">new</span> MethodTwo();</span><br><span class="line">        Helper.instance.run(two.newThreadOne());</span><br><span class="line">        Helper.instance.run(two.newThreadTwo());</span><br><span class="line">        Helper.instance.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-利用volatile："><a href="#c-利用volatile：" class="headerlink" title="c. 利用volatile："></a>c. 利用<code>volatile</code>：</h3><p>  <code>volatile</code>修饰的变量值直接存在main memory里面，子线程对该变量的读写直接写入main memory，而不是像其它变量一样在local thread里面产生一份copy。<code>volatile</code>能保证所修饰的变量对于多个线程可见性，即只要被修改，其它线程读到的一定是最新的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodThree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadToGo threadToGo = <span class="keyword">new</span> ThreadToGo();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ThreadToGo</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(threadToGo.value==<span class="number">2</span>)&#123;&#125;</span><br><span class="line">                    Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                    threadToGo.value=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(threadToGo.value==<span class="number">1</span>)&#123;&#125;</span><br><span class="line">                    Helper.print(arr[i]);</span><br><span class="line">                    threadToGo.value=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MethodThree three = <span class="keyword">new</span> MethodThree();</span><br><span class="line">        Helper.instance.run(three.newThreadOne());</span><br><span class="line">        Helper.instance.run(three.newThreadTwo());</span><br><span class="line">        Helper.instance.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="d-利用AtomicInteger："><a href="#d-利用AtomicInteger：" class="headerlink" title="d. 利用AtomicInteger："></a>d. 利用<code>AtomicInteger</code>：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodFive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger threadToGo = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(threadToGo.get()==<span class="number">2</span>)&#123;&#125;</span><br><span class="line">                    Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                    threadToGo.set(<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(threadToGo.get()==<span class="number">1</span>)&#123;&#125;</span><br><span class="line">                    Helper.print(arr[i]);</span><br><span class="line">                    threadToGo.set(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MethodFive five = <span class="keyword">new</span> MethodFive();</span><br><span class="line">        Helper.instance.run(five.newThreadOne());</span><br><span class="line">        Helper.instance.run(five.newThreadTwo());</span><br><span class="line">        Helper.instance.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-第二种解法，是利用CyclicBarrierAPI；"><a href="#2-第二种解法，是利用CyclicBarrierAPI；" class="headerlink" title="2. 第二种解法，是利用CyclicBarrierAPI；"></a>2. 第二种解法，是利用<code>CyclicBarrier</code>API；</h2><p><code>CyclicBarrier</code>可以实现让一组线程在全部到达<code>Barrier</code>时(执行<code>await()</code>)，再一起同时执行，并且所有线程释放后，还能复用它,即为Cyclic。<br><code>CyclicBarrier</code>类提供两个构造器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里是利用它到达<code>Barrier</code>后去执行barrierAction。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodFour</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> CyclicBarrier barrier;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">MethodFour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">          barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">2</span>,newBarrierAction());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j=<span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>,j++) &#123;</span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                          list.add(arr[i]);</span><br><span class="line">                          list.add(arr[i+<span class="number">1</span>]);</span><br><span class="line">                          barrier.await();</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                      <span class="keyword">try</span> &#123;</span><br><span class="line">                          list.add(arr[i]);</span><br><span class="line">                          barrier.await();</span><br><span class="line">                      &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                          e.printStackTrace();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> Runnable <span class="title">newBarrierAction</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  Collections.sort(list);</span><br><span class="line">                  list.forEach(c-&gt;System.out.print(c));</span><br><span class="line">                  list.clear();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">          MethodFour four = <span class="keyword">new</span> MethodFour();</span><br><span class="line">          Helper.instance.run(four.newThreadOne());</span><br><span class="line">          Helper.instance.run(four.newThreadTwo());</span><br><span class="line">          Helper.instance.shutdown();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里多说一点，这个API其实还是利用<code>lock</code>和<code>condition</code>，无非是多个线程去争抢<code>CyclicBarrier</code>的instance的lock罢了，最终barrierAction执行时，是在抢到<code>CyclicBarrier</code>instance的那个线程上执行的。</strong></p><h2 id="3-第三种解法，是利用PipedInputStreamAPI；"><a href="#3-第三种解法，是利用PipedInputStreamAPI；" class="headerlink" title="3. 第三种解法，是利用PipedInputStreamAPI；"></a>3. 第三种解法，是利用<code>PipedInputStream</code>API；</h2><p>这里用流在两个线程间通信，但是Java中的Stream是单向的，所以在两个线程中分别建了一个input和output。这显然是一种很搓的方式，不过也算是一种通信方式吧……-_-T，执行的时候那种速度简直。。。请不要BS我。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodSix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PipedInputStream inputStream1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PipedOutputStream outputStream1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PipedInputStream inputStream2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PipedOutputStream outputStream2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] MSG;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodSix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inputStream1 = <span class="keyword">new</span> PipedInputStream();</span><br><span class="line">        outputStream1 = <span class="keyword">new</span> PipedOutputStream();</span><br><span class="line">        inputStream2 = <span class="keyword">new</span> PipedInputStream();</span><br><span class="line">        outputStream2 = <span class="keyword">new</span> PipedOutputStream();</span><br><span class="line">        MSG = <span class="string">"Go"</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream1.connect(outputStream2);</span><br><span class="line">            inputStream2.connect(outputStream1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        inputStream1.close();</span><br><span class="line">        inputStream2.close();</span><br><span class="line">        outputStream1.close();</span><br><span class="line">        outputStream2.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="keyword">private</span> PipedInputStream in = inputStream1;</span><br><span class="line">            <span class="keyword">private</span> PipedOutputStream out = outputStream1;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                    Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        out.write(MSG);</span><br><span class="line">                        <span class="keyword">byte</span>[] inArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">                        in.read(inArr);</span><br><span class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="string">"Go"</span>.equals(<span class="keyword">new</span> String(inArr)))</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="keyword">private</span> PipedInputStream in = inputStream2;</span><br><span class="line">            <span class="keyword">private</span> PipedOutputStream out = outputStream2;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">byte</span>[] inArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">                        in.read(inArr);</span><br><span class="line">                        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="string">"Go"</span>.equals(<span class="keyword">new</span> String(inArr)))</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Helper.print(arr[i]);</span><br><span class="line">                        out.write(MSG);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        MethodSix six = <span class="keyword">new</span> MethodSix();</span><br><span class="line">        Helper.instance.run(six.newThreadOne());</span><br><span class="line">        Helper.instance.run(six.newThreadTwo());</span><br><span class="line">        Helper.instance.shutdown();</span><br><span class="line">        six.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-第四种解法，是利用BlockingQueue；"><a href="#4-第四种解法，是利用BlockingQueue；" class="headerlink" title="4. 第四种解法，是利用BlockingQueue；"></a>4. 第四种解法，是利用<code>BlockingQueue</code>；</h2><p>顺便总结下<code>BlockingQueue</code>的一些内容。<br><code>BlockingQueue</code>定义的常用方法如下:</p><ul><li><code>add(Object)</code>：把Object加到BlockingQueue里，如果BlockingQueue可以容纳，则返回true，否则抛出异常。</li><li><code>offer(Object)</code>：表示如果可能的话，将Object加到BlockingQueue里，即如果BlockingQueue可以容纳，则返回true，否则返回false。</li><li><code>put(Object)</code>：把Object加到BlockingQueue里，如果BlockingQueue没有空间，则调用此方法的线程被阻断直到BlockingQueue里有空间再继续。</li><li><code>poll(time)</code>：获取并删除BlockingQueue里排在首位的对象，若不能立即取出，则可以等time参数规定的时间，取不到时返回null。当不传入time值时，立刻返回。</li><li><code>peek()</code>：立刻获取BlockingQueue里排在首位的对象，但不从队列里删除，如果队列为空，则返回null。</li><li><code>take()</code>：获取并删除BlockingQueue里排在首位的对象，若BlockingQueue为空，阻断进入等待状态直到<code>BlockingQueue</code>有新的对象被加入为止。</li></ul><p><code>BlockingQueue</code>有四个具体的实现类：</p><ul><li><code>ArrayBlockingQueue</code>：规定大小的<code>BlockingQueue</code>，其构造函数必须带一个int参数来指明其大小。其所含的对象是以FIFO（先入先出）顺序排序的。</li><li><code>LinkedBlockingQueue</code>：大小不定的<code>BlockingQueue</code>，若其构造函数带一个规定大小的参数，生成的BlockingQueue有大小限制，若不带大小参数，所生成的<code>BlockingQueue</code>的大小由<code>Integer.MAX_VALUE</code>来决定。其所含的对象是以FIFO顺序排序的。</li><li><code>PriorityBlockingQueue</code>：类似于<code>LinkedBlockingQueue</code>,但其所含对象的排序不是FIFO，而是依据对象的自然排序顺序或者是构造函数所带的<code>Comparator</code>决定的顺序。</li><li><code>SynchronousQueue</code>：特殊的<code>BlockingQueue</code>，对其的操作必须是放和取交替完成的。</li></ul><p>这里我用了两种玩法：</p><ul><li>一种是共享一个queue，根据<code>peek</code>和<code>poll</code>的不同来实现；</li><li>第二种是两个queue，利用<code>take()</code>会自动阻塞来实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodSeven</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                    Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                    queue.offer(<span class="string">"TwoToGo"</span>);</span><br><span class="line">                    <span class="keyword">while</span>(!<span class="string">"OneToGo"</span>.equals(queue.peek()))&#123;&#125;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!<span class="string">"TwoToGo"</span>.equals(queue.peek()))&#123;&#125;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    Helper.print(arr[i]);</span><br><span class="line">                    queue.offer(<span class="string">"OneToGo"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;String&gt; queue1 = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;String&gt; queue2 = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildNoArr(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">                    Helper.print(arr[i], arr[i + <span class="number">1</span>]);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        queue2.put(<span class="string">"TwoToGo"</span>);</span><br><span class="line">                        queue1.take();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">newThreadFour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] inputArr = Helper.buildCharArr(<span class="number">26</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">private</span> String[] arr = inputArr;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        queue2.take();</span><br><span class="line">                        Helper.print(arr[i]);</span><br><span class="line">                        queue1.put(<span class="string">"OneToGo"</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MethodSeven seven = <span class="keyword">new</span> MethodSeven();</span><br><span class="line">        Helper.instance.run(seven.newThreadOne());</span><br><span class="line">        Helper.instance.run(seven.newThreadTwo());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">        Helper.instance.run(seven.newThreadThree());</span><br><span class="line">        Helper.instance.run(seven.newThreadFour());</span><br><span class="line">        Helper.instance.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本文所有代码已上传至GitHub：<a href="https://github.com/EdisonXu/POC/tree/master/concurrent-test" target="_blank" rel="noopener">https://github.com/EdisonXu/POC/tree/master/concurrent-test</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天在群里面看到一个很有意思的面试题：&lt;br&gt;“编写两个线程，一个线程打印1~25，另一个线程打印字母A~Z，打印顺序为12A34B56C……5152Z，要求使用线程间的通信。”&lt;br&gt;这是一道非常好的面试题，非常能彰显被面者关于多线程的功力，一下子就勾起了我的兴趣。这里抛砖引玉，给出7种想到的解法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-第一种解法，包含多种小的不同实现方式，但一个共同点就是靠一个共享变量来做控制；&quot;&gt;&lt;a href=&quot;#1-第一种解法，包含多种小的不同实现方式，但一个共同点就是靠一个共享变量来做控制；&quot; class=&quot;headerlink&quot; title=&quot;1. 第一种解法，包含多种小的不同实现方式，但一个共同点就是靠一个共享变量来做控制；&quot;&gt;&lt;/a&gt;1. 第一种解法，包含多种小的不同实现方式，但一个共同点就是&lt;strong&gt;靠一个共享变量来做控制&lt;/strong&gt;；&lt;/h2&gt;&lt;h3 id=&quot;a-利用最基本的synchronized、notify、wait：&quot;&gt;&lt;a href=&quot;#a-利用最基本的synchronized、notify、wait：&quot; class=&quot;headerlink&quot; title=&quot;a. 利用最基本的synchronized、notify、wait：&quot;&gt;&lt;/a&gt;a. 利用最基本的&lt;code&gt;synchronized&lt;/code&gt;、&lt;code&gt;notify&lt;/code&gt;、&lt;code&gt;wait&lt;/code&gt;：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="http://edisonxu.org/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>(译)Akka Persistence和Eventuate的对比</title>
    <link href="http://edisonxu.org/2017/01/22/akka-persistence-eventuate-comparison.html"/>
    <id>http://edisonxu.org/2017/01/22/akka-persistence-eventuate-comparison.html</id>
    <published>2017-01-22T09:23:53.000Z</published>
    <updated>2018-02-23T02:19:15.402Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在实现微服务架构中，遇到了分布式事务的问题。Event-sourcing和CQRS是一个比较适合微服务的解决方案。在学习过程中，遇到了这篇文章，觉得很不错，特地翻译给大家。本文翻译自：<a href="http://krasserm.github.io/2015/05/25/akka-persistence-eventuate-comparison/" target="_blank" rel="noopener">A comparison of Akka Persistence with Eventuate</a></p></blockquote><p>Akka Persistence和Eventuate都是Scala写的，基于Akka的event-sourcing和CQRS工具，以不同的方式实现分布式系统方案。关于这两个工具的详情，请参见他们自己的在线文档。</p><p>我是Akka Persistence和Eventuate的原作者，目前主要关注在Eventuate的开发实现。当然，我的意见肯定会带有偏见;) 言归正传，如果我哪里写的不对，请一定一定告之我。</p><h2 id="Command-side"><a href="#Command-side" class="headerlink" title="Command side"></a>Command side</h2><p>在Akka Persistence中，command这边(CQRS中的C)是由<code>PersistentActor</code>(PA)来实现的，而Eventuate是由<code>EventSourcedActor</code>(EA)来实现的。他们的内部状态代表了应用的写入模型。</p><p>PA和EA根据写入模型来对新的command进行校验，如果校验成功，则生成并持久化一条/多条event,后续用于更新内部状态。当crash或正常的应用重启,内部状态可以通过重演整个event log中已持久化的event或从某一个snapshot开始重演，来恢复内部状态。PA和EA都支持发送消息到其他actor的至少送达一次机制, Akka Persistence提供了<code>AtleastOnceDelivery</code>来实现，而Eventuate则使用<code>ConfirmedDelivery</code>。</p><p>从这个角度来看，PA和EA非常相似。一个主要的区别是，PA必须是单例，而EA则是可复制和同步修改的多实例。如果Akka Persistence意外地创建和更新了两个具有相同<code>persistenceId</code>的PA的实例，那么底层的event log将会被污染，要么是覆盖已有事件，要么把彼此冲突的事件拼接了起来（重演结果将不再准确）。Akka Persitence的event log设计只容许一个<em>writer</em>，并且event log本身是不能被共享的。</p><p>在Eventtuate中，EA可以共享同一个event log。基于事先自定义的event路由规则，一个EA发出的的event可以被另一个EA消费。换而言之，EA之间通过这个共享的event log可以进行协作，例如不同类型的EA一起组成一个分布式业务流程，或者实现状态复制中多地址下相同类型的EA的重建和内部状态的更新。这里的多地址甚至可以是全局分布的(<em>globally distributed</em>)。多地址间的状态复制是异步的，并保证可靠性。</p><h2 id="Event-Relations"><a href="#Event-Relations" class="headerlink" title="Event Relations"></a>Event Relations</h2><p>在Akka Persistence中，每个PA产生的event是有序的，而不同PA产生的event之间是没有任何关联性的。即使一个PA产生的event是比另一个PA产生的event早诞生，但是Akka Persistence不会记录这种先后顺序。比如，PA<sub>1</sub>持久化了一个事件e<sub>1</sub>，然后发送了一个command给PA<sub>2</sub>，使得后者在处理该command时持久化了另一个事件e<sub>2</sub>，那么显然e<sub>1</sub>是先于e<sub>2</sub>的，但是系统本身无法通过对比e<sub>1</sub>和e<sub>2</sub>来决定他们之间的这种先后的关联性。</p><p>Eventuate额外跟踪记录了这种happened-before的关联性(潜在的因果关系)。例如，如果EA<sub>1</sub>持久化了事件e<sub>1</sub>，EA<sub>2</sub>因为消费了e<sub>1</sub>而产生了事件e<sub>2</sub>，那么e<sub>1</sub>比e<sub>2</sub>先发生的这种关联性会被记录下来。happen-before关联性由<a href="http://rbmhtechnology.github.io/eventuate/architecture.html#vector-clocks" target="_blank" rel="noopener">vector clocks</a>来跟踪记录，系统可以通过对比两个event的vector timestamps来决定他们之间的关联性是先后发生的还是同时发生的。</p><p>跟踪记录event间的happened-before关联是运行多份EA relica的前提。EA在消费来自于它的replica的event时，必需要清楚它的内部状态的更新到底是先于该事件的，还是同时发生(可能产生冲突)。</p><p>如果最后一次状态更新先于准备消费的event，那么这个准备消费的event可被当作一个普通的更新来处理；但如果是同时产生的，那么该event可能具有冲突性，必须做相应处理，比如，</p><ul><li>如果EA内部状态是<a href="http://en.wikipedia.org/wiki/Conflict-free_replicated_data_type" target="_blank" rel="noopener">CRDT</a>，则该冲突可以被自动解决(详见Eventuate的<a href="http://rbmhtechnology.github.io/eventuate/user-guide.html#operation-based-crdts" target="_blank" rel="noopener">operation-based CRDTs</a>)</li><li>如果EA内部状态不是CRDT，Eventuate提供了进一步的方法来跟踪处理冲突,根据情况选择自动化或手动交互处理的方式。</li></ul><h2 id="Event-logs"><a href="#Event-logs" class="headerlink" title="Event logs"></a>Event logs</h2><p>前文提到过，Akka Persistence中，每一个PA有自己的event log。根据不同的存储后端，event log可冗余式的存于多个node上(比如为了保证高可用而采用的同步复制)，也可存于本地。不管是哪种方式，Akka Persistence都要求对event log的强一致性。</p><p>比如，当一个PA挂掉后，在另外一个node上恢复时，必须要保证该PA能够按正确的顺序读取到所有之前写入的event，否则这次恢复就是不完整的，可能会导致这个PA后面会覆写已存在的event，或者把一些与evet log中已有还未读的event有冲突的新event直接拼到event log后面，进而导致状态的不一致。所以，只有支持强一致性的存储后端才能被Akka Persistence使用。</p><p>AKka Persistence的写可用性取决于底层的存储后端的写可用性。根据<a href="http://en.wikipedia.org/wiki/CAP_theorem" target="_blank" rel="noopener">CAP理论</a>，对于强一致性、分布式的存储后端，它的写可用性是有局限性的，所以，Akka Persistence的command side选择CAP中的CP。</p><p>这种限制导致Akka Persistence很难做到全局分布下应用的强一致性，并且所有event的有序性还需要实现全局统一的协调处理。Eventuate在这点上做得要更好：它只要求在一个location上保持强一致性和event的有序性。这个location可以是一个数据中心、一个(微)服务、分布式中的一个节点、单节点下的一个流程等。</p><p>单location的Eventuate应用与Akka Persistence应用具有相同的一致性模型。但是，Eventuate应用通常会有多个location。单个location所产生的event会异步地、可靠地复制到其他location。跨location的evet复制是Eventuate独有的，并且保留了因果事件的存储顺序。不同location的存储后端之间并不直接通信，所以，不同location可以使用不同的存储后端。</p><p>Eventuate中在不同location间复制的event log被称之为<strong>replicated event log</strong>，它在某一个location上的代表被称为<strong>local event log</strong>。在不同location上的EA可以通过共享同一个replicated event log来进行event交换，从而为EA状态的跨location的状态复制提供了可能。即便是跨location的网络发生了隔断(network partition)，EA和它们底层的event log仍保持可写。从这个角度来说，一个多location的Eventuate应用从CAP中选择了AP。网络隔断后，在不同location的写入，可能会导致事件冲突，可用前面提到的方案去解决。</p><p>通过引入分割容忍（系统中任意信息的丢失或失败，不影响系统的继续运作）的location，event的全局完整排序将不再可能。在这种限制下的最强的部分排序是因果排序（casual ordering），例如保证happened-before关联关系的排序。Eventuate中，每一个location保证event以casual order递交给它们的本地EA(以及View，具体参见<a href="#Query-side">下一节</a>)。并发event在个别location的递交顺序可能不同，但在指定的location可重复提交的。</p><h2 id="Query-side"><a href="#Query-side" class="headerlink" title="Query side"></a>Query side</h2><p>Akka Persistence中，查询的一端(CQRS中的Q)可以用<code>PersistentView</code>(<em>PV</em>)来实现。目前一个PV仅限于消费一个PA所产生的event。这种限制在Akka的邮件群里被<a href="https://groups.google.com/forum/#!msg/akka-user/MNDc9cVG1To/blqgyC7sIRgJ" target="_blank" rel="noopener">大量讨论</a>过。从Akka2.4开始，一个比较好的方案是<a href="http://doc.akka.io/docs/akka/2.4.0/scala/persistence-query.html" target="_blank" rel="noopener">Akka Persistence Query</a>：把多个PA产生的event通过storage plugin进行聚合，聚合结果称为<a href="http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0/scala.html" target="_blank" rel="noopener">Akka Streams</a>，把Akka Streams作为PV的输入。</p><p>Eventuate中，查询的这端由<code>EventsourcedView</code>(<em>EV</em>)来实现。一个EV可以消费来自于所有共享同一个event log的EA所产生的event，即使这些EA是全局分布式的。event永远按照正确的casual order被消费。一个Eventuate应用可以只用一个replicated event log，也可以用类似以topic形式区分的多个event log。未来的一些扩展将允许EV直接消费多个event log，同时，Eventuate的Akka Stream API也在规划中。</p><h2 id="Storage-plugins"><a href="#Storage-plugins" class="headerlink" title="Storage plugins"></a>Storage plugins</h2><p>从storage plugin的角度看，Akka Persistence中event主要以<code>persistenceId</code>来区分管理，即每个PA实例拥有自己的event log。从多个PA实例进行event聚合就要求要么在storage后端创建额外的索引，要么创建实时的event流组成图(<em>stream composition</em>)，来服务查询。Eventuate中，从多个EA来的event都存储在同一个共享的event log中。在恢复时，没有预定义<code>aggregateId</code>的EA可消费该event log中的所有event，而定义过<code>aggregateId</code>的EA则只能作为路由目的地消费对应<code>aggregateId</code>的event。这就要求Eventuate的storage plugin必须维护一个独立index，以便于event通过<code>aggregateId</code>来重演。</p><p>Akka Persistence提供了一个用以存储日志和snapshot的公共storage plguin API，<a href="http://akka.io/community/" target="_blank" rel="noopener">社区贡献</a>了很多具体实现。Eventuate在未来也会定义一个公共的storage plugin API。就目前而言，可在LevelDB和Canssandra两者间任选一个作为存储后台。</p><h2 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h2><p>Akka Persistence中的PA和Eventuate中的EA都可以选择是否保持内部状态与event log中的同步。这关系到应用在写入一个新的event前，需要对新command和内部状态所进行的校验。为了防止被校验的是陈旧状态(<em>stale state</em>)，新的command必须要等到当前正在运行的写操作成功结束。PA通过<code>persist</code>方法支持该机制(相反对应的是<code>persistAsync</code>)，EA则使用一个<code>stateSync</code>的布尔变量。</p><p>同步内部状态与event log的后果是造成吞吐率的下降。由于event批量写入实现的不同，Akka Persistence中的这种内部状态同步比Eventuate所造成的的影响要更大。Akka Persistence中，event的批处理只有在使用<code>persistAsync</code>时，才是在PA层面的，而Eventuate在EA和storage plugin两个地方分别提供了批处理，所以对于不同的EA实例所产生的event，即使他们与内部状态要同步，也能被批量写入。</p><p>Akka Persistence和Eventuate中，单个PA和EA实例的吞吐率大致上是一样的(前提是所用的storage plugin具有可比性)。但是，Eventuate的整体吞吐率可以通过增加EA实例来得到提升，Akka Persistence就不行。这对于按照每个聚合一个PA/EA的设计，且有成千上万的活跃(可写)实例的应用，就显得特别有意义。仔细阅读Akka Persistence的代码，我认为把批处理逻辑从PA挪到独立的层面去，应该不需要很大的功夫。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Eventuate支持与Akka Persistence相同的一致性模型，但是额外支持了因果一致性，对于实现EA的高可用和分隔容忍(CAP中的AP)是必要条件。Eventuate还支持基于因果排序、去重复event流的可靠actor协作。从这些角度来看，Eventuate是Akka Persistence功能性的超集。</p><p>如果选择可用性高于一致性，冲突发现和(自动或交互式的)解决必须是首要考虑。Eventuate通过提供operation-based CRDT以及发现和解决应用状态冲突版本的工具、API，来提供支持。</p><p>对于分布式系统的弹性来说，处理错误比预防错误要显得更为重要。一个临时与其他location掉队分隔的location能继续保持运作，使得Eventuate成为离线场景的一个有意思的选择。</p><p>Eventuate现在仍是一个比较早期的项目，2014年末发布原型，2015年开源。目前是在<a href="http://www.redbullmediahouse.com/" target="_blank" rel="noopener">Red Bull Media House</a> (RBMH) <a href="http://rbmhtechnology.github.io/" target="_blank" rel="noopener">Open Source Initiative</a>下进行开发，主要用于RBMH的内部项目。</p><blockquote><p>年前年后杂七杂八事情太多，导致一直没能专心做研究，进度缓慢。本篇翻译有些地方可能比较难懂，因为确实没足够时间去研究Eventuate和Akka Persistence，对于作者有些表达的不是很清晰的地方，弄得还不是很清楚，只能字面上翻过来。以后再慢慢修正。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在实现微服务架构中，遇到了分布式事务的问题。Event-sourcing和CQRS是一个比较适合微服务的解决方案。在学习过程中，遇到了这篇文章，觉得很不错，特地翻译给大家。本文翻译自：&lt;a href=&quot;http://krasserm.github.io/2015/05/25/akka-persistence-eventuate-comparison/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A comparison of Akka Persistence with Eventuate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Akka Persistence和Eventuate都是Scala写的，基于Akka的event-sourcing和CQRS工具，以不同的方式实现分布式系统方案。关于这两个工具的详情，请参见他们自己的在线文档。&lt;/p&gt;
&lt;p&gt;我是Akka Persistence和Eventuate的原作者，目前主要关注在Eventuate的开发实现。当然，我的意见肯定会带有偏见;) 言归正传，如果我哪里写的不对，请一定一定告之我。&lt;/p&gt;
    
    </summary>
    
    
      <category term="akka" scheme="http://edisonxu.org/tags/akka/"/>
    
      <category term="eventsourcing" scheme="http://edisonxu.org/tags/eventsourcing/"/>
    
      <category term="eventuate" scheme="http://edisonxu.org/tags/eventuate/"/>
    
  </entry>
  
  <entry>
    <title>博客新家</title>
    <link href="http://edisonxu.org/2017/01/12/newblog.html"/>
    <id>http://edisonxu.org/2017/01/12/newblog.html</id>
    <published>2017-01-12T09:42:14.000Z</published>
    <updated>2018-02-23T02:19:15.417Z</updated>
    
    <content type="html"><![CDATA[<p>花了一天的时间，学习了Hexo，自定义了下模板，买了域名，搞了github和coding.net双站解析。<br>终于把这个新站建好了。暂时先放在免费平台上吧。<br>这里特别感谢<a href="http://blog.didispace.com/" target="_blank" rel="noopener">程序猿DD</a>贡献给我模板，这个Blog是高仿他的，细节部分做了些改动。以后慢慢往这里堆文字吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了一天的时间，学习了Hexo，自定义了下模板，买了域名，搞了github和coding.net双站解析。&lt;br&gt;终于把这个新站建好了。暂时先放在免费平台上吧。&lt;br&gt;这里特别感谢&lt;a href=&quot;http://blog.didispace.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程序猿DD&lt;/a&gt;贡献给我模板，这个Blog是高仿他的，细节部分做了些改动。以后慢慢往这里堆文字吧。&lt;/p&gt;

    
    </summary>
    
    
      <category term="杂项" scheme="http://edisonxu.org/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
</feed>
